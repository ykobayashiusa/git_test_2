/*
 * Copyright (C) 2016 Matthias Kirchhart
 *
 * This file is part of vorticus.
 *
 * vorticus is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3, or (at your option) any later
 * version.
 *
 * vorticus is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * vorticus; see the file COPYING.  If not see http://www.gnu.org/licenses.
 */
#include "math/lu.h"
#include <lapacke.h>

namespace
{

void lu_1 ( double *A, lapack_int *P );
void lu_2 ( double *A, lapack_int *P );
void lu_3 ( double *A, lapack_int *P );
void lu_4 ( double *A, lapack_int *P );
void lu_5 ( double *A, lapack_int *P );
void lu_6 ( double *A, lapack_int *P );
void lu_7 ( double *A, lapack_int *P );
void lu_8 ( double *A, lapack_int *P );
void lu_9 ( double *A, lapack_int *P );
void lu_10( double *A, lapack_int *P );
void lu_11( double *A, lapack_int *P );
void lu_12( double *A, lapack_int *P );
void lu_13( double *A, lapack_int *P );
void lu_14( double *A, lapack_int *P );
void lu_15( double *A, lapack_int *P );
void lu_16( double *A, lapack_int *P );

void lu_solve_1 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_2 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_3 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_4 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_5 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_6 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_7 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_8 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_9 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_10( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_11( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_12( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_13( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_14( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_15( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_16( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );

void lu_solve_t_1 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_2 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_3 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_4 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_5 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_6 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_7 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_8 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_9 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_10( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_11( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_12( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_13( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_14( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_15( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );
void lu_solve_t_16( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b );

}


namespace math
{

void lu( lapack_int n, double *A, lapack_int *P )
{
    switch ( n )
    {
    case 1: lu_1(A,P); break;
    case 2: lu_2(A,P); break;
    case 3: lu_3(A,P); break;
    case 4: lu_4(A,P); break;
    case 5: lu_5(A,P); break;
    case 6: lu_6(A,P); break;
    case 7: lu_7(A,P); break;
    case 8: lu_8(A,P); break;
    case 9: lu_9(A,P); break;
    case 10: lu_10(A,P); break;
    case 11: lu_11(A,P); break;
    case 12: lu_12(A,P); break;
    case 13: lu_13(A,P); break;
    case 14: lu_14(A,P); break;
    case 15: lu_15(A,P); break;
    case 16: lu_16(A,P); break;
    default: LAPACKE_dgetrf_work( LAPACK_COL_MAJOR, n, n, A, n, P );
    }
}

void lu_solve( lapack_int n, const double *LU, const lapack_int *P, double *b )
{
    switch ( n )
    {
    case 1: lu_solve_1(LU,P,b); break;
    case 2: lu_solve_2(LU,P,b); break;
    case 3: lu_solve_3(LU,P,b); break;
    case 4: lu_solve_4(LU,P,b); break;
    case 5: lu_solve_5(LU,P,b); break;
    case 6: lu_solve_6(LU,P,b); break;
    case 7: lu_solve_7(LU,P,b); break;
    case 8: lu_solve_8(LU,P,b); break;
    case 9: lu_solve_9(LU,P,b); break;
    case 10: lu_solve_10(LU,P,b); break;
    case 11: lu_solve_11(LU,P,b); break;
    case 12: lu_solve_12(LU,P,b); break;
    case 13: lu_solve_13(LU,P,b); break;
    case 14: lu_solve_14(LU,P,b); break;
    case 15: lu_solve_15(LU,P,b); break;
    case 16: lu_solve_16(LU,P,b); break;
    default: LAPACKE_dgetrs_work( LAPACK_COL_MAJOR, 'N', n, 1, LU, n, P, b, n );
    }
}

void lu_solve_t( lapack_int n, const double *LU, const lapack_int *P, double *b )
{
    switch ( n )
    {
    case 1: lu_solve_t_1(LU,P,b); break;
    case 2: lu_solve_t_2(LU,P,b); break;
    case 3: lu_solve_t_3(LU,P,b); break;
    case 4: lu_solve_t_4(LU,P,b); break;
    case 5: lu_solve_t_5(LU,P,b); break;
    case 6: lu_solve_t_6(LU,P,b); break;
    case 7: lu_solve_t_7(LU,P,b); break;
    case 8: lu_solve_t_8(LU,P,b); break;
    case 9: lu_solve_t_9(LU,P,b); break;
    case 10: lu_solve_t_10(LU,P,b); break;
    case 11: lu_solve_t_11(LU,P,b); break;
    case 12: lu_solve_t_12(LU,P,b); break;
    case 13: lu_solve_t_13(LU,P,b); break;
    case 14: lu_solve_t_14(LU,P,b); break;
    case 15: lu_solve_t_15(LU,P,b); break;
    case 16: lu_solve_t_16(LU,P,b); break;
    default: LAPACKE_dgetrs_work( LAPACK_COL_MAJOR, 'T', n, 1, LU, n, P, b, n );
    }
}

}

namespace
{

void lu_1( double *, lapack_int *P )
{
    using std::abs;
    P[0] = 1;
}

void lu_2( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[2], A[i_max+2] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    tmp = A[2];
    A[3] = A[3] - A[1]*tmp;
    P[1] = 2;
}

void lu_3( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[3], A[i_max+3] );
    std::swap( A[6], A[i_max+6] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    tmp = A[3];
    A[4] = A[4] - A[1]*tmp;
    A[5] = A[5] - A[2]*tmp;
    tmp = A[6];
    A[7] = A[7] - A[1]*tmp;
    A[8] = A[8] - A[2]*tmp;
    i_max = 1;
    a_max = abs(A[4]);
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 2; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[4], A[i_max+3] );
    std::swap( A[7], A[i_max+6] );
    P[1] = i_max + 1;
    tmp = A[4];
    A[5] = A[5] / tmp;
    tmp = A[7];
    A[8] = A[8] - A[5]*tmp;
    P[2] = 3;
}

void lu_4( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[4], A[i_max+4] );
    std::swap( A[8], A[i_max+8] );
    std::swap( A[12], A[i_max+12] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    tmp = A[4];
    A[5] = A[5] - A[1]*tmp;
    A[6] = A[6] - A[2]*tmp;
    A[7] = A[7] - A[3]*tmp;
    tmp = A[8];
    A[9] = A[9] - A[1]*tmp;
    A[10] = A[10] - A[2]*tmp;
    A[11] = A[11] - A[3]*tmp;
    tmp = A[12];
    A[13] = A[13] - A[1]*tmp;
    A[14] = A[14] - A[2]*tmp;
    A[15] = A[15] - A[3]*tmp;
    i_max = 1;
    a_max = abs(A[5]);
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 2; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 3; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[5], A[i_max+4] );
    std::swap( A[9], A[i_max+8] );
    std::swap( A[13], A[i_max+12] );
    P[1] = i_max + 1;
    tmp = A[5];
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    tmp = A[9];
    A[10] = A[10] - A[6]*tmp;
    A[11] = A[11] - A[7]*tmp;
    tmp = A[13];
    A[14] = A[14] - A[6]*tmp;
    A[15] = A[15] - A[7]*tmp;
    i_max = 2;
    a_max = abs(A[10]);
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 3; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[6], A[i_max+4] );
    std::swap( A[10], A[i_max+8] );
    std::swap( A[14], A[i_max+12] );
    P[2] = i_max + 1;
    tmp = A[10];
    A[11] = A[11] / tmp;
    tmp = A[14];
    A[15] = A[15] - A[11]*tmp;
    P[3] = 4;
}

void lu_5( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[5], A[i_max+5] );
    std::swap( A[10], A[i_max+10] );
    std::swap( A[15], A[i_max+15] );
    std::swap( A[20], A[i_max+20] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    tmp = A[5];
    A[6] = A[6] - A[1]*tmp;
    A[7] = A[7] - A[2]*tmp;
    A[8] = A[8] - A[3]*tmp;
    A[9] = A[9] - A[4]*tmp;
    tmp = A[10];
    A[11] = A[11] - A[1]*tmp;
    A[12] = A[12] - A[2]*tmp;
    A[13] = A[13] - A[3]*tmp;
    A[14] = A[14] - A[4]*tmp;
    tmp = A[15];
    A[16] = A[16] - A[1]*tmp;
    A[17] = A[17] - A[2]*tmp;
    A[18] = A[18] - A[3]*tmp;
    A[19] = A[19] - A[4]*tmp;
    tmp = A[20];
    A[21] = A[21] - A[1]*tmp;
    A[22] = A[22] - A[2]*tmp;
    A[23] = A[23] - A[3]*tmp;
    A[24] = A[24] - A[4]*tmp;
    i_max = 1;
    a_max = abs(A[6]);
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 2; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 3; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 4; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[6], A[i_max+5] );
    std::swap( A[11], A[i_max+10] );
    std::swap( A[16], A[i_max+15] );
    std::swap( A[21], A[i_max+20] );
    P[1] = i_max + 1;
    tmp = A[6];
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    tmp = A[11];
    A[12] = A[12] - A[7]*tmp;
    A[13] = A[13] - A[8]*tmp;
    A[14] = A[14] - A[9]*tmp;
    tmp = A[16];
    A[17] = A[17] - A[7]*tmp;
    A[18] = A[18] - A[8]*tmp;
    A[19] = A[19] - A[9]*tmp;
    tmp = A[21];
    A[22] = A[22] - A[7]*tmp;
    A[23] = A[23] - A[8]*tmp;
    A[24] = A[24] - A[9]*tmp;
    i_max = 2;
    a_max = abs(A[12]);
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 3; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 4; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[7], A[i_max+5] );
    std::swap( A[12], A[i_max+10] );
    std::swap( A[17], A[i_max+15] );
    std::swap( A[22], A[i_max+20] );
    P[2] = i_max + 1;
    tmp = A[12];
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    tmp = A[17];
    A[18] = A[18] - A[13]*tmp;
    A[19] = A[19] - A[14]*tmp;
    tmp = A[22];
    A[23] = A[23] - A[13]*tmp;
    A[24] = A[24] - A[14]*tmp;
    i_max = 3;
    a_max = abs(A[18]);
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 4; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[8], A[i_max+5] );
    std::swap( A[13], A[i_max+10] );
    std::swap( A[18], A[i_max+15] );
    std::swap( A[23], A[i_max+20] );
    P[3] = i_max + 1;
    tmp = A[18];
    A[19] = A[19] / tmp;
    tmp = A[23];
    A[24] = A[24] - A[19]*tmp;
    P[4] = 5;
}

void lu_6( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[6], A[i_max+6] );
    std::swap( A[12], A[i_max+12] );
    std::swap( A[18], A[i_max+18] );
    std::swap( A[24], A[i_max+24] );
    std::swap( A[30], A[i_max+30] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    tmp = A[6];
    A[7] = A[7] - A[1]*tmp;
    A[8] = A[8] - A[2]*tmp;
    A[9] = A[9] - A[3]*tmp;
    A[10] = A[10] - A[4]*tmp;
    A[11] = A[11] - A[5]*tmp;
    tmp = A[12];
    A[13] = A[13] - A[1]*tmp;
    A[14] = A[14] - A[2]*tmp;
    A[15] = A[15] - A[3]*tmp;
    A[16] = A[16] - A[4]*tmp;
    A[17] = A[17] - A[5]*tmp;
    tmp = A[18];
    A[19] = A[19] - A[1]*tmp;
    A[20] = A[20] - A[2]*tmp;
    A[21] = A[21] - A[3]*tmp;
    A[22] = A[22] - A[4]*tmp;
    A[23] = A[23] - A[5]*tmp;
    tmp = A[24];
    A[25] = A[25] - A[1]*tmp;
    A[26] = A[26] - A[2]*tmp;
    A[27] = A[27] - A[3]*tmp;
    A[28] = A[28] - A[4]*tmp;
    A[29] = A[29] - A[5]*tmp;
    tmp = A[30];
    A[31] = A[31] - A[1]*tmp;
    A[32] = A[32] - A[2]*tmp;
    A[33] = A[33] - A[3]*tmp;
    A[34] = A[34] - A[4]*tmp;
    A[35] = A[35] - A[5]*tmp;
    i_max = 1;
    a_max = abs(A[7]);
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 2; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 3; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 4; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 5; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[7], A[i_max+6] );
    std::swap( A[13], A[i_max+12] );
    std::swap( A[19], A[i_max+18] );
    std::swap( A[25], A[i_max+24] );
    std::swap( A[31], A[i_max+30] );
    P[1] = i_max + 1;
    tmp = A[7];
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    tmp = A[13];
    A[14] = A[14] - A[8]*tmp;
    A[15] = A[15] - A[9]*tmp;
    A[16] = A[16] - A[10]*tmp;
    A[17] = A[17] - A[11]*tmp;
    tmp = A[19];
    A[20] = A[20] - A[8]*tmp;
    A[21] = A[21] - A[9]*tmp;
    A[22] = A[22] - A[10]*tmp;
    A[23] = A[23] - A[11]*tmp;
    tmp = A[25];
    A[26] = A[26] - A[8]*tmp;
    A[27] = A[27] - A[9]*tmp;
    A[28] = A[28] - A[10]*tmp;
    A[29] = A[29] - A[11]*tmp;
    tmp = A[31];
    A[32] = A[32] - A[8]*tmp;
    A[33] = A[33] - A[9]*tmp;
    A[34] = A[34] - A[10]*tmp;
    A[35] = A[35] - A[11]*tmp;
    i_max = 2;
    a_max = abs(A[14]);
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 3; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 4; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 5; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[8], A[i_max+6] );
    std::swap( A[14], A[i_max+12] );
    std::swap( A[20], A[i_max+18] );
    std::swap( A[26], A[i_max+24] );
    std::swap( A[32], A[i_max+30] );
    P[2] = i_max + 1;
    tmp = A[14];
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    tmp = A[20];
    A[21] = A[21] - A[15]*tmp;
    A[22] = A[22] - A[16]*tmp;
    A[23] = A[23] - A[17]*tmp;
    tmp = A[26];
    A[27] = A[27] - A[15]*tmp;
    A[28] = A[28] - A[16]*tmp;
    A[29] = A[29] - A[17]*tmp;
    tmp = A[32];
    A[33] = A[33] - A[15]*tmp;
    A[34] = A[34] - A[16]*tmp;
    A[35] = A[35] - A[17]*tmp;
    i_max = 3;
    a_max = abs(A[21]);
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 4; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 5; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[9], A[i_max+6] );
    std::swap( A[15], A[i_max+12] );
    std::swap( A[21], A[i_max+18] );
    std::swap( A[27], A[i_max+24] );
    std::swap( A[33], A[i_max+30] );
    P[3] = i_max + 1;
    tmp = A[21];
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    tmp = A[27];
    A[28] = A[28] - A[22]*tmp;
    A[29] = A[29] - A[23]*tmp;
    tmp = A[33];
    A[34] = A[34] - A[22]*tmp;
    A[35] = A[35] - A[23]*tmp;
    i_max = 4;
    a_max = abs(A[28]);
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 5; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[10], A[i_max+6] );
    std::swap( A[16], A[i_max+12] );
    std::swap( A[22], A[i_max+18] );
    std::swap( A[28], A[i_max+24] );
    std::swap( A[34], A[i_max+30] );
    P[4] = i_max + 1;
    tmp = A[28];
    A[29] = A[29] / tmp;
    tmp = A[34];
    A[35] = A[35] - A[29]*tmp;
    P[5] = 6;
}

void lu_7( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[7], A[i_max+7] );
    std::swap( A[14], A[i_max+14] );
    std::swap( A[21], A[i_max+21] );
    std::swap( A[28], A[i_max+28] );
    std::swap( A[35], A[i_max+35] );
    std::swap( A[42], A[i_max+42] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    tmp = A[7];
    A[8] = A[8] - A[1]*tmp;
    A[9] = A[9] - A[2]*tmp;
    A[10] = A[10] - A[3]*tmp;
    A[11] = A[11] - A[4]*tmp;
    A[12] = A[12] - A[5]*tmp;
    A[13] = A[13] - A[6]*tmp;
    tmp = A[14];
    A[15] = A[15] - A[1]*tmp;
    A[16] = A[16] - A[2]*tmp;
    A[17] = A[17] - A[3]*tmp;
    A[18] = A[18] - A[4]*tmp;
    A[19] = A[19] - A[5]*tmp;
    A[20] = A[20] - A[6]*tmp;
    tmp = A[21];
    A[22] = A[22] - A[1]*tmp;
    A[23] = A[23] - A[2]*tmp;
    A[24] = A[24] - A[3]*tmp;
    A[25] = A[25] - A[4]*tmp;
    A[26] = A[26] - A[5]*tmp;
    A[27] = A[27] - A[6]*tmp;
    tmp = A[28];
    A[29] = A[29] - A[1]*tmp;
    A[30] = A[30] - A[2]*tmp;
    A[31] = A[31] - A[3]*tmp;
    A[32] = A[32] - A[4]*tmp;
    A[33] = A[33] - A[5]*tmp;
    A[34] = A[34] - A[6]*tmp;
    tmp = A[35];
    A[36] = A[36] - A[1]*tmp;
    A[37] = A[37] - A[2]*tmp;
    A[38] = A[38] - A[3]*tmp;
    A[39] = A[39] - A[4]*tmp;
    A[40] = A[40] - A[5]*tmp;
    A[41] = A[41] - A[6]*tmp;
    tmp = A[42];
    A[43] = A[43] - A[1]*tmp;
    A[44] = A[44] - A[2]*tmp;
    A[45] = A[45] - A[3]*tmp;
    A[46] = A[46] - A[4]*tmp;
    A[47] = A[47] - A[5]*tmp;
    A[48] = A[48] - A[6]*tmp;
    i_max = 1;
    a_max = abs(A[8]);
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 2; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 3; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 4; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 5; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 6; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[8], A[i_max+7] );
    std::swap( A[15], A[i_max+14] );
    std::swap( A[22], A[i_max+21] );
    std::swap( A[29], A[i_max+28] );
    std::swap( A[36], A[i_max+35] );
    std::swap( A[43], A[i_max+42] );
    P[1] = i_max + 1;
    tmp = A[8];
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    tmp = A[15];
    A[16] = A[16] - A[9]*tmp;
    A[17] = A[17] - A[10]*tmp;
    A[18] = A[18] - A[11]*tmp;
    A[19] = A[19] - A[12]*tmp;
    A[20] = A[20] - A[13]*tmp;
    tmp = A[22];
    A[23] = A[23] - A[9]*tmp;
    A[24] = A[24] - A[10]*tmp;
    A[25] = A[25] - A[11]*tmp;
    A[26] = A[26] - A[12]*tmp;
    A[27] = A[27] - A[13]*tmp;
    tmp = A[29];
    A[30] = A[30] - A[9]*tmp;
    A[31] = A[31] - A[10]*tmp;
    A[32] = A[32] - A[11]*tmp;
    A[33] = A[33] - A[12]*tmp;
    A[34] = A[34] - A[13]*tmp;
    tmp = A[36];
    A[37] = A[37] - A[9]*tmp;
    A[38] = A[38] - A[10]*tmp;
    A[39] = A[39] - A[11]*tmp;
    A[40] = A[40] - A[12]*tmp;
    A[41] = A[41] - A[13]*tmp;
    tmp = A[43];
    A[44] = A[44] - A[9]*tmp;
    A[45] = A[45] - A[10]*tmp;
    A[46] = A[46] - A[11]*tmp;
    A[47] = A[47] - A[12]*tmp;
    A[48] = A[48] - A[13]*tmp;
    i_max = 2;
    a_max = abs(A[16]);
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 3; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 4; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 5; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 6; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[9], A[i_max+7] );
    std::swap( A[16], A[i_max+14] );
    std::swap( A[23], A[i_max+21] );
    std::swap( A[30], A[i_max+28] );
    std::swap( A[37], A[i_max+35] );
    std::swap( A[44], A[i_max+42] );
    P[2] = i_max + 1;
    tmp = A[16];
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    tmp = A[23];
    A[24] = A[24] - A[17]*tmp;
    A[25] = A[25] - A[18]*tmp;
    A[26] = A[26] - A[19]*tmp;
    A[27] = A[27] - A[20]*tmp;
    tmp = A[30];
    A[31] = A[31] - A[17]*tmp;
    A[32] = A[32] - A[18]*tmp;
    A[33] = A[33] - A[19]*tmp;
    A[34] = A[34] - A[20]*tmp;
    tmp = A[37];
    A[38] = A[38] - A[17]*tmp;
    A[39] = A[39] - A[18]*tmp;
    A[40] = A[40] - A[19]*tmp;
    A[41] = A[41] - A[20]*tmp;
    tmp = A[44];
    A[45] = A[45] - A[17]*tmp;
    A[46] = A[46] - A[18]*tmp;
    A[47] = A[47] - A[19]*tmp;
    A[48] = A[48] - A[20]*tmp;
    i_max = 3;
    a_max = abs(A[24]);
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 4; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 5; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 6; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[10], A[i_max+7] );
    std::swap( A[17], A[i_max+14] );
    std::swap( A[24], A[i_max+21] );
    std::swap( A[31], A[i_max+28] );
    std::swap( A[38], A[i_max+35] );
    std::swap( A[45], A[i_max+42] );
    P[3] = i_max + 1;
    tmp = A[24];
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    tmp = A[31];
    A[32] = A[32] - A[25]*tmp;
    A[33] = A[33] - A[26]*tmp;
    A[34] = A[34] - A[27]*tmp;
    tmp = A[38];
    A[39] = A[39] - A[25]*tmp;
    A[40] = A[40] - A[26]*tmp;
    A[41] = A[41] - A[27]*tmp;
    tmp = A[45];
    A[46] = A[46] - A[25]*tmp;
    A[47] = A[47] - A[26]*tmp;
    A[48] = A[48] - A[27]*tmp;
    i_max = 4;
    a_max = abs(A[32]);
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 5; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 6; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[11], A[i_max+7] );
    std::swap( A[18], A[i_max+14] );
    std::swap( A[25], A[i_max+21] );
    std::swap( A[32], A[i_max+28] );
    std::swap( A[39], A[i_max+35] );
    std::swap( A[46], A[i_max+42] );
    P[4] = i_max + 1;
    tmp = A[32];
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    tmp = A[39];
    A[40] = A[40] - A[33]*tmp;
    A[41] = A[41] - A[34]*tmp;
    tmp = A[46];
    A[47] = A[47] - A[33]*tmp;
    A[48] = A[48] - A[34]*tmp;
    i_max = 5;
    a_max = abs(A[40]);
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 6; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[12], A[i_max+7] );
    std::swap( A[19], A[i_max+14] );
    std::swap( A[26], A[i_max+21] );
    std::swap( A[33], A[i_max+28] );
    std::swap( A[40], A[i_max+35] );
    std::swap( A[47], A[i_max+42] );
    P[5] = i_max + 1;
    tmp = A[40];
    A[41] = A[41] / tmp;
    tmp = A[47];
    A[48] = A[48] - A[41]*tmp;
    P[6] = 7;
}

void lu_8( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[8], A[i_max+8] );
    std::swap( A[16], A[i_max+16] );
    std::swap( A[24], A[i_max+24] );
    std::swap( A[32], A[i_max+32] );
    std::swap( A[40], A[i_max+40] );
    std::swap( A[48], A[i_max+48] );
    std::swap( A[56], A[i_max+56] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    tmp = A[8];
    A[9] = A[9] - A[1]*tmp;
    A[10] = A[10] - A[2]*tmp;
    A[11] = A[11] - A[3]*tmp;
    A[12] = A[12] - A[4]*tmp;
    A[13] = A[13] - A[5]*tmp;
    A[14] = A[14] - A[6]*tmp;
    A[15] = A[15] - A[7]*tmp;
    tmp = A[16];
    A[17] = A[17] - A[1]*tmp;
    A[18] = A[18] - A[2]*tmp;
    A[19] = A[19] - A[3]*tmp;
    A[20] = A[20] - A[4]*tmp;
    A[21] = A[21] - A[5]*tmp;
    A[22] = A[22] - A[6]*tmp;
    A[23] = A[23] - A[7]*tmp;
    tmp = A[24];
    A[25] = A[25] - A[1]*tmp;
    A[26] = A[26] - A[2]*tmp;
    A[27] = A[27] - A[3]*tmp;
    A[28] = A[28] - A[4]*tmp;
    A[29] = A[29] - A[5]*tmp;
    A[30] = A[30] - A[6]*tmp;
    A[31] = A[31] - A[7]*tmp;
    tmp = A[32];
    A[33] = A[33] - A[1]*tmp;
    A[34] = A[34] - A[2]*tmp;
    A[35] = A[35] - A[3]*tmp;
    A[36] = A[36] - A[4]*tmp;
    A[37] = A[37] - A[5]*tmp;
    A[38] = A[38] - A[6]*tmp;
    A[39] = A[39] - A[7]*tmp;
    tmp = A[40];
    A[41] = A[41] - A[1]*tmp;
    A[42] = A[42] - A[2]*tmp;
    A[43] = A[43] - A[3]*tmp;
    A[44] = A[44] - A[4]*tmp;
    A[45] = A[45] - A[5]*tmp;
    A[46] = A[46] - A[6]*tmp;
    A[47] = A[47] - A[7]*tmp;
    tmp = A[48];
    A[49] = A[49] - A[1]*tmp;
    A[50] = A[50] - A[2]*tmp;
    A[51] = A[51] - A[3]*tmp;
    A[52] = A[52] - A[4]*tmp;
    A[53] = A[53] - A[5]*tmp;
    A[54] = A[54] - A[6]*tmp;
    A[55] = A[55] - A[7]*tmp;
    tmp = A[56];
    A[57] = A[57] - A[1]*tmp;
    A[58] = A[58] - A[2]*tmp;
    A[59] = A[59] - A[3]*tmp;
    A[60] = A[60] - A[4]*tmp;
    A[61] = A[61] - A[5]*tmp;
    A[62] = A[62] - A[6]*tmp;
    A[63] = A[63] - A[7]*tmp;
    i_max = 1;
    a_max = abs(A[9]);
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 2; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 3; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 4; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 5; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 6; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 7; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[9], A[i_max+8] );
    std::swap( A[17], A[i_max+16] );
    std::swap( A[25], A[i_max+24] );
    std::swap( A[33], A[i_max+32] );
    std::swap( A[41], A[i_max+40] );
    std::swap( A[49], A[i_max+48] );
    std::swap( A[57], A[i_max+56] );
    P[1] = i_max + 1;
    tmp = A[9];
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    tmp = A[17];
    A[18] = A[18] - A[10]*tmp;
    A[19] = A[19] - A[11]*tmp;
    A[20] = A[20] - A[12]*tmp;
    A[21] = A[21] - A[13]*tmp;
    A[22] = A[22] - A[14]*tmp;
    A[23] = A[23] - A[15]*tmp;
    tmp = A[25];
    A[26] = A[26] - A[10]*tmp;
    A[27] = A[27] - A[11]*tmp;
    A[28] = A[28] - A[12]*tmp;
    A[29] = A[29] - A[13]*tmp;
    A[30] = A[30] - A[14]*tmp;
    A[31] = A[31] - A[15]*tmp;
    tmp = A[33];
    A[34] = A[34] - A[10]*tmp;
    A[35] = A[35] - A[11]*tmp;
    A[36] = A[36] - A[12]*tmp;
    A[37] = A[37] - A[13]*tmp;
    A[38] = A[38] - A[14]*tmp;
    A[39] = A[39] - A[15]*tmp;
    tmp = A[41];
    A[42] = A[42] - A[10]*tmp;
    A[43] = A[43] - A[11]*tmp;
    A[44] = A[44] - A[12]*tmp;
    A[45] = A[45] - A[13]*tmp;
    A[46] = A[46] - A[14]*tmp;
    A[47] = A[47] - A[15]*tmp;
    tmp = A[49];
    A[50] = A[50] - A[10]*tmp;
    A[51] = A[51] - A[11]*tmp;
    A[52] = A[52] - A[12]*tmp;
    A[53] = A[53] - A[13]*tmp;
    A[54] = A[54] - A[14]*tmp;
    A[55] = A[55] - A[15]*tmp;
    tmp = A[57];
    A[58] = A[58] - A[10]*tmp;
    A[59] = A[59] - A[11]*tmp;
    A[60] = A[60] - A[12]*tmp;
    A[61] = A[61] - A[13]*tmp;
    A[62] = A[62] - A[14]*tmp;
    A[63] = A[63] - A[15]*tmp;
    i_max = 2;
    a_max = abs(A[18]);
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 3; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 4; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 5; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 6; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 7; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[10], A[i_max+8] );
    std::swap( A[18], A[i_max+16] );
    std::swap( A[26], A[i_max+24] );
    std::swap( A[34], A[i_max+32] );
    std::swap( A[42], A[i_max+40] );
    std::swap( A[50], A[i_max+48] );
    std::swap( A[58], A[i_max+56] );
    P[2] = i_max + 1;
    tmp = A[18];
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    tmp = A[26];
    A[27] = A[27] - A[19]*tmp;
    A[28] = A[28] - A[20]*tmp;
    A[29] = A[29] - A[21]*tmp;
    A[30] = A[30] - A[22]*tmp;
    A[31] = A[31] - A[23]*tmp;
    tmp = A[34];
    A[35] = A[35] - A[19]*tmp;
    A[36] = A[36] - A[20]*tmp;
    A[37] = A[37] - A[21]*tmp;
    A[38] = A[38] - A[22]*tmp;
    A[39] = A[39] - A[23]*tmp;
    tmp = A[42];
    A[43] = A[43] - A[19]*tmp;
    A[44] = A[44] - A[20]*tmp;
    A[45] = A[45] - A[21]*tmp;
    A[46] = A[46] - A[22]*tmp;
    A[47] = A[47] - A[23]*tmp;
    tmp = A[50];
    A[51] = A[51] - A[19]*tmp;
    A[52] = A[52] - A[20]*tmp;
    A[53] = A[53] - A[21]*tmp;
    A[54] = A[54] - A[22]*tmp;
    A[55] = A[55] - A[23]*tmp;
    tmp = A[58];
    A[59] = A[59] - A[19]*tmp;
    A[60] = A[60] - A[20]*tmp;
    A[61] = A[61] - A[21]*tmp;
    A[62] = A[62] - A[22]*tmp;
    A[63] = A[63] - A[23]*tmp;
    i_max = 3;
    a_max = abs(A[27]);
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 4; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 5; }
    if ( a_max < abs( A[30] ) ) { a_max = abs(A[30]); i_max = 6; }
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 7; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[11], A[i_max+8] );
    std::swap( A[19], A[i_max+16] );
    std::swap( A[27], A[i_max+24] );
    std::swap( A[35], A[i_max+32] );
    std::swap( A[43], A[i_max+40] );
    std::swap( A[51], A[i_max+48] );
    std::swap( A[59], A[i_max+56] );
    P[3] = i_max + 1;
    tmp = A[27];
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    A[30] = A[30] / tmp;
    A[31] = A[31] / tmp;
    tmp = A[35];
    A[36] = A[36] - A[28]*tmp;
    A[37] = A[37] - A[29]*tmp;
    A[38] = A[38] - A[30]*tmp;
    A[39] = A[39] - A[31]*tmp;
    tmp = A[43];
    A[44] = A[44] - A[28]*tmp;
    A[45] = A[45] - A[29]*tmp;
    A[46] = A[46] - A[30]*tmp;
    A[47] = A[47] - A[31]*tmp;
    tmp = A[51];
    A[52] = A[52] - A[28]*tmp;
    A[53] = A[53] - A[29]*tmp;
    A[54] = A[54] - A[30]*tmp;
    A[55] = A[55] - A[31]*tmp;
    tmp = A[59];
    A[60] = A[60] - A[28]*tmp;
    A[61] = A[61] - A[29]*tmp;
    A[62] = A[62] - A[30]*tmp;
    A[63] = A[63] - A[31]*tmp;
    i_max = 4;
    a_max = abs(A[36]);
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 5; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 6; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 7; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[12], A[i_max+8] );
    std::swap( A[20], A[i_max+16] );
    std::swap( A[28], A[i_max+24] );
    std::swap( A[36], A[i_max+32] );
    std::swap( A[44], A[i_max+40] );
    std::swap( A[52], A[i_max+48] );
    std::swap( A[60], A[i_max+56] );
    P[4] = i_max + 1;
    tmp = A[36];
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    tmp = A[44];
    A[45] = A[45] - A[37]*tmp;
    A[46] = A[46] - A[38]*tmp;
    A[47] = A[47] - A[39]*tmp;
    tmp = A[52];
    A[53] = A[53] - A[37]*tmp;
    A[54] = A[54] - A[38]*tmp;
    A[55] = A[55] - A[39]*tmp;
    tmp = A[60];
    A[61] = A[61] - A[37]*tmp;
    A[62] = A[62] - A[38]*tmp;
    A[63] = A[63] - A[39]*tmp;
    i_max = 5;
    a_max = abs(A[45]);
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 6; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 7; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[13], A[i_max+8] );
    std::swap( A[21], A[i_max+16] );
    std::swap( A[29], A[i_max+24] );
    std::swap( A[37], A[i_max+32] );
    std::swap( A[45], A[i_max+40] );
    std::swap( A[53], A[i_max+48] );
    std::swap( A[61], A[i_max+56] );
    P[5] = i_max + 1;
    tmp = A[45];
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    tmp = A[53];
    A[54] = A[54] - A[46]*tmp;
    A[55] = A[55] - A[47]*tmp;
    tmp = A[61];
    A[62] = A[62] - A[46]*tmp;
    A[63] = A[63] - A[47]*tmp;
    i_max = 6;
    a_max = abs(A[54]);
    if ( a_max < abs( A[55] ) ) { a_max = abs(A[55]); i_max = 7; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[14], A[i_max+8] );
    std::swap( A[22], A[i_max+16] );
    std::swap( A[30], A[i_max+24] );
    std::swap( A[38], A[i_max+32] );
    std::swap( A[46], A[i_max+40] );
    std::swap( A[54], A[i_max+48] );
    std::swap( A[62], A[i_max+56] );
    P[6] = i_max + 1;
    tmp = A[54];
    A[55] = A[55] / tmp;
    tmp = A[62];
    A[63] = A[63] - A[55]*tmp;
    P[7] = 8;
}

void lu_9( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[9], A[i_max+9] );
    std::swap( A[18], A[i_max+18] );
    std::swap( A[27], A[i_max+27] );
    std::swap( A[36], A[i_max+36] );
    std::swap( A[45], A[i_max+45] );
    std::swap( A[54], A[i_max+54] );
    std::swap( A[63], A[i_max+63] );
    std::swap( A[72], A[i_max+72] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    tmp = A[9];
    A[10] = A[10] - A[1]*tmp;
    A[11] = A[11] - A[2]*tmp;
    A[12] = A[12] - A[3]*tmp;
    A[13] = A[13] - A[4]*tmp;
    A[14] = A[14] - A[5]*tmp;
    A[15] = A[15] - A[6]*tmp;
    A[16] = A[16] - A[7]*tmp;
    A[17] = A[17] - A[8]*tmp;
    tmp = A[18];
    A[19] = A[19] - A[1]*tmp;
    A[20] = A[20] - A[2]*tmp;
    A[21] = A[21] - A[3]*tmp;
    A[22] = A[22] - A[4]*tmp;
    A[23] = A[23] - A[5]*tmp;
    A[24] = A[24] - A[6]*tmp;
    A[25] = A[25] - A[7]*tmp;
    A[26] = A[26] - A[8]*tmp;
    tmp = A[27];
    A[28] = A[28] - A[1]*tmp;
    A[29] = A[29] - A[2]*tmp;
    A[30] = A[30] - A[3]*tmp;
    A[31] = A[31] - A[4]*tmp;
    A[32] = A[32] - A[5]*tmp;
    A[33] = A[33] - A[6]*tmp;
    A[34] = A[34] - A[7]*tmp;
    A[35] = A[35] - A[8]*tmp;
    tmp = A[36];
    A[37] = A[37] - A[1]*tmp;
    A[38] = A[38] - A[2]*tmp;
    A[39] = A[39] - A[3]*tmp;
    A[40] = A[40] - A[4]*tmp;
    A[41] = A[41] - A[5]*tmp;
    A[42] = A[42] - A[6]*tmp;
    A[43] = A[43] - A[7]*tmp;
    A[44] = A[44] - A[8]*tmp;
    tmp = A[45];
    A[46] = A[46] - A[1]*tmp;
    A[47] = A[47] - A[2]*tmp;
    A[48] = A[48] - A[3]*tmp;
    A[49] = A[49] - A[4]*tmp;
    A[50] = A[50] - A[5]*tmp;
    A[51] = A[51] - A[6]*tmp;
    A[52] = A[52] - A[7]*tmp;
    A[53] = A[53] - A[8]*tmp;
    tmp = A[54];
    A[55] = A[55] - A[1]*tmp;
    A[56] = A[56] - A[2]*tmp;
    A[57] = A[57] - A[3]*tmp;
    A[58] = A[58] - A[4]*tmp;
    A[59] = A[59] - A[5]*tmp;
    A[60] = A[60] - A[6]*tmp;
    A[61] = A[61] - A[7]*tmp;
    A[62] = A[62] - A[8]*tmp;
    tmp = A[63];
    A[64] = A[64] - A[1]*tmp;
    A[65] = A[65] - A[2]*tmp;
    A[66] = A[66] - A[3]*tmp;
    A[67] = A[67] - A[4]*tmp;
    A[68] = A[68] - A[5]*tmp;
    A[69] = A[69] - A[6]*tmp;
    A[70] = A[70] - A[7]*tmp;
    A[71] = A[71] - A[8]*tmp;
    tmp = A[72];
    A[73] = A[73] - A[1]*tmp;
    A[74] = A[74] - A[2]*tmp;
    A[75] = A[75] - A[3]*tmp;
    A[76] = A[76] - A[4]*tmp;
    A[77] = A[77] - A[5]*tmp;
    A[78] = A[78] - A[6]*tmp;
    A[79] = A[79] - A[7]*tmp;
    A[80] = A[80] - A[8]*tmp;
    i_max = 1;
    a_max = abs(A[10]);
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 2; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 3; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 4; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 5; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 6; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 7; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 8; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[10], A[i_max+9] );
    std::swap( A[19], A[i_max+18] );
    std::swap( A[28], A[i_max+27] );
    std::swap( A[37], A[i_max+36] );
    std::swap( A[46], A[i_max+45] );
    std::swap( A[55], A[i_max+54] );
    std::swap( A[64], A[i_max+63] );
    std::swap( A[73], A[i_max+72] );
    P[1] = i_max + 1;
    tmp = A[10];
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    tmp = A[19];
    A[20] = A[20] - A[11]*tmp;
    A[21] = A[21] - A[12]*tmp;
    A[22] = A[22] - A[13]*tmp;
    A[23] = A[23] - A[14]*tmp;
    A[24] = A[24] - A[15]*tmp;
    A[25] = A[25] - A[16]*tmp;
    A[26] = A[26] - A[17]*tmp;
    tmp = A[28];
    A[29] = A[29] - A[11]*tmp;
    A[30] = A[30] - A[12]*tmp;
    A[31] = A[31] - A[13]*tmp;
    A[32] = A[32] - A[14]*tmp;
    A[33] = A[33] - A[15]*tmp;
    A[34] = A[34] - A[16]*tmp;
    A[35] = A[35] - A[17]*tmp;
    tmp = A[37];
    A[38] = A[38] - A[11]*tmp;
    A[39] = A[39] - A[12]*tmp;
    A[40] = A[40] - A[13]*tmp;
    A[41] = A[41] - A[14]*tmp;
    A[42] = A[42] - A[15]*tmp;
    A[43] = A[43] - A[16]*tmp;
    A[44] = A[44] - A[17]*tmp;
    tmp = A[46];
    A[47] = A[47] - A[11]*tmp;
    A[48] = A[48] - A[12]*tmp;
    A[49] = A[49] - A[13]*tmp;
    A[50] = A[50] - A[14]*tmp;
    A[51] = A[51] - A[15]*tmp;
    A[52] = A[52] - A[16]*tmp;
    A[53] = A[53] - A[17]*tmp;
    tmp = A[55];
    A[56] = A[56] - A[11]*tmp;
    A[57] = A[57] - A[12]*tmp;
    A[58] = A[58] - A[13]*tmp;
    A[59] = A[59] - A[14]*tmp;
    A[60] = A[60] - A[15]*tmp;
    A[61] = A[61] - A[16]*tmp;
    A[62] = A[62] - A[17]*tmp;
    tmp = A[64];
    A[65] = A[65] - A[11]*tmp;
    A[66] = A[66] - A[12]*tmp;
    A[67] = A[67] - A[13]*tmp;
    A[68] = A[68] - A[14]*tmp;
    A[69] = A[69] - A[15]*tmp;
    A[70] = A[70] - A[16]*tmp;
    A[71] = A[71] - A[17]*tmp;
    tmp = A[73];
    A[74] = A[74] - A[11]*tmp;
    A[75] = A[75] - A[12]*tmp;
    A[76] = A[76] - A[13]*tmp;
    A[77] = A[77] - A[14]*tmp;
    A[78] = A[78] - A[15]*tmp;
    A[79] = A[79] - A[16]*tmp;
    A[80] = A[80] - A[17]*tmp;
    i_max = 2;
    a_max = abs(A[20]);
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 3; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 4; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 5; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 6; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 7; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 8; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[11], A[i_max+9] );
    std::swap( A[20], A[i_max+18] );
    std::swap( A[29], A[i_max+27] );
    std::swap( A[38], A[i_max+36] );
    std::swap( A[47], A[i_max+45] );
    std::swap( A[56], A[i_max+54] );
    std::swap( A[65], A[i_max+63] );
    std::swap( A[74], A[i_max+72] );
    P[2] = i_max + 1;
    tmp = A[20];
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    tmp = A[29];
    A[30] = A[30] - A[21]*tmp;
    A[31] = A[31] - A[22]*tmp;
    A[32] = A[32] - A[23]*tmp;
    A[33] = A[33] - A[24]*tmp;
    A[34] = A[34] - A[25]*tmp;
    A[35] = A[35] - A[26]*tmp;
    tmp = A[38];
    A[39] = A[39] - A[21]*tmp;
    A[40] = A[40] - A[22]*tmp;
    A[41] = A[41] - A[23]*tmp;
    A[42] = A[42] - A[24]*tmp;
    A[43] = A[43] - A[25]*tmp;
    A[44] = A[44] - A[26]*tmp;
    tmp = A[47];
    A[48] = A[48] - A[21]*tmp;
    A[49] = A[49] - A[22]*tmp;
    A[50] = A[50] - A[23]*tmp;
    A[51] = A[51] - A[24]*tmp;
    A[52] = A[52] - A[25]*tmp;
    A[53] = A[53] - A[26]*tmp;
    tmp = A[56];
    A[57] = A[57] - A[21]*tmp;
    A[58] = A[58] - A[22]*tmp;
    A[59] = A[59] - A[23]*tmp;
    A[60] = A[60] - A[24]*tmp;
    A[61] = A[61] - A[25]*tmp;
    A[62] = A[62] - A[26]*tmp;
    tmp = A[65];
    A[66] = A[66] - A[21]*tmp;
    A[67] = A[67] - A[22]*tmp;
    A[68] = A[68] - A[23]*tmp;
    A[69] = A[69] - A[24]*tmp;
    A[70] = A[70] - A[25]*tmp;
    A[71] = A[71] - A[26]*tmp;
    tmp = A[74];
    A[75] = A[75] - A[21]*tmp;
    A[76] = A[76] - A[22]*tmp;
    A[77] = A[77] - A[23]*tmp;
    A[78] = A[78] - A[24]*tmp;
    A[79] = A[79] - A[25]*tmp;
    A[80] = A[80] - A[26]*tmp;
    i_max = 3;
    a_max = abs(A[30]);
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 4; }
    if ( a_max < abs( A[32] ) ) { a_max = abs(A[32]); i_max = 5; }
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 6; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 7; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 8; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[12], A[i_max+9] );
    std::swap( A[21], A[i_max+18] );
    std::swap( A[30], A[i_max+27] );
    std::swap( A[39], A[i_max+36] );
    std::swap( A[48], A[i_max+45] );
    std::swap( A[57], A[i_max+54] );
    std::swap( A[66], A[i_max+63] );
    std::swap( A[75], A[i_max+72] );
    P[3] = i_max + 1;
    tmp = A[30];
    A[31] = A[31] / tmp;
    A[32] = A[32] / tmp;
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    tmp = A[39];
    A[40] = A[40] - A[31]*tmp;
    A[41] = A[41] - A[32]*tmp;
    A[42] = A[42] - A[33]*tmp;
    A[43] = A[43] - A[34]*tmp;
    A[44] = A[44] - A[35]*tmp;
    tmp = A[48];
    A[49] = A[49] - A[31]*tmp;
    A[50] = A[50] - A[32]*tmp;
    A[51] = A[51] - A[33]*tmp;
    A[52] = A[52] - A[34]*tmp;
    A[53] = A[53] - A[35]*tmp;
    tmp = A[57];
    A[58] = A[58] - A[31]*tmp;
    A[59] = A[59] - A[32]*tmp;
    A[60] = A[60] - A[33]*tmp;
    A[61] = A[61] - A[34]*tmp;
    A[62] = A[62] - A[35]*tmp;
    tmp = A[66];
    A[67] = A[67] - A[31]*tmp;
    A[68] = A[68] - A[32]*tmp;
    A[69] = A[69] - A[33]*tmp;
    A[70] = A[70] - A[34]*tmp;
    A[71] = A[71] - A[35]*tmp;
    tmp = A[75];
    A[76] = A[76] - A[31]*tmp;
    A[77] = A[77] - A[32]*tmp;
    A[78] = A[78] - A[33]*tmp;
    A[79] = A[79] - A[34]*tmp;
    A[80] = A[80] - A[35]*tmp;
    i_max = 4;
    a_max = abs(A[40]);
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 5; }
    if ( a_max < abs( A[42] ) ) { a_max = abs(A[42]); i_max = 6; }
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 7; }
    if ( a_max < abs( A[44] ) ) { a_max = abs(A[44]); i_max = 8; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[13], A[i_max+9] );
    std::swap( A[22], A[i_max+18] );
    std::swap( A[31], A[i_max+27] );
    std::swap( A[40], A[i_max+36] );
    std::swap( A[49], A[i_max+45] );
    std::swap( A[58], A[i_max+54] );
    std::swap( A[67], A[i_max+63] );
    std::swap( A[76], A[i_max+72] );
    P[4] = i_max + 1;
    tmp = A[40];
    A[41] = A[41] / tmp;
    A[42] = A[42] / tmp;
    A[43] = A[43] / tmp;
    A[44] = A[44] / tmp;
    tmp = A[49];
    A[50] = A[50] - A[41]*tmp;
    A[51] = A[51] - A[42]*tmp;
    A[52] = A[52] - A[43]*tmp;
    A[53] = A[53] - A[44]*tmp;
    tmp = A[58];
    A[59] = A[59] - A[41]*tmp;
    A[60] = A[60] - A[42]*tmp;
    A[61] = A[61] - A[43]*tmp;
    A[62] = A[62] - A[44]*tmp;
    tmp = A[67];
    A[68] = A[68] - A[41]*tmp;
    A[69] = A[69] - A[42]*tmp;
    A[70] = A[70] - A[43]*tmp;
    A[71] = A[71] - A[44]*tmp;
    tmp = A[76];
    A[77] = A[77] - A[41]*tmp;
    A[78] = A[78] - A[42]*tmp;
    A[79] = A[79] - A[43]*tmp;
    A[80] = A[80] - A[44]*tmp;
    i_max = 5;
    a_max = abs(A[50]);
    if ( a_max < abs( A[51] ) ) { a_max = abs(A[51]); i_max = 6; }
    if ( a_max < abs( A[52] ) ) { a_max = abs(A[52]); i_max = 7; }
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 8; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[14], A[i_max+9] );
    std::swap( A[23], A[i_max+18] );
    std::swap( A[32], A[i_max+27] );
    std::swap( A[41], A[i_max+36] );
    std::swap( A[50], A[i_max+45] );
    std::swap( A[59], A[i_max+54] );
    std::swap( A[68], A[i_max+63] );
    std::swap( A[77], A[i_max+72] );
    P[5] = i_max + 1;
    tmp = A[50];
    A[51] = A[51] / tmp;
    A[52] = A[52] / tmp;
    A[53] = A[53] / tmp;
    tmp = A[59];
    A[60] = A[60] - A[51]*tmp;
    A[61] = A[61] - A[52]*tmp;
    A[62] = A[62] - A[53]*tmp;
    tmp = A[68];
    A[69] = A[69] - A[51]*tmp;
    A[70] = A[70] - A[52]*tmp;
    A[71] = A[71] - A[53]*tmp;
    tmp = A[77];
    A[78] = A[78] - A[51]*tmp;
    A[79] = A[79] - A[52]*tmp;
    A[80] = A[80] - A[53]*tmp;
    i_max = 6;
    a_max = abs(A[60]);
    if ( a_max < abs( A[61] ) ) { a_max = abs(A[61]); i_max = 7; }
    if ( a_max < abs( A[62] ) ) { a_max = abs(A[62]); i_max = 8; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[15], A[i_max+9] );
    std::swap( A[24], A[i_max+18] );
    std::swap( A[33], A[i_max+27] );
    std::swap( A[42], A[i_max+36] );
    std::swap( A[51], A[i_max+45] );
    std::swap( A[60], A[i_max+54] );
    std::swap( A[69], A[i_max+63] );
    std::swap( A[78], A[i_max+72] );
    P[6] = i_max + 1;
    tmp = A[60];
    A[61] = A[61] / tmp;
    A[62] = A[62] / tmp;
    tmp = A[69];
    A[70] = A[70] - A[61]*tmp;
    A[71] = A[71] - A[62]*tmp;
    tmp = A[78];
    A[79] = A[79] - A[61]*tmp;
    A[80] = A[80] - A[62]*tmp;
    i_max = 7;
    a_max = abs(A[70]);
    if ( a_max < abs( A[71] ) ) { a_max = abs(A[71]); i_max = 8; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[16], A[i_max+9] );
    std::swap( A[25], A[i_max+18] );
    std::swap( A[34], A[i_max+27] );
    std::swap( A[43], A[i_max+36] );
    std::swap( A[52], A[i_max+45] );
    std::swap( A[61], A[i_max+54] );
    std::swap( A[70], A[i_max+63] );
    std::swap( A[79], A[i_max+72] );
    P[7] = i_max + 1;
    tmp = A[70];
    A[71] = A[71] / tmp;
    tmp = A[79];
    A[80] = A[80] - A[71]*tmp;
    P[8] = 9;
}

void lu_10( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[10], A[i_max+10] );
    std::swap( A[20], A[i_max+20] );
    std::swap( A[30], A[i_max+30] );
    std::swap( A[40], A[i_max+40] );
    std::swap( A[50], A[i_max+50] );
    std::swap( A[60], A[i_max+60] );
    std::swap( A[70], A[i_max+70] );
    std::swap( A[80], A[i_max+80] );
    std::swap( A[90], A[i_max+90] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    tmp = A[10];
    A[11] = A[11] - A[1]*tmp;
    A[12] = A[12] - A[2]*tmp;
    A[13] = A[13] - A[3]*tmp;
    A[14] = A[14] - A[4]*tmp;
    A[15] = A[15] - A[5]*tmp;
    A[16] = A[16] - A[6]*tmp;
    A[17] = A[17] - A[7]*tmp;
    A[18] = A[18] - A[8]*tmp;
    A[19] = A[19] - A[9]*tmp;
    tmp = A[20];
    A[21] = A[21] - A[1]*tmp;
    A[22] = A[22] - A[2]*tmp;
    A[23] = A[23] - A[3]*tmp;
    A[24] = A[24] - A[4]*tmp;
    A[25] = A[25] - A[5]*tmp;
    A[26] = A[26] - A[6]*tmp;
    A[27] = A[27] - A[7]*tmp;
    A[28] = A[28] - A[8]*tmp;
    A[29] = A[29] - A[9]*tmp;
    tmp = A[30];
    A[31] = A[31] - A[1]*tmp;
    A[32] = A[32] - A[2]*tmp;
    A[33] = A[33] - A[3]*tmp;
    A[34] = A[34] - A[4]*tmp;
    A[35] = A[35] - A[5]*tmp;
    A[36] = A[36] - A[6]*tmp;
    A[37] = A[37] - A[7]*tmp;
    A[38] = A[38] - A[8]*tmp;
    A[39] = A[39] - A[9]*tmp;
    tmp = A[40];
    A[41] = A[41] - A[1]*tmp;
    A[42] = A[42] - A[2]*tmp;
    A[43] = A[43] - A[3]*tmp;
    A[44] = A[44] - A[4]*tmp;
    A[45] = A[45] - A[5]*tmp;
    A[46] = A[46] - A[6]*tmp;
    A[47] = A[47] - A[7]*tmp;
    A[48] = A[48] - A[8]*tmp;
    A[49] = A[49] - A[9]*tmp;
    tmp = A[50];
    A[51] = A[51] - A[1]*tmp;
    A[52] = A[52] - A[2]*tmp;
    A[53] = A[53] - A[3]*tmp;
    A[54] = A[54] - A[4]*tmp;
    A[55] = A[55] - A[5]*tmp;
    A[56] = A[56] - A[6]*tmp;
    A[57] = A[57] - A[7]*tmp;
    A[58] = A[58] - A[8]*tmp;
    A[59] = A[59] - A[9]*tmp;
    tmp = A[60];
    A[61] = A[61] - A[1]*tmp;
    A[62] = A[62] - A[2]*tmp;
    A[63] = A[63] - A[3]*tmp;
    A[64] = A[64] - A[4]*tmp;
    A[65] = A[65] - A[5]*tmp;
    A[66] = A[66] - A[6]*tmp;
    A[67] = A[67] - A[7]*tmp;
    A[68] = A[68] - A[8]*tmp;
    A[69] = A[69] - A[9]*tmp;
    tmp = A[70];
    A[71] = A[71] - A[1]*tmp;
    A[72] = A[72] - A[2]*tmp;
    A[73] = A[73] - A[3]*tmp;
    A[74] = A[74] - A[4]*tmp;
    A[75] = A[75] - A[5]*tmp;
    A[76] = A[76] - A[6]*tmp;
    A[77] = A[77] - A[7]*tmp;
    A[78] = A[78] - A[8]*tmp;
    A[79] = A[79] - A[9]*tmp;
    tmp = A[80];
    A[81] = A[81] - A[1]*tmp;
    A[82] = A[82] - A[2]*tmp;
    A[83] = A[83] - A[3]*tmp;
    A[84] = A[84] - A[4]*tmp;
    A[85] = A[85] - A[5]*tmp;
    A[86] = A[86] - A[6]*tmp;
    A[87] = A[87] - A[7]*tmp;
    A[88] = A[88] - A[8]*tmp;
    A[89] = A[89] - A[9]*tmp;
    tmp = A[90];
    A[91] = A[91] - A[1]*tmp;
    A[92] = A[92] - A[2]*tmp;
    A[93] = A[93] - A[3]*tmp;
    A[94] = A[94] - A[4]*tmp;
    A[95] = A[95] - A[5]*tmp;
    A[96] = A[96] - A[6]*tmp;
    A[97] = A[97] - A[7]*tmp;
    A[98] = A[98] - A[8]*tmp;
    A[99] = A[99] - A[9]*tmp;
    i_max = 1;
    a_max = abs(A[11]);
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 2; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 3; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 4; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 5; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 6; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 7; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 8; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 9; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[11], A[i_max+10] );
    std::swap( A[21], A[i_max+20] );
    std::swap( A[31], A[i_max+30] );
    std::swap( A[41], A[i_max+40] );
    std::swap( A[51], A[i_max+50] );
    std::swap( A[61], A[i_max+60] );
    std::swap( A[71], A[i_max+70] );
    std::swap( A[81], A[i_max+80] );
    std::swap( A[91], A[i_max+90] );
    P[1] = i_max + 1;
    tmp = A[11];
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    tmp = A[21];
    A[22] = A[22] - A[12]*tmp;
    A[23] = A[23] - A[13]*tmp;
    A[24] = A[24] - A[14]*tmp;
    A[25] = A[25] - A[15]*tmp;
    A[26] = A[26] - A[16]*tmp;
    A[27] = A[27] - A[17]*tmp;
    A[28] = A[28] - A[18]*tmp;
    A[29] = A[29] - A[19]*tmp;
    tmp = A[31];
    A[32] = A[32] - A[12]*tmp;
    A[33] = A[33] - A[13]*tmp;
    A[34] = A[34] - A[14]*tmp;
    A[35] = A[35] - A[15]*tmp;
    A[36] = A[36] - A[16]*tmp;
    A[37] = A[37] - A[17]*tmp;
    A[38] = A[38] - A[18]*tmp;
    A[39] = A[39] - A[19]*tmp;
    tmp = A[41];
    A[42] = A[42] - A[12]*tmp;
    A[43] = A[43] - A[13]*tmp;
    A[44] = A[44] - A[14]*tmp;
    A[45] = A[45] - A[15]*tmp;
    A[46] = A[46] - A[16]*tmp;
    A[47] = A[47] - A[17]*tmp;
    A[48] = A[48] - A[18]*tmp;
    A[49] = A[49] - A[19]*tmp;
    tmp = A[51];
    A[52] = A[52] - A[12]*tmp;
    A[53] = A[53] - A[13]*tmp;
    A[54] = A[54] - A[14]*tmp;
    A[55] = A[55] - A[15]*tmp;
    A[56] = A[56] - A[16]*tmp;
    A[57] = A[57] - A[17]*tmp;
    A[58] = A[58] - A[18]*tmp;
    A[59] = A[59] - A[19]*tmp;
    tmp = A[61];
    A[62] = A[62] - A[12]*tmp;
    A[63] = A[63] - A[13]*tmp;
    A[64] = A[64] - A[14]*tmp;
    A[65] = A[65] - A[15]*tmp;
    A[66] = A[66] - A[16]*tmp;
    A[67] = A[67] - A[17]*tmp;
    A[68] = A[68] - A[18]*tmp;
    A[69] = A[69] - A[19]*tmp;
    tmp = A[71];
    A[72] = A[72] - A[12]*tmp;
    A[73] = A[73] - A[13]*tmp;
    A[74] = A[74] - A[14]*tmp;
    A[75] = A[75] - A[15]*tmp;
    A[76] = A[76] - A[16]*tmp;
    A[77] = A[77] - A[17]*tmp;
    A[78] = A[78] - A[18]*tmp;
    A[79] = A[79] - A[19]*tmp;
    tmp = A[81];
    A[82] = A[82] - A[12]*tmp;
    A[83] = A[83] - A[13]*tmp;
    A[84] = A[84] - A[14]*tmp;
    A[85] = A[85] - A[15]*tmp;
    A[86] = A[86] - A[16]*tmp;
    A[87] = A[87] - A[17]*tmp;
    A[88] = A[88] - A[18]*tmp;
    A[89] = A[89] - A[19]*tmp;
    tmp = A[91];
    A[92] = A[92] - A[12]*tmp;
    A[93] = A[93] - A[13]*tmp;
    A[94] = A[94] - A[14]*tmp;
    A[95] = A[95] - A[15]*tmp;
    A[96] = A[96] - A[16]*tmp;
    A[97] = A[97] - A[17]*tmp;
    A[98] = A[98] - A[18]*tmp;
    A[99] = A[99] - A[19]*tmp;
    i_max = 2;
    a_max = abs(A[22]);
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 3; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 4; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 5; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 6; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 7; }
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 8; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 9; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[12], A[i_max+10] );
    std::swap( A[22], A[i_max+20] );
    std::swap( A[32], A[i_max+30] );
    std::swap( A[42], A[i_max+40] );
    std::swap( A[52], A[i_max+50] );
    std::swap( A[62], A[i_max+60] );
    std::swap( A[72], A[i_max+70] );
    std::swap( A[82], A[i_max+80] );
    std::swap( A[92], A[i_max+90] );
    P[2] = i_max + 1;
    tmp = A[22];
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    tmp = A[32];
    A[33] = A[33] - A[23]*tmp;
    A[34] = A[34] - A[24]*tmp;
    A[35] = A[35] - A[25]*tmp;
    A[36] = A[36] - A[26]*tmp;
    A[37] = A[37] - A[27]*tmp;
    A[38] = A[38] - A[28]*tmp;
    A[39] = A[39] - A[29]*tmp;
    tmp = A[42];
    A[43] = A[43] - A[23]*tmp;
    A[44] = A[44] - A[24]*tmp;
    A[45] = A[45] - A[25]*tmp;
    A[46] = A[46] - A[26]*tmp;
    A[47] = A[47] - A[27]*tmp;
    A[48] = A[48] - A[28]*tmp;
    A[49] = A[49] - A[29]*tmp;
    tmp = A[52];
    A[53] = A[53] - A[23]*tmp;
    A[54] = A[54] - A[24]*tmp;
    A[55] = A[55] - A[25]*tmp;
    A[56] = A[56] - A[26]*tmp;
    A[57] = A[57] - A[27]*tmp;
    A[58] = A[58] - A[28]*tmp;
    A[59] = A[59] - A[29]*tmp;
    tmp = A[62];
    A[63] = A[63] - A[23]*tmp;
    A[64] = A[64] - A[24]*tmp;
    A[65] = A[65] - A[25]*tmp;
    A[66] = A[66] - A[26]*tmp;
    A[67] = A[67] - A[27]*tmp;
    A[68] = A[68] - A[28]*tmp;
    A[69] = A[69] - A[29]*tmp;
    tmp = A[72];
    A[73] = A[73] - A[23]*tmp;
    A[74] = A[74] - A[24]*tmp;
    A[75] = A[75] - A[25]*tmp;
    A[76] = A[76] - A[26]*tmp;
    A[77] = A[77] - A[27]*tmp;
    A[78] = A[78] - A[28]*tmp;
    A[79] = A[79] - A[29]*tmp;
    tmp = A[82];
    A[83] = A[83] - A[23]*tmp;
    A[84] = A[84] - A[24]*tmp;
    A[85] = A[85] - A[25]*tmp;
    A[86] = A[86] - A[26]*tmp;
    A[87] = A[87] - A[27]*tmp;
    A[88] = A[88] - A[28]*tmp;
    A[89] = A[89] - A[29]*tmp;
    tmp = A[92];
    A[93] = A[93] - A[23]*tmp;
    A[94] = A[94] - A[24]*tmp;
    A[95] = A[95] - A[25]*tmp;
    A[96] = A[96] - A[26]*tmp;
    A[97] = A[97] - A[27]*tmp;
    A[98] = A[98] - A[28]*tmp;
    A[99] = A[99] - A[29]*tmp;
    i_max = 3;
    a_max = abs(A[33]);
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 4; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 5; }
    if ( a_max < abs( A[36] ) ) { a_max = abs(A[36]); i_max = 6; }
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 7; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 8; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 9; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[13], A[i_max+10] );
    std::swap( A[23], A[i_max+20] );
    std::swap( A[33], A[i_max+30] );
    std::swap( A[43], A[i_max+40] );
    std::swap( A[53], A[i_max+50] );
    std::swap( A[63], A[i_max+60] );
    std::swap( A[73], A[i_max+70] );
    std::swap( A[83], A[i_max+80] );
    std::swap( A[93], A[i_max+90] );
    P[3] = i_max + 1;
    tmp = A[33];
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    A[36] = A[36] / tmp;
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    tmp = A[43];
    A[44] = A[44] - A[34]*tmp;
    A[45] = A[45] - A[35]*tmp;
    A[46] = A[46] - A[36]*tmp;
    A[47] = A[47] - A[37]*tmp;
    A[48] = A[48] - A[38]*tmp;
    A[49] = A[49] - A[39]*tmp;
    tmp = A[53];
    A[54] = A[54] - A[34]*tmp;
    A[55] = A[55] - A[35]*tmp;
    A[56] = A[56] - A[36]*tmp;
    A[57] = A[57] - A[37]*tmp;
    A[58] = A[58] - A[38]*tmp;
    A[59] = A[59] - A[39]*tmp;
    tmp = A[63];
    A[64] = A[64] - A[34]*tmp;
    A[65] = A[65] - A[35]*tmp;
    A[66] = A[66] - A[36]*tmp;
    A[67] = A[67] - A[37]*tmp;
    A[68] = A[68] - A[38]*tmp;
    A[69] = A[69] - A[39]*tmp;
    tmp = A[73];
    A[74] = A[74] - A[34]*tmp;
    A[75] = A[75] - A[35]*tmp;
    A[76] = A[76] - A[36]*tmp;
    A[77] = A[77] - A[37]*tmp;
    A[78] = A[78] - A[38]*tmp;
    A[79] = A[79] - A[39]*tmp;
    tmp = A[83];
    A[84] = A[84] - A[34]*tmp;
    A[85] = A[85] - A[35]*tmp;
    A[86] = A[86] - A[36]*tmp;
    A[87] = A[87] - A[37]*tmp;
    A[88] = A[88] - A[38]*tmp;
    A[89] = A[89] - A[39]*tmp;
    tmp = A[93];
    A[94] = A[94] - A[34]*tmp;
    A[95] = A[95] - A[35]*tmp;
    A[96] = A[96] - A[36]*tmp;
    A[97] = A[97] - A[37]*tmp;
    A[98] = A[98] - A[38]*tmp;
    A[99] = A[99] - A[39]*tmp;
    i_max = 4;
    a_max = abs(A[44]);
    if ( a_max < abs( A[45] ) ) { a_max = abs(A[45]); i_max = 5; }
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 6; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 7; }
    if ( a_max < abs( A[48] ) ) { a_max = abs(A[48]); i_max = 8; }
    if ( a_max < abs( A[49] ) ) { a_max = abs(A[49]); i_max = 9; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[14], A[i_max+10] );
    std::swap( A[24], A[i_max+20] );
    std::swap( A[34], A[i_max+30] );
    std::swap( A[44], A[i_max+40] );
    std::swap( A[54], A[i_max+50] );
    std::swap( A[64], A[i_max+60] );
    std::swap( A[74], A[i_max+70] );
    std::swap( A[84], A[i_max+80] );
    std::swap( A[94], A[i_max+90] );
    P[4] = i_max + 1;
    tmp = A[44];
    A[45] = A[45] / tmp;
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    A[48] = A[48] / tmp;
    A[49] = A[49] / tmp;
    tmp = A[54];
    A[55] = A[55] - A[45]*tmp;
    A[56] = A[56] - A[46]*tmp;
    A[57] = A[57] - A[47]*tmp;
    A[58] = A[58] - A[48]*tmp;
    A[59] = A[59] - A[49]*tmp;
    tmp = A[64];
    A[65] = A[65] - A[45]*tmp;
    A[66] = A[66] - A[46]*tmp;
    A[67] = A[67] - A[47]*tmp;
    A[68] = A[68] - A[48]*tmp;
    A[69] = A[69] - A[49]*tmp;
    tmp = A[74];
    A[75] = A[75] - A[45]*tmp;
    A[76] = A[76] - A[46]*tmp;
    A[77] = A[77] - A[47]*tmp;
    A[78] = A[78] - A[48]*tmp;
    A[79] = A[79] - A[49]*tmp;
    tmp = A[84];
    A[85] = A[85] - A[45]*tmp;
    A[86] = A[86] - A[46]*tmp;
    A[87] = A[87] - A[47]*tmp;
    A[88] = A[88] - A[48]*tmp;
    A[89] = A[89] - A[49]*tmp;
    tmp = A[94];
    A[95] = A[95] - A[45]*tmp;
    A[96] = A[96] - A[46]*tmp;
    A[97] = A[97] - A[47]*tmp;
    A[98] = A[98] - A[48]*tmp;
    A[99] = A[99] - A[49]*tmp;
    i_max = 5;
    a_max = abs(A[55]);
    if ( a_max < abs( A[56] ) ) { a_max = abs(A[56]); i_max = 6; }
    if ( a_max < abs( A[57] ) ) { a_max = abs(A[57]); i_max = 7; }
    if ( a_max < abs( A[58] ) ) { a_max = abs(A[58]); i_max = 8; }
    if ( a_max < abs( A[59] ) ) { a_max = abs(A[59]); i_max = 9; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[15], A[i_max+10] );
    std::swap( A[25], A[i_max+20] );
    std::swap( A[35], A[i_max+30] );
    std::swap( A[45], A[i_max+40] );
    std::swap( A[55], A[i_max+50] );
    std::swap( A[65], A[i_max+60] );
    std::swap( A[75], A[i_max+70] );
    std::swap( A[85], A[i_max+80] );
    std::swap( A[95], A[i_max+90] );
    P[5] = i_max + 1;
    tmp = A[55];
    A[56] = A[56] / tmp;
    A[57] = A[57] / tmp;
    A[58] = A[58] / tmp;
    A[59] = A[59] / tmp;
    tmp = A[65];
    A[66] = A[66] - A[56]*tmp;
    A[67] = A[67] - A[57]*tmp;
    A[68] = A[68] - A[58]*tmp;
    A[69] = A[69] - A[59]*tmp;
    tmp = A[75];
    A[76] = A[76] - A[56]*tmp;
    A[77] = A[77] - A[57]*tmp;
    A[78] = A[78] - A[58]*tmp;
    A[79] = A[79] - A[59]*tmp;
    tmp = A[85];
    A[86] = A[86] - A[56]*tmp;
    A[87] = A[87] - A[57]*tmp;
    A[88] = A[88] - A[58]*tmp;
    A[89] = A[89] - A[59]*tmp;
    tmp = A[95];
    A[96] = A[96] - A[56]*tmp;
    A[97] = A[97] - A[57]*tmp;
    A[98] = A[98] - A[58]*tmp;
    A[99] = A[99] - A[59]*tmp;
    i_max = 6;
    a_max = abs(A[66]);
    if ( a_max < abs( A[67] ) ) { a_max = abs(A[67]); i_max = 7; }
    if ( a_max < abs( A[68] ) ) { a_max = abs(A[68]); i_max = 8; }
    if ( a_max < abs( A[69] ) ) { a_max = abs(A[69]); i_max = 9; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[16], A[i_max+10] );
    std::swap( A[26], A[i_max+20] );
    std::swap( A[36], A[i_max+30] );
    std::swap( A[46], A[i_max+40] );
    std::swap( A[56], A[i_max+50] );
    std::swap( A[66], A[i_max+60] );
    std::swap( A[76], A[i_max+70] );
    std::swap( A[86], A[i_max+80] );
    std::swap( A[96], A[i_max+90] );
    P[6] = i_max + 1;
    tmp = A[66];
    A[67] = A[67] / tmp;
    A[68] = A[68] / tmp;
    A[69] = A[69] / tmp;
    tmp = A[76];
    A[77] = A[77] - A[67]*tmp;
    A[78] = A[78] - A[68]*tmp;
    A[79] = A[79] - A[69]*tmp;
    tmp = A[86];
    A[87] = A[87] - A[67]*tmp;
    A[88] = A[88] - A[68]*tmp;
    A[89] = A[89] - A[69]*tmp;
    tmp = A[96];
    A[97] = A[97] - A[67]*tmp;
    A[98] = A[98] - A[68]*tmp;
    A[99] = A[99] - A[69]*tmp;
    i_max = 7;
    a_max = abs(A[77]);
    if ( a_max < abs( A[78] ) ) { a_max = abs(A[78]); i_max = 8; }
    if ( a_max < abs( A[79] ) ) { a_max = abs(A[79]); i_max = 9; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[17], A[i_max+10] );
    std::swap( A[27], A[i_max+20] );
    std::swap( A[37], A[i_max+30] );
    std::swap( A[47], A[i_max+40] );
    std::swap( A[57], A[i_max+50] );
    std::swap( A[67], A[i_max+60] );
    std::swap( A[77], A[i_max+70] );
    std::swap( A[87], A[i_max+80] );
    std::swap( A[97], A[i_max+90] );
    P[7] = i_max + 1;
    tmp = A[77];
    A[78] = A[78] / tmp;
    A[79] = A[79] / tmp;
    tmp = A[87];
    A[88] = A[88] - A[78]*tmp;
    A[89] = A[89] - A[79]*tmp;
    tmp = A[97];
    A[98] = A[98] - A[78]*tmp;
    A[99] = A[99] - A[79]*tmp;
    i_max = 8;
    a_max = abs(A[88]);
    if ( a_max < abs( A[89] ) ) { a_max = abs(A[89]); i_max = 9; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[18], A[i_max+10] );
    std::swap( A[28], A[i_max+20] );
    std::swap( A[38], A[i_max+30] );
    std::swap( A[48], A[i_max+40] );
    std::swap( A[58], A[i_max+50] );
    std::swap( A[68], A[i_max+60] );
    std::swap( A[78], A[i_max+70] );
    std::swap( A[88], A[i_max+80] );
    std::swap( A[98], A[i_max+90] );
    P[8] = i_max + 1;
    tmp = A[88];
    A[89] = A[89] / tmp;
    tmp = A[98];
    A[99] = A[99] - A[89]*tmp;
    P[9] = 10;
}

void lu_11( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[11], A[i_max+11] );
    std::swap( A[22], A[i_max+22] );
    std::swap( A[33], A[i_max+33] );
    std::swap( A[44], A[i_max+44] );
    std::swap( A[55], A[i_max+55] );
    std::swap( A[66], A[i_max+66] );
    std::swap( A[77], A[i_max+77] );
    std::swap( A[88], A[i_max+88] );
    std::swap( A[99], A[i_max+99] );
    std::swap( A[110], A[i_max+110] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    tmp = A[11];
    A[12] = A[12] - A[1]*tmp;
    A[13] = A[13] - A[2]*tmp;
    A[14] = A[14] - A[3]*tmp;
    A[15] = A[15] - A[4]*tmp;
    A[16] = A[16] - A[5]*tmp;
    A[17] = A[17] - A[6]*tmp;
    A[18] = A[18] - A[7]*tmp;
    A[19] = A[19] - A[8]*tmp;
    A[20] = A[20] - A[9]*tmp;
    A[21] = A[21] - A[10]*tmp;
    tmp = A[22];
    A[23] = A[23] - A[1]*tmp;
    A[24] = A[24] - A[2]*tmp;
    A[25] = A[25] - A[3]*tmp;
    A[26] = A[26] - A[4]*tmp;
    A[27] = A[27] - A[5]*tmp;
    A[28] = A[28] - A[6]*tmp;
    A[29] = A[29] - A[7]*tmp;
    A[30] = A[30] - A[8]*tmp;
    A[31] = A[31] - A[9]*tmp;
    A[32] = A[32] - A[10]*tmp;
    tmp = A[33];
    A[34] = A[34] - A[1]*tmp;
    A[35] = A[35] - A[2]*tmp;
    A[36] = A[36] - A[3]*tmp;
    A[37] = A[37] - A[4]*tmp;
    A[38] = A[38] - A[5]*tmp;
    A[39] = A[39] - A[6]*tmp;
    A[40] = A[40] - A[7]*tmp;
    A[41] = A[41] - A[8]*tmp;
    A[42] = A[42] - A[9]*tmp;
    A[43] = A[43] - A[10]*tmp;
    tmp = A[44];
    A[45] = A[45] - A[1]*tmp;
    A[46] = A[46] - A[2]*tmp;
    A[47] = A[47] - A[3]*tmp;
    A[48] = A[48] - A[4]*tmp;
    A[49] = A[49] - A[5]*tmp;
    A[50] = A[50] - A[6]*tmp;
    A[51] = A[51] - A[7]*tmp;
    A[52] = A[52] - A[8]*tmp;
    A[53] = A[53] - A[9]*tmp;
    A[54] = A[54] - A[10]*tmp;
    tmp = A[55];
    A[56] = A[56] - A[1]*tmp;
    A[57] = A[57] - A[2]*tmp;
    A[58] = A[58] - A[3]*tmp;
    A[59] = A[59] - A[4]*tmp;
    A[60] = A[60] - A[5]*tmp;
    A[61] = A[61] - A[6]*tmp;
    A[62] = A[62] - A[7]*tmp;
    A[63] = A[63] - A[8]*tmp;
    A[64] = A[64] - A[9]*tmp;
    A[65] = A[65] - A[10]*tmp;
    tmp = A[66];
    A[67] = A[67] - A[1]*tmp;
    A[68] = A[68] - A[2]*tmp;
    A[69] = A[69] - A[3]*tmp;
    A[70] = A[70] - A[4]*tmp;
    A[71] = A[71] - A[5]*tmp;
    A[72] = A[72] - A[6]*tmp;
    A[73] = A[73] - A[7]*tmp;
    A[74] = A[74] - A[8]*tmp;
    A[75] = A[75] - A[9]*tmp;
    A[76] = A[76] - A[10]*tmp;
    tmp = A[77];
    A[78] = A[78] - A[1]*tmp;
    A[79] = A[79] - A[2]*tmp;
    A[80] = A[80] - A[3]*tmp;
    A[81] = A[81] - A[4]*tmp;
    A[82] = A[82] - A[5]*tmp;
    A[83] = A[83] - A[6]*tmp;
    A[84] = A[84] - A[7]*tmp;
    A[85] = A[85] - A[8]*tmp;
    A[86] = A[86] - A[9]*tmp;
    A[87] = A[87] - A[10]*tmp;
    tmp = A[88];
    A[89] = A[89] - A[1]*tmp;
    A[90] = A[90] - A[2]*tmp;
    A[91] = A[91] - A[3]*tmp;
    A[92] = A[92] - A[4]*tmp;
    A[93] = A[93] - A[5]*tmp;
    A[94] = A[94] - A[6]*tmp;
    A[95] = A[95] - A[7]*tmp;
    A[96] = A[96] - A[8]*tmp;
    A[97] = A[97] - A[9]*tmp;
    A[98] = A[98] - A[10]*tmp;
    tmp = A[99];
    A[100] = A[100] - A[1]*tmp;
    A[101] = A[101] - A[2]*tmp;
    A[102] = A[102] - A[3]*tmp;
    A[103] = A[103] - A[4]*tmp;
    A[104] = A[104] - A[5]*tmp;
    A[105] = A[105] - A[6]*tmp;
    A[106] = A[106] - A[7]*tmp;
    A[107] = A[107] - A[8]*tmp;
    A[108] = A[108] - A[9]*tmp;
    A[109] = A[109] - A[10]*tmp;
    tmp = A[110];
    A[111] = A[111] - A[1]*tmp;
    A[112] = A[112] - A[2]*tmp;
    A[113] = A[113] - A[3]*tmp;
    A[114] = A[114] - A[4]*tmp;
    A[115] = A[115] - A[5]*tmp;
    A[116] = A[116] - A[6]*tmp;
    A[117] = A[117] - A[7]*tmp;
    A[118] = A[118] - A[8]*tmp;
    A[119] = A[119] - A[9]*tmp;
    A[120] = A[120] - A[10]*tmp;
    i_max = 1;
    a_max = abs(A[12]);
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 2; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 3; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 4; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 5; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 6; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 7; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 8; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 9; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 10; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[12], A[i_max+11] );
    std::swap( A[23], A[i_max+22] );
    std::swap( A[34], A[i_max+33] );
    std::swap( A[45], A[i_max+44] );
    std::swap( A[56], A[i_max+55] );
    std::swap( A[67], A[i_max+66] );
    std::swap( A[78], A[i_max+77] );
    std::swap( A[89], A[i_max+88] );
    std::swap( A[100], A[i_max+99] );
    std::swap( A[111], A[i_max+110] );
    P[1] = i_max + 1;
    tmp = A[12];
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    tmp = A[23];
    A[24] = A[24] - A[13]*tmp;
    A[25] = A[25] - A[14]*tmp;
    A[26] = A[26] - A[15]*tmp;
    A[27] = A[27] - A[16]*tmp;
    A[28] = A[28] - A[17]*tmp;
    A[29] = A[29] - A[18]*tmp;
    A[30] = A[30] - A[19]*tmp;
    A[31] = A[31] - A[20]*tmp;
    A[32] = A[32] - A[21]*tmp;
    tmp = A[34];
    A[35] = A[35] - A[13]*tmp;
    A[36] = A[36] - A[14]*tmp;
    A[37] = A[37] - A[15]*tmp;
    A[38] = A[38] - A[16]*tmp;
    A[39] = A[39] - A[17]*tmp;
    A[40] = A[40] - A[18]*tmp;
    A[41] = A[41] - A[19]*tmp;
    A[42] = A[42] - A[20]*tmp;
    A[43] = A[43] - A[21]*tmp;
    tmp = A[45];
    A[46] = A[46] - A[13]*tmp;
    A[47] = A[47] - A[14]*tmp;
    A[48] = A[48] - A[15]*tmp;
    A[49] = A[49] - A[16]*tmp;
    A[50] = A[50] - A[17]*tmp;
    A[51] = A[51] - A[18]*tmp;
    A[52] = A[52] - A[19]*tmp;
    A[53] = A[53] - A[20]*tmp;
    A[54] = A[54] - A[21]*tmp;
    tmp = A[56];
    A[57] = A[57] - A[13]*tmp;
    A[58] = A[58] - A[14]*tmp;
    A[59] = A[59] - A[15]*tmp;
    A[60] = A[60] - A[16]*tmp;
    A[61] = A[61] - A[17]*tmp;
    A[62] = A[62] - A[18]*tmp;
    A[63] = A[63] - A[19]*tmp;
    A[64] = A[64] - A[20]*tmp;
    A[65] = A[65] - A[21]*tmp;
    tmp = A[67];
    A[68] = A[68] - A[13]*tmp;
    A[69] = A[69] - A[14]*tmp;
    A[70] = A[70] - A[15]*tmp;
    A[71] = A[71] - A[16]*tmp;
    A[72] = A[72] - A[17]*tmp;
    A[73] = A[73] - A[18]*tmp;
    A[74] = A[74] - A[19]*tmp;
    A[75] = A[75] - A[20]*tmp;
    A[76] = A[76] - A[21]*tmp;
    tmp = A[78];
    A[79] = A[79] - A[13]*tmp;
    A[80] = A[80] - A[14]*tmp;
    A[81] = A[81] - A[15]*tmp;
    A[82] = A[82] - A[16]*tmp;
    A[83] = A[83] - A[17]*tmp;
    A[84] = A[84] - A[18]*tmp;
    A[85] = A[85] - A[19]*tmp;
    A[86] = A[86] - A[20]*tmp;
    A[87] = A[87] - A[21]*tmp;
    tmp = A[89];
    A[90] = A[90] - A[13]*tmp;
    A[91] = A[91] - A[14]*tmp;
    A[92] = A[92] - A[15]*tmp;
    A[93] = A[93] - A[16]*tmp;
    A[94] = A[94] - A[17]*tmp;
    A[95] = A[95] - A[18]*tmp;
    A[96] = A[96] - A[19]*tmp;
    A[97] = A[97] - A[20]*tmp;
    A[98] = A[98] - A[21]*tmp;
    tmp = A[100];
    A[101] = A[101] - A[13]*tmp;
    A[102] = A[102] - A[14]*tmp;
    A[103] = A[103] - A[15]*tmp;
    A[104] = A[104] - A[16]*tmp;
    A[105] = A[105] - A[17]*tmp;
    A[106] = A[106] - A[18]*tmp;
    A[107] = A[107] - A[19]*tmp;
    A[108] = A[108] - A[20]*tmp;
    A[109] = A[109] - A[21]*tmp;
    tmp = A[111];
    A[112] = A[112] - A[13]*tmp;
    A[113] = A[113] - A[14]*tmp;
    A[114] = A[114] - A[15]*tmp;
    A[115] = A[115] - A[16]*tmp;
    A[116] = A[116] - A[17]*tmp;
    A[117] = A[117] - A[18]*tmp;
    A[118] = A[118] - A[19]*tmp;
    A[119] = A[119] - A[20]*tmp;
    A[120] = A[120] - A[21]*tmp;
    i_max = 2;
    a_max = abs(A[24]);
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 3; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 4; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 5; }
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 6; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 7; }
    if ( a_max < abs( A[30] ) ) { a_max = abs(A[30]); i_max = 8; }
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 9; }
    if ( a_max < abs( A[32] ) ) { a_max = abs(A[32]); i_max = 10; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[13], A[i_max+11] );
    std::swap( A[24], A[i_max+22] );
    std::swap( A[35], A[i_max+33] );
    std::swap( A[46], A[i_max+44] );
    std::swap( A[57], A[i_max+55] );
    std::swap( A[68], A[i_max+66] );
    std::swap( A[79], A[i_max+77] );
    std::swap( A[90], A[i_max+88] );
    std::swap( A[101], A[i_max+99] );
    std::swap( A[112], A[i_max+110] );
    P[2] = i_max + 1;
    tmp = A[24];
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    A[30] = A[30] / tmp;
    A[31] = A[31] / tmp;
    A[32] = A[32] / tmp;
    tmp = A[35];
    A[36] = A[36] - A[25]*tmp;
    A[37] = A[37] - A[26]*tmp;
    A[38] = A[38] - A[27]*tmp;
    A[39] = A[39] - A[28]*tmp;
    A[40] = A[40] - A[29]*tmp;
    A[41] = A[41] - A[30]*tmp;
    A[42] = A[42] - A[31]*tmp;
    A[43] = A[43] - A[32]*tmp;
    tmp = A[46];
    A[47] = A[47] - A[25]*tmp;
    A[48] = A[48] - A[26]*tmp;
    A[49] = A[49] - A[27]*tmp;
    A[50] = A[50] - A[28]*tmp;
    A[51] = A[51] - A[29]*tmp;
    A[52] = A[52] - A[30]*tmp;
    A[53] = A[53] - A[31]*tmp;
    A[54] = A[54] - A[32]*tmp;
    tmp = A[57];
    A[58] = A[58] - A[25]*tmp;
    A[59] = A[59] - A[26]*tmp;
    A[60] = A[60] - A[27]*tmp;
    A[61] = A[61] - A[28]*tmp;
    A[62] = A[62] - A[29]*tmp;
    A[63] = A[63] - A[30]*tmp;
    A[64] = A[64] - A[31]*tmp;
    A[65] = A[65] - A[32]*tmp;
    tmp = A[68];
    A[69] = A[69] - A[25]*tmp;
    A[70] = A[70] - A[26]*tmp;
    A[71] = A[71] - A[27]*tmp;
    A[72] = A[72] - A[28]*tmp;
    A[73] = A[73] - A[29]*tmp;
    A[74] = A[74] - A[30]*tmp;
    A[75] = A[75] - A[31]*tmp;
    A[76] = A[76] - A[32]*tmp;
    tmp = A[79];
    A[80] = A[80] - A[25]*tmp;
    A[81] = A[81] - A[26]*tmp;
    A[82] = A[82] - A[27]*tmp;
    A[83] = A[83] - A[28]*tmp;
    A[84] = A[84] - A[29]*tmp;
    A[85] = A[85] - A[30]*tmp;
    A[86] = A[86] - A[31]*tmp;
    A[87] = A[87] - A[32]*tmp;
    tmp = A[90];
    A[91] = A[91] - A[25]*tmp;
    A[92] = A[92] - A[26]*tmp;
    A[93] = A[93] - A[27]*tmp;
    A[94] = A[94] - A[28]*tmp;
    A[95] = A[95] - A[29]*tmp;
    A[96] = A[96] - A[30]*tmp;
    A[97] = A[97] - A[31]*tmp;
    A[98] = A[98] - A[32]*tmp;
    tmp = A[101];
    A[102] = A[102] - A[25]*tmp;
    A[103] = A[103] - A[26]*tmp;
    A[104] = A[104] - A[27]*tmp;
    A[105] = A[105] - A[28]*tmp;
    A[106] = A[106] - A[29]*tmp;
    A[107] = A[107] - A[30]*tmp;
    A[108] = A[108] - A[31]*tmp;
    A[109] = A[109] - A[32]*tmp;
    tmp = A[112];
    A[113] = A[113] - A[25]*tmp;
    A[114] = A[114] - A[26]*tmp;
    A[115] = A[115] - A[27]*tmp;
    A[116] = A[116] - A[28]*tmp;
    A[117] = A[117] - A[29]*tmp;
    A[118] = A[118] - A[30]*tmp;
    A[119] = A[119] - A[31]*tmp;
    A[120] = A[120] - A[32]*tmp;
    i_max = 3;
    a_max = abs(A[36]);
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 4; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 5; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 6; }
    if ( a_max < abs( A[40] ) ) { a_max = abs(A[40]); i_max = 7; }
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 8; }
    if ( a_max < abs( A[42] ) ) { a_max = abs(A[42]); i_max = 9; }
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 10; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[14], A[i_max+11] );
    std::swap( A[25], A[i_max+22] );
    std::swap( A[36], A[i_max+33] );
    std::swap( A[47], A[i_max+44] );
    std::swap( A[58], A[i_max+55] );
    std::swap( A[69], A[i_max+66] );
    std::swap( A[80], A[i_max+77] );
    std::swap( A[91], A[i_max+88] );
    std::swap( A[102], A[i_max+99] );
    std::swap( A[113], A[i_max+110] );
    P[3] = i_max + 1;
    tmp = A[36];
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    A[40] = A[40] / tmp;
    A[41] = A[41] / tmp;
    A[42] = A[42] / tmp;
    A[43] = A[43] / tmp;
    tmp = A[47];
    A[48] = A[48] - A[37]*tmp;
    A[49] = A[49] - A[38]*tmp;
    A[50] = A[50] - A[39]*tmp;
    A[51] = A[51] - A[40]*tmp;
    A[52] = A[52] - A[41]*tmp;
    A[53] = A[53] - A[42]*tmp;
    A[54] = A[54] - A[43]*tmp;
    tmp = A[58];
    A[59] = A[59] - A[37]*tmp;
    A[60] = A[60] - A[38]*tmp;
    A[61] = A[61] - A[39]*tmp;
    A[62] = A[62] - A[40]*tmp;
    A[63] = A[63] - A[41]*tmp;
    A[64] = A[64] - A[42]*tmp;
    A[65] = A[65] - A[43]*tmp;
    tmp = A[69];
    A[70] = A[70] - A[37]*tmp;
    A[71] = A[71] - A[38]*tmp;
    A[72] = A[72] - A[39]*tmp;
    A[73] = A[73] - A[40]*tmp;
    A[74] = A[74] - A[41]*tmp;
    A[75] = A[75] - A[42]*tmp;
    A[76] = A[76] - A[43]*tmp;
    tmp = A[80];
    A[81] = A[81] - A[37]*tmp;
    A[82] = A[82] - A[38]*tmp;
    A[83] = A[83] - A[39]*tmp;
    A[84] = A[84] - A[40]*tmp;
    A[85] = A[85] - A[41]*tmp;
    A[86] = A[86] - A[42]*tmp;
    A[87] = A[87] - A[43]*tmp;
    tmp = A[91];
    A[92] = A[92] - A[37]*tmp;
    A[93] = A[93] - A[38]*tmp;
    A[94] = A[94] - A[39]*tmp;
    A[95] = A[95] - A[40]*tmp;
    A[96] = A[96] - A[41]*tmp;
    A[97] = A[97] - A[42]*tmp;
    A[98] = A[98] - A[43]*tmp;
    tmp = A[102];
    A[103] = A[103] - A[37]*tmp;
    A[104] = A[104] - A[38]*tmp;
    A[105] = A[105] - A[39]*tmp;
    A[106] = A[106] - A[40]*tmp;
    A[107] = A[107] - A[41]*tmp;
    A[108] = A[108] - A[42]*tmp;
    A[109] = A[109] - A[43]*tmp;
    tmp = A[113];
    A[114] = A[114] - A[37]*tmp;
    A[115] = A[115] - A[38]*tmp;
    A[116] = A[116] - A[39]*tmp;
    A[117] = A[117] - A[40]*tmp;
    A[118] = A[118] - A[41]*tmp;
    A[119] = A[119] - A[42]*tmp;
    A[120] = A[120] - A[43]*tmp;
    i_max = 4;
    a_max = abs(A[48]);
    if ( a_max < abs( A[49] ) ) { a_max = abs(A[49]); i_max = 5; }
    if ( a_max < abs( A[50] ) ) { a_max = abs(A[50]); i_max = 6; }
    if ( a_max < abs( A[51] ) ) { a_max = abs(A[51]); i_max = 7; }
    if ( a_max < abs( A[52] ) ) { a_max = abs(A[52]); i_max = 8; }
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 9; }
    if ( a_max < abs( A[54] ) ) { a_max = abs(A[54]); i_max = 10; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[15], A[i_max+11] );
    std::swap( A[26], A[i_max+22] );
    std::swap( A[37], A[i_max+33] );
    std::swap( A[48], A[i_max+44] );
    std::swap( A[59], A[i_max+55] );
    std::swap( A[70], A[i_max+66] );
    std::swap( A[81], A[i_max+77] );
    std::swap( A[92], A[i_max+88] );
    std::swap( A[103], A[i_max+99] );
    std::swap( A[114], A[i_max+110] );
    P[4] = i_max + 1;
    tmp = A[48];
    A[49] = A[49] / tmp;
    A[50] = A[50] / tmp;
    A[51] = A[51] / tmp;
    A[52] = A[52] / tmp;
    A[53] = A[53] / tmp;
    A[54] = A[54] / tmp;
    tmp = A[59];
    A[60] = A[60] - A[49]*tmp;
    A[61] = A[61] - A[50]*tmp;
    A[62] = A[62] - A[51]*tmp;
    A[63] = A[63] - A[52]*tmp;
    A[64] = A[64] - A[53]*tmp;
    A[65] = A[65] - A[54]*tmp;
    tmp = A[70];
    A[71] = A[71] - A[49]*tmp;
    A[72] = A[72] - A[50]*tmp;
    A[73] = A[73] - A[51]*tmp;
    A[74] = A[74] - A[52]*tmp;
    A[75] = A[75] - A[53]*tmp;
    A[76] = A[76] - A[54]*tmp;
    tmp = A[81];
    A[82] = A[82] - A[49]*tmp;
    A[83] = A[83] - A[50]*tmp;
    A[84] = A[84] - A[51]*tmp;
    A[85] = A[85] - A[52]*tmp;
    A[86] = A[86] - A[53]*tmp;
    A[87] = A[87] - A[54]*tmp;
    tmp = A[92];
    A[93] = A[93] - A[49]*tmp;
    A[94] = A[94] - A[50]*tmp;
    A[95] = A[95] - A[51]*tmp;
    A[96] = A[96] - A[52]*tmp;
    A[97] = A[97] - A[53]*tmp;
    A[98] = A[98] - A[54]*tmp;
    tmp = A[103];
    A[104] = A[104] - A[49]*tmp;
    A[105] = A[105] - A[50]*tmp;
    A[106] = A[106] - A[51]*tmp;
    A[107] = A[107] - A[52]*tmp;
    A[108] = A[108] - A[53]*tmp;
    A[109] = A[109] - A[54]*tmp;
    tmp = A[114];
    A[115] = A[115] - A[49]*tmp;
    A[116] = A[116] - A[50]*tmp;
    A[117] = A[117] - A[51]*tmp;
    A[118] = A[118] - A[52]*tmp;
    A[119] = A[119] - A[53]*tmp;
    A[120] = A[120] - A[54]*tmp;
    i_max = 5;
    a_max = abs(A[60]);
    if ( a_max < abs( A[61] ) ) { a_max = abs(A[61]); i_max = 6; }
    if ( a_max < abs( A[62] ) ) { a_max = abs(A[62]); i_max = 7; }
    if ( a_max < abs( A[63] ) ) { a_max = abs(A[63]); i_max = 8; }
    if ( a_max < abs( A[64] ) ) { a_max = abs(A[64]); i_max = 9; }
    if ( a_max < abs( A[65] ) ) { a_max = abs(A[65]); i_max = 10; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[16], A[i_max+11] );
    std::swap( A[27], A[i_max+22] );
    std::swap( A[38], A[i_max+33] );
    std::swap( A[49], A[i_max+44] );
    std::swap( A[60], A[i_max+55] );
    std::swap( A[71], A[i_max+66] );
    std::swap( A[82], A[i_max+77] );
    std::swap( A[93], A[i_max+88] );
    std::swap( A[104], A[i_max+99] );
    std::swap( A[115], A[i_max+110] );
    P[5] = i_max + 1;
    tmp = A[60];
    A[61] = A[61] / tmp;
    A[62] = A[62] / tmp;
    A[63] = A[63] / tmp;
    A[64] = A[64] / tmp;
    A[65] = A[65] / tmp;
    tmp = A[71];
    A[72] = A[72] - A[61]*tmp;
    A[73] = A[73] - A[62]*tmp;
    A[74] = A[74] - A[63]*tmp;
    A[75] = A[75] - A[64]*tmp;
    A[76] = A[76] - A[65]*tmp;
    tmp = A[82];
    A[83] = A[83] - A[61]*tmp;
    A[84] = A[84] - A[62]*tmp;
    A[85] = A[85] - A[63]*tmp;
    A[86] = A[86] - A[64]*tmp;
    A[87] = A[87] - A[65]*tmp;
    tmp = A[93];
    A[94] = A[94] - A[61]*tmp;
    A[95] = A[95] - A[62]*tmp;
    A[96] = A[96] - A[63]*tmp;
    A[97] = A[97] - A[64]*tmp;
    A[98] = A[98] - A[65]*tmp;
    tmp = A[104];
    A[105] = A[105] - A[61]*tmp;
    A[106] = A[106] - A[62]*tmp;
    A[107] = A[107] - A[63]*tmp;
    A[108] = A[108] - A[64]*tmp;
    A[109] = A[109] - A[65]*tmp;
    tmp = A[115];
    A[116] = A[116] - A[61]*tmp;
    A[117] = A[117] - A[62]*tmp;
    A[118] = A[118] - A[63]*tmp;
    A[119] = A[119] - A[64]*tmp;
    A[120] = A[120] - A[65]*tmp;
    i_max = 6;
    a_max = abs(A[72]);
    if ( a_max < abs( A[73] ) ) { a_max = abs(A[73]); i_max = 7; }
    if ( a_max < abs( A[74] ) ) { a_max = abs(A[74]); i_max = 8; }
    if ( a_max < abs( A[75] ) ) { a_max = abs(A[75]); i_max = 9; }
    if ( a_max < abs( A[76] ) ) { a_max = abs(A[76]); i_max = 10; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[17], A[i_max+11] );
    std::swap( A[28], A[i_max+22] );
    std::swap( A[39], A[i_max+33] );
    std::swap( A[50], A[i_max+44] );
    std::swap( A[61], A[i_max+55] );
    std::swap( A[72], A[i_max+66] );
    std::swap( A[83], A[i_max+77] );
    std::swap( A[94], A[i_max+88] );
    std::swap( A[105], A[i_max+99] );
    std::swap( A[116], A[i_max+110] );
    P[6] = i_max + 1;
    tmp = A[72];
    A[73] = A[73] / tmp;
    A[74] = A[74] / tmp;
    A[75] = A[75] / tmp;
    A[76] = A[76] / tmp;
    tmp = A[83];
    A[84] = A[84] - A[73]*tmp;
    A[85] = A[85] - A[74]*tmp;
    A[86] = A[86] - A[75]*tmp;
    A[87] = A[87] - A[76]*tmp;
    tmp = A[94];
    A[95] = A[95] - A[73]*tmp;
    A[96] = A[96] - A[74]*tmp;
    A[97] = A[97] - A[75]*tmp;
    A[98] = A[98] - A[76]*tmp;
    tmp = A[105];
    A[106] = A[106] - A[73]*tmp;
    A[107] = A[107] - A[74]*tmp;
    A[108] = A[108] - A[75]*tmp;
    A[109] = A[109] - A[76]*tmp;
    tmp = A[116];
    A[117] = A[117] - A[73]*tmp;
    A[118] = A[118] - A[74]*tmp;
    A[119] = A[119] - A[75]*tmp;
    A[120] = A[120] - A[76]*tmp;
    i_max = 7;
    a_max = abs(A[84]);
    if ( a_max < abs( A[85] ) ) { a_max = abs(A[85]); i_max = 8; }
    if ( a_max < abs( A[86] ) ) { a_max = abs(A[86]); i_max = 9; }
    if ( a_max < abs( A[87] ) ) { a_max = abs(A[87]); i_max = 10; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[18], A[i_max+11] );
    std::swap( A[29], A[i_max+22] );
    std::swap( A[40], A[i_max+33] );
    std::swap( A[51], A[i_max+44] );
    std::swap( A[62], A[i_max+55] );
    std::swap( A[73], A[i_max+66] );
    std::swap( A[84], A[i_max+77] );
    std::swap( A[95], A[i_max+88] );
    std::swap( A[106], A[i_max+99] );
    std::swap( A[117], A[i_max+110] );
    P[7] = i_max + 1;
    tmp = A[84];
    A[85] = A[85] / tmp;
    A[86] = A[86] / tmp;
    A[87] = A[87] / tmp;
    tmp = A[95];
    A[96] = A[96] - A[85]*tmp;
    A[97] = A[97] - A[86]*tmp;
    A[98] = A[98] - A[87]*tmp;
    tmp = A[106];
    A[107] = A[107] - A[85]*tmp;
    A[108] = A[108] - A[86]*tmp;
    A[109] = A[109] - A[87]*tmp;
    tmp = A[117];
    A[118] = A[118] - A[85]*tmp;
    A[119] = A[119] - A[86]*tmp;
    A[120] = A[120] - A[87]*tmp;
    i_max = 8;
    a_max = abs(A[96]);
    if ( a_max < abs( A[97] ) ) { a_max = abs(A[97]); i_max = 9; }
    if ( a_max < abs( A[98] ) ) { a_max = abs(A[98]); i_max = 10; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[19], A[i_max+11] );
    std::swap( A[30], A[i_max+22] );
    std::swap( A[41], A[i_max+33] );
    std::swap( A[52], A[i_max+44] );
    std::swap( A[63], A[i_max+55] );
    std::swap( A[74], A[i_max+66] );
    std::swap( A[85], A[i_max+77] );
    std::swap( A[96], A[i_max+88] );
    std::swap( A[107], A[i_max+99] );
    std::swap( A[118], A[i_max+110] );
    P[8] = i_max + 1;
    tmp = A[96];
    A[97] = A[97] / tmp;
    A[98] = A[98] / tmp;
    tmp = A[107];
    A[108] = A[108] - A[97]*tmp;
    A[109] = A[109] - A[98]*tmp;
    tmp = A[118];
    A[119] = A[119] - A[97]*tmp;
    A[120] = A[120] - A[98]*tmp;
    i_max = 9;
    a_max = abs(A[108]);
    if ( a_max < abs( A[109] ) ) { a_max = abs(A[109]); i_max = 10; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[20], A[i_max+11] );
    std::swap( A[31], A[i_max+22] );
    std::swap( A[42], A[i_max+33] );
    std::swap( A[53], A[i_max+44] );
    std::swap( A[64], A[i_max+55] );
    std::swap( A[75], A[i_max+66] );
    std::swap( A[86], A[i_max+77] );
    std::swap( A[97], A[i_max+88] );
    std::swap( A[108], A[i_max+99] );
    std::swap( A[119], A[i_max+110] );
    P[9] = i_max + 1;
    tmp = A[108];
    A[109] = A[109] / tmp;
    tmp = A[119];
    A[120] = A[120] - A[109]*tmp;
    P[10] = 11;
}

void lu_12( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 11; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[12], A[i_max+12] );
    std::swap( A[24], A[i_max+24] );
    std::swap( A[36], A[i_max+36] );
    std::swap( A[48], A[i_max+48] );
    std::swap( A[60], A[i_max+60] );
    std::swap( A[72], A[i_max+72] );
    std::swap( A[84], A[i_max+84] );
    std::swap( A[96], A[i_max+96] );
    std::swap( A[108], A[i_max+108] );
    std::swap( A[120], A[i_max+120] );
    std::swap( A[132], A[i_max+132] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    tmp = A[12];
    A[13] = A[13] - A[1]*tmp;
    A[14] = A[14] - A[2]*tmp;
    A[15] = A[15] - A[3]*tmp;
    A[16] = A[16] - A[4]*tmp;
    A[17] = A[17] - A[5]*tmp;
    A[18] = A[18] - A[6]*tmp;
    A[19] = A[19] - A[7]*tmp;
    A[20] = A[20] - A[8]*tmp;
    A[21] = A[21] - A[9]*tmp;
    A[22] = A[22] - A[10]*tmp;
    A[23] = A[23] - A[11]*tmp;
    tmp = A[24];
    A[25] = A[25] - A[1]*tmp;
    A[26] = A[26] - A[2]*tmp;
    A[27] = A[27] - A[3]*tmp;
    A[28] = A[28] - A[4]*tmp;
    A[29] = A[29] - A[5]*tmp;
    A[30] = A[30] - A[6]*tmp;
    A[31] = A[31] - A[7]*tmp;
    A[32] = A[32] - A[8]*tmp;
    A[33] = A[33] - A[9]*tmp;
    A[34] = A[34] - A[10]*tmp;
    A[35] = A[35] - A[11]*tmp;
    tmp = A[36];
    A[37] = A[37] - A[1]*tmp;
    A[38] = A[38] - A[2]*tmp;
    A[39] = A[39] - A[3]*tmp;
    A[40] = A[40] - A[4]*tmp;
    A[41] = A[41] - A[5]*tmp;
    A[42] = A[42] - A[6]*tmp;
    A[43] = A[43] - A[7]*tmp;
    A[44] = A[44] - A[8]*tmp;
    A[45] = A[45] - A[9]*tmp;
    A[46] = A[46] - A[10]*tmp;
    A[47] = A[47] - A[11]*tmp;
    tmp = A[48];
    A[49] = A[49] - A[1]*tmp;
    A[50] = A[50] - A[2]*tmp;
    A[51] = A[51] - A[3]*tmp;
    A[52] = A[52] - A[4]*tmp;
    A[53] = A[53] - A[5]*tmp;
    A[54] = A[54] - A[6]*tmp;
    A[55] = A[55] - A[7]*tmp;
    A[56] = A[56] - A[8]*tmp;
    A[57] = A[57] - A[9]*tmp;
    A[58] = A[58] - A[10]*tmp;
    A[59] = A[59] - A[11]*tmp;
    tmp = A[60];
    A[61] = A[61] - A[1]*tmp;
    A[62] = A[62] - A[2]*tmp;
    A[63] = A[63] - A[3]*tmp;
    A[64] = A[64] - A[4]*tmp;
    A[65] = A[65] - A[5]*tmp;
    A[66] = A[66] - A[6]*tmp;
    A[67] = A[67] - A[7]*tmp;
    A[68] = A[68] - A[8]*tmp;
    A[69] = A[69] - A[9]*tmp;
    A[70] = A[70] - A[10]*tmp;
    A[71] = A[71] - A[11]*tmp;
    tmp = A[72];
    A[73] = A[73] - A[1]*tmp;
    A[74] = A[74] - A[2]*tmp;
    A[75] = A[75] - A[3]*tmp;
    A[76] = A[76] - A[4]*tmp;
    A[77] = A[77] - A[5]*tmp;
    A[78] = A[78] - A[6]*tmp;
    A[79] = A[79] - A[7]*tmp;
    A[80] = A[80] - A[8]*tmp;
    A[81] = A[81] - A[9]*tmp;
    A[82] = A[82] - A[10]*tmp;
    A[83] = A[83] - A[11]*tmp;
    tmp = A[84];
    A[85] = A[85] - A[1]*tmp;
    A[86] = A[86] - A[2]*tmp;
    A[87] = A[87] - A[3]*tmp;
    A[88] = A[88] - A[4]*tmp;
    A[89] = A[89] - A[5]*tmp;
    A[90] = A[90] - A[6]*tmp;
    A[91] = A[91] - A[7]*tmp;
    A[92] = A[92] - A[8]*tmp;
    A[93] = A[93] - A[9]*tmp;
    A[94] = A[94] - A[10]*tmp;
    A[95] = A[95] - A[11]*tmp;
    tmp = A[96];
    A[97] = A[97] - A[1]*tmp;
    A[98] = A[98] - A[2]*tmp;
    A[99] = A[99] - A[3]*tmp;
    A[100] = A[100] - A[4]*tmp;
    A[101] = A[101] - A[5]*tmp;
    A[102] = A[102] - A[6]*tmp;
    A[103] = A[103] - A[7]*tmp;
    A[104] = A[104] - A[8]*tmp;
    A[105] = A[105] - A[9]*tmp;
    A[106] = A[106] - A[10]*tmp;
    A[107] = A[107] - A[11]*tmp;
    tmp = A[108];
    A[109] = A[109] - A[1]*tmp;
    A[110] = A[110] - A[2]*tmp;
    A[111] = A[111] - A[3]*tmp;
    A[112] = A[112] - A[4]*tmp;
    A[113] = A[113] - A[5]*tmp;
    A[114] = A[114] - A[6]*tmp;
    A[115] = A[115] - A[7]*tmp;
    A[116] = A[116] - A[8]*tmp;
    A[117] = A[117] - A[9]*tmp;
    A[118] = A[118] - A[10]*tmp;
    A[119] = A[119] - A[11]*tmp;
    tmp = A[120];
    A[121] = A[121] - A[1]*tmp;
    A[122] = A[122] - A[2]*tmp;
    A[123] = A[123] - A[3]*tmp;
    A[124] = A[124] - A[4]*tmp;
    A[125] = A[125] - A[5]*tmp;
    A[126] = A[126] - A[6]*tmp;
    A[127] = A[127] - A[7]*tmp;
    A[128] = A[128] - A[8]*tmp;
    A[129] = A[129] - A[9]*tmp;
    A[130] = A[130] - A[10]*tmp;
    A[131] = A[131] - A[11]*tmp;
    tmp = A[132];
    A[133] = A[133] - A[1]*tmp;
    A[134] = A[134] - A[2]*tmp;
    A[135] = A[135] - A[3]*tmp;
    A[136] = A[136] - A[4]*tmp;
    A[137] = A[137] - A[5]*tmp;
    A[138] = A[138] - A[6]*tmp;
    A[139] = A[139] - A[7]*tmp;
    A[140] = A[140] - A[8]*tmp;
    A[141] = A[141] - A[9]*tmp;
    A[142] = A[142] - A[10]*tmp;
    A[143] = A[143] - A[11]*tmp;
    i_max = 1;
    a_max = abs(A[13]);
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 2; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 3; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 4; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 5; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 6; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 7; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 8; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 9; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 10; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 11; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[13], A[i_max+12] );
    std::swap( A[25], A[i_max+24] );
    std::swap( A[37], A[i_max+36] );
    std::swap( A[49], A[i_max+48] );
    std::swap( A[61], A[i_max+60] );
    std::swap( A[73], A[i_max+72] );
    std::swap( A[85], A[i_max+84] );
    std::swap( A[97], A[i_max+96] );
    std::swap( A[109], A[i_max+108] );
    std::swap( A[121], A[i_max+120] );
    std::swap( A[133], A[i_max+132] );
    P[1] = i_max + 1;
    tmp = A[13];
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    tmp = A[25];
    A[26] = A[26] - A[14]*tmp;
    A[27] = A[27] - A[15]*tmp;
    A[28] = A[28] - A[16]*tmp;
    A[29] = A[29] - A[17]*tmp;
    A[30] = A[30] - A[18]*tmp;
    A[31] = A[31] - A[19]*tmp;
    A[32] = A[32] - A[20]*tmp;
    A[33] = A[33] - A[21]*tmp;
    A[34] = A[34] - A[22]*tmp;
    A[35] = A[35] - A[23]*tmp;
    tmp = A[37];
    A[38] = A[38] - A[14]*tmp;
    A[39] = A[39] - A[15]*tmp;
    A[40] = A[40] - A[16]*tmp;
    A[41] = A[41] - A[17]*tmp;
    A[42] = A[42] - A[18]*tmp;
    A[43] = A[43] - A[19]*tmp;
    A[44] = A[44] - A[20]*tmp;
    A[45] = A[45] - A[21]*tmp;
    A[46] = A[46] - A[22]*tmp;
    A[47] = A[47] - A[23]*tmp;
    tmp = A[49];
    A[50] = A[50] - A[14]*tmp;
    A[51] = A[51] - A[15]*tmp;
    A[52] = A[52] - A[16]*tmp;
    A[53] = A[53] - A[17]*tmp;
    A[54] = A[54] - A[18]*tmp;
    A[55] = A[55] - A[19]*tmp;
    A[56] = A[56] - A[20]*tmp;
    A[57] = A[57] - A[21]*tmp;
    A[58] = A[58] - A[22]*tmp;
    A[59] = A[59] - A[23]*tmp;
    tmp = A[61];
    A[62] = A[62] - A[14]*tmp;
    A[63] = A[63] - A[15]*tmp;
    A[64] = A[64] - A[16]*tmp;
    A[65] = A[65] - A[17]*tmp;
    A[66] = A[66] - A[18]*tmp;
    A[67] = A[67] - A[19]*tmp;
    A[68] = A[68] - A[20]*tmp;
    A[69] = A[69] - A[21]*tmp;
    A[70] = A[70] - A[22]*tmp;
    A[71] = A[71] - A[23]*tmp;
    tmp = A[73];
    A[74] = A[74] - A[14]*tmp;
    A[75] = A[75] - A[15]*tmp;
    A[76] = A[76] - A[16]*tmp;
    A[77] = A[77] - A[17]*tmp;
    A[78] = A[78] - A[18]*tmp;
    A[79] = A[79] - A[19]*tmp;
    A[80] = A[80] - A[20]*tmp;
    A[81] = A[81] - A[21]*tmp;
    A[82] = A[82] - A[22]*tmp;
    A[83] = A[83] - A[23]*tmp;
    tmp = A[85];
    A[86] = A[86] - A[14]*tmp;
    A[87] = A[87] - A[15]*tmp;
    A[88] = A[88] - A[16]*tmp;
    A[89] = A[89] - A[17]*tmp;
    A[90] = A[90] - A[18]*tmp;
    A[91] = A[91] - A[19]*tmp;
    A[92] = A[92] - A[20]*tmp;
    A[93] = A[93] - A[21]*tmp;
    A[94] = A[94] - A[22]*tmp;
    A[95] = A[95] - A[23]*tmp;
    tmp = A[97];
    A[98] = A[98] - A[14]*tmp;
    A[99] = A[99] - A[15]*tmp;
    A[100] = A[100] - A[16]*tmp;
    A[101] = A[101] - A[17]*tmp;
    A[102] = A[102] - A[18]*tmp;
    A[103] = A[103] - A[19]*tmp;
    A[104] = A[104] - A[20]*tmp;
    A[105] = A[105] - A[21]*tmp;
    A[106] = A[106] - A[22]*tmp;
    A[107] = A[107] - A[23]*tmp;
    tmp = A[109];
    A[110] = A[110] - A[14]*tmp;
    A[111] = A[111] - A[15]*tmp;
    A[112] = A[112] - A[16]*tmp;
    A[113] = A[113] - A[17]*tmp;
    A[114] = A[114] - A[18]*tmp;
    A[115] = A[115] - A[19]*tmp;
    A[116] = A[116] - A[20]*tmp;
    A[117] = A[117] - A[21]*tmp;
    A[118] = A[118] - A[22]*tmp;
    A[119] = A[119] - A[23]*tmp;
    tmp = A[121];
    A[122] = A[122] - A[14]*tmp;
    A[123] = A[123] - A[15]*tmp;
    A[124] = A[124] - A[16]*tmp;
    A[125] = A[125] - A[17]*tmp;
    A[126] = A[126] - A[18]*tmp;
    A[127] = A[127] - A[19]*tmp;
    A[128] = A[128] - A[20]*tmp;
    A[129] = A[129] - A[21]*tmp;
    A[130] = A[130] - A[22]*tmp;
    A[131] = A[131] - A[23]*tmp;
    tmp = A[133];
    A[134] = A[134] - A[14]*tmp;
    A[135] = A[135] - A[15]*tmp;
    A[136] = A[136] - A[16]*tmp;
    A[137] = A[137] - A[17]*tmp;
    A[138] = A[138] - A[18]*tmp;
    A[139] = A[139] - A[19]*tmp;
    A[140] = A[140] - A[20]*tmp;
    A[141] = A[141] - A[21]*tmp;
    A[142] = A[142] - A[22]*tmp;
    A[143] = A[143] - A[23]*tmp;
    i_max = 2;
    a_max = abs(A[26]);
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 3; }
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 4; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 5; }
    if ( a_max < abs( A[30] ) ) { a_max = abs(A[30]); i_max = 6; }
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 7; }
    if ( a_max < abs( A[32] ) ) { a_max = abs(A[32]); i_max = 8; }
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 9; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 10; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 11; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[14], A[i_max+12] );
    std::swap( A[26], A[i_max+24] );
    std::swap( A[38], A[i_max+36] );
    std::swap( A[50], A[i_max+48] );
    std::swap( A[62], A[i_max+60] );
    std::swap( A[74], A[i_max+72] );
    std::swap( A[86], A[i_max+84] );
    std::swap( A[98], A[i_max+96] );
    std::swap( A[110], A[i_max+108] );
    std::swap( A[122], A[i_max+120] );
    std::swap( A[134], A[i_max+132] );
    P[2] = i_max + 1;
    tmp = A[26];
    A[27] = A[27] / tmp;
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    A[30] = A[30] / tmp;
    A[31] = A[31] / tmp;
    A[32] = A[32] / tmp;
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    tmp = A[38];
    A[39] = A[39] - A[27]*tmp;
    A[40] = A[40] - A[28]*tmp;
    A[41] = A[41] - A[29]*tmp;
    A[42] = A[42] - A[30]*tmp;
    A[43] = A[43] - A[31]*tmp;
    A[44] = A[44] - A[32]*tmp;
    A[45] = A[45] - A[33]*tmp;
    A[46] = A[46] - A[34]*tmp;
    A[47] = A[47] - A[35]*tmp;
    tmp = A[50];
    A[51] = A[51] - A[27]*tmp;
    A[52] = A[52] - A[28]*tmp;
    A[53] = A[53] - A[29]*tmp;
    A[54] = A[54] - A[30]*tmp;
    A[55] = A[55] - A[31]*tmp;
    A[56] = A[56] - A[32]*tmp;
    A[57] = A[57] - A[33]*tmp;
    A[58] = A[58] - A[34]*tmp;
    A[59] = A[59] - A[35]*tmp;
    tmp = A[62];
    A[63] = A[63] - A[27]*tmp;
    A[64] = A[64] - A[28]*tmp;
    A[65] = A[65] - A[29]*tmp;
    A[66] = A[66] - A[30]*tmp;
    A[67] = A[67] - A[31]*tmp;
    A[68] = A[68] - A[32]*tmp;
    A[69] = A[69] - A[33]*tmp;
    A[70] = A[70] - A[34]*tmp;
    A[71] = A[71] - A[35]*tmp;
    tmp = A[74];
    A[75] = A[75] - A[27]*tmp;
    A[76] = A[76] - A[28]*tmp;
    A[77] = A[77] - A[29]*tmp;
    A[78] = A[78] - A[30]*tmp;
    A[79] = A[79] - A[31]*tmp;
    A[80] = A[80] - A[32]*tmp;
    A[81] = A[81] - A[33]*tmp;
    A[82] = A[82] - A[34]*tmp;
    A[83] = A[83] - A[35]*tmp;
    tmp = A[86];
    A[87] = A[87] - A[27]*tmp;
    A[88] = A[88] - A[28]*tmp;
    A[89] = A[89] - A[29]*tmp;
    A[90] = A[90] - A[30]*tmp;
    A[91] = A[91] - A[31]*tmp;
    A[92] = A[92] - A[32]*tmp;
    A[93] = A[93] - A[33]*tmp;
    A[94] = A[94] - A[34]*tmp;
    A[95] = A[95] - A[35]*tmp;
    tmp = A[98];
    A[99] = A[99] - A[27]*tmp;
    A[100] = A[100] - A[28]*tmp;
    A[101] = A[101] - A[29]*tmp;
    A[102] = A[102] - A[30]*tmp;
    A[103] = A[103] - A[31]*tmp;
    A[104] = A[104] - A[32]*tmp;
    A[105] = A[105] - A[33]*tmp;
    A[106] = A[106] - A[34]*tmp;
    A[107] = A[107] - A[35]*tmp;
    tmp = A[110];
    A[111] = A[111] - A[27]*tmp;
    A[112] = A[112] - A[28]*tmp;
    A[113] = A[113] - A[29]*tmp;
    A[114] = A[114] - A[30]*tmp;
    A[115] = A[115] - A[31]*tmp;
    A[116] = A[116] - A[32]*tmp;
    A[117] = A[117] - A[33]*tmp;
    A[118] = A[118] - A[34]*tmp;
    A[119] = A[119] - A[35]*tmp;
    tmp = A[122];
    A[123] = A[123] - A[27]*tmp;
    A[124] = A[124] - A[28]*tmp;
    A[125] = A[125] - A[29]*tmp;
    A[126] = A[126] - A[30]*tmp;
    A[127] = A[127] - A[31]*tmp;
    A[128] = A[128] - A[32]*tmp;
    A[129] = A[129] - A[33]*tmp;
    A[130] = A[130] - A[34]*tmp;
    A[131] = A[131] - A[35]*tmp;
    tmp = A[134];
    A[135] = A[135] - A[27]*tmp;
    A[136] = A[136] - A[28]*tmp;
    A[137] = A[137] - A[29]*tmp;
    A[138] = A[138] - A[30]*tmp;
    A[139] = A[139] - A[31]*tmp;
    A[140] = A[140] - A[32]*tmp;
    A[141] = A[141] - A[33]*tmp;
    A[142] = A[142] - A[34]*tmp;
    A[143] = A[143] - A[35]*tmp;
    i_max = 3;
    a_max = abs(A[39]);
    if ( a_max < abs( A[40] ) ) { a_max = abs(A[40]); i_max = 4; }
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 5; }
    if ( a_max < abs( A[42] ) ) { a_max = abs(A[42]); i_max = 6; }
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 7; }
    if ( a_max < abs( A[44] ) ) { a_max = abs(A[44]); i_max = 8; }
    if ( a_max < abs( A[45] ) ) { a_max = abs(A[45]); i_max = 9; }
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 10; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 11; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[15], A[i_max+12] );
    std::swap( A[27], A[i_max+24] );
    std::swap( A[39], A[i_max+36] );
    std::swap( A[51], A[i_max+48] );
    std::swap( A[63], A[i_max+60] );
    std::swap( A[75], A[i_max+72] );
    std::swap( A[87], A[i_max+84] );
    std::swap( A[99], A[i_max+96] );
    std::swap( A[111], A[i_max+108] );
    std::swap( A[123], A[i_max+120] );
    std::swap( A[135], A[i_max+132] );
    P[3] = i_max + 1;
    tmp = A[39];
    A[40] = A[40] / tmp;
    A[41] = A[41] / tmp;
    A[42] = A[42] / tmp;
    A[43] = A[43] / tmp;
    A[44] = A[44] / tmp;
    A[45] = A[45] / tmp;
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    tmp = A[51];
    A[52] = A[52] - A[40]*tmp;
    A[53] = A[53] - A[41]*tmp;
    A[54] = A[54] - A[42]*tmp;
    A[55] = A[55] - A[43]*tmp;
    A[56] = A[56] - A[44]*tmp;
    A[57] = A[57] - A[45]*tmp;
    A[58] = A[58] - A[46]*tmp;
    A[59] = A[59] - A[47]*tmp;
    tmp = A[63];
    A[64] = A[64] - A[40]*tmp;
    A[65] = A[65] - A[41]*tmp;
    A[66] = A[66] - A[42]*tmp;
    A[67] = A[67] - A[43]*tmp;
    A[68] = A[68] - A[44]*tmp;
    A[69] = A[69] - A[45]*tmp;
    A[70] = A[70] - A[46]*tmp;
    A[71] = A[71] - A[47]*tmp;
    tmp = A[75];
    A[76] = A[76] - A[40]*tmp;
    A[77] = A[77] - A[41]*tmp;
    A[78] = A[78] - A[42]*tmp;
    A[79] = A[79] - A[43]*tmp;
    A[80] = A[80] - A[44]*tmp;
    A[81] = A[81] - A[45]*tmp;
    A[82] = A[82] - A[46]*tmp;
    A[83] = A[83] - A[47]*tmp;
    tmp = A[87];
    A[88] = A[88] - A[40]*tmp;
    A[89] = A[89] - A[41]*tmp;
    A[90] = A[90] - A[42]*tmp;
    A[91] = A[91] - A[43]*tmp;
    A[92] = A[92] - A[44]*tmp;
    A[93] = A[93] - A[45]*tmp;
    A[94] = A[94] - A[46]*tmp;
    A[95] = A[95] - A[47]*tmp;
    tmp = A[99];
    A[100] = A[100] - A[40]*tmp;
    A[101] = A[101] - A[41]*tmp;
    A[102] = A[102] - A[42]*tmp;
    A[103] = A[103] - A[43]*tmp;
    A[104] = A[104] - A[44]*tmp;
    A[105] = A[105] - A[45]*tmp;
    A[106] = A[106] - A[46]*tmp;
    A[107] = A[107] - A[47]*tmp;
    tmp = A[111];
    A[112] = A[112] - A[40]*tmp;
    A[113] = A[113] - A[41]*tmp;
    A[114] = A[114] - A[42]*tmp;
    A[115] = A[115] - A[43]*tmp;
    A[116] = A[116] - A[44]*tmp;
    A[117] = A[117] - A[45]*tmp;
    A[118] = A[118] - A[46]*tmp;
    A[119] = A[119] - A[47]*tmp;
    tmp = A[123];
    A[124] = A[124] - A[40]*tmp;
    A[125] = A[125] - A[41]*tmp;
    A[126] = A[126] - A[42]*tmp;
    A[127] = A[127] - A[43]*tmp;
    A[128] = A[128] - A[44]*tmp;
    A[129] = A[129] - A[45]*tmp;
    A[130] = A[130] - A[46]*tmp;
    A[131] = A[131] - A[47]*tmp;
    tmp = A[135];
    A[136] = A[136] - A[40]*tmp;
    A[137] = A[137] - A[41]*tmp;
    A[138] = A[138] - A[42]*tmp;
    A[139] = A[139] - A[43]*tmp;
    A[140] = A[140] - A[44]*tmp;
    A[141] = A[141] - A[45]*tmp;
    A[142] = A[142] - A[46]*tmp;
    A[143] = A[143] - A[47]*tmp;
    i_max = 4;
    a_max = abs(A[52]);
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 5; }
    if ( a_max < abs( A[54] ) ) { a_max = abs(A[54]); i_max = 6; }
    if ( a_max < abs( A[55] ) ) { a_max = abs(A[55]); i_max = 7; }
    if ( a_max < abs( A[56] ) ) { a_max = abs(A[56]); i_max = 8; }
    if ( a_max < abs( A[57] ) ) { a_max = abs(A[57]); i_max = 9; }
    if ( a_max < abs( A[58] ) ) { a_max = abs(A[58]); i_max = 10; }
    if ( a_max < abs( A[59] ) ) { a_max = abs(A[59]); i_max = 11; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[16], A[i_max+12] );
    std::swap( A[28], A[i_max+24] );
    std::swap( A[40], A[i_max+36] );
    std::swap( A[52], A[i_max+48] );
    std::swap( A[64], A[i_max+60] );
    std::swap( A[76], A[i_max+72] );
    std::swap( A[88], A[i_max+84] );
    std::swap( A[100], A[i_max+96] );
    std::swap( A[112], A[i_max+108] );
    std::swap( A[124], A[i_max+120] );
    std::swap( A[136], A[i_max+132] );
    P[4] = i_max + 1;
    tmp = A[52];
    A[53] = A[53] / tmp;
    A[54] = A[54] / tmp;
    A[55] = A[55] / tmp;
    A[56] = A[56] / tmp;
    A[57] = A[57] / tmp;
    A[58] = A[58] / tmp;
    A[59] = A[59] / tmp;
    tmp = A[64];
    A[65] = A[65] - A[53]*tmp;
    A[66] = A[66] - A[54]*tmp;
    A[67] = A[67] - A[55]*tmp;
    A[68] = A[68] - A[56]*tmp;
    A[69] = A[69] - A[57]*tmp;
    A[70] = A[70] - A[58]*tmp;
    A[71] = A[71] - A[59]*tmp;
    tmp = A[76];
    A[77] = A[77] - A[53]*tmp;
    A[78] = A[78] - A[54]*tmp;
    A[79] = A[79] - A[55]*tmp;
    A[80] = A[80] - A[56]*tmp;
    A[81] = A[81] - A[57]*tmp;
    A[82] = A[82] - A[58]*tmp;
    A[83] = A[83] - A[59]*tmp;
    tmp = A[88];
    A[89] = A[89] - A[53]*tmp;
    A[90] = A[90] - A[54]*tmp;
    A[91] = A[91] - A[55]*tmp;
    A[92] = A[92] - A[56]*tmp;
    A[93] = A[93] - A[57]*tmp;
    A[94] = A[94] - A[58]*tmp;
    A[95] = A[95] - A[59]*tmp;
    tmp = A[100];
    A[101] = A[101] - A[53]*tmp;
    A[102] = A[102] - A[54]*tmp;
    A[103] = A[103] - A[55]*tmp;
    A[104] = A[104] - A[56]*tmp;
    A[105] = A[105] - A[57]*tmp;
    A[106] = A[106] - A[58]*tmp;
    A[107] = A[107] - A[59]*tmp;
    tmp = A[112];
    A[113] = A[113] - A[53]*tmp;
    A[114] = A[114] - A[54]*tmp;
    A[115] = A[115] - A[55]*tmp;
    A[116] = A[116] - A[56]*tmp;
    A[117] = A[117] - A[57]*tmp;
    A[118] = A[118] - A[58]*tmp;
    A[119] = A[119] - A[59]*tmp;
    tmp = A[124];
    A[125] = A[125] - A[53]*tmp;
    A[126] = A[126] - A[54]*tmp;
    A[127] = A[127] - A[55]*tmp;
    A[128] = A[128] - A[56]*tmp;
    A[129] = A[129] - A[57]*tmp;
    A[130] = A[130] - A[58]*tmp;
    A[131] = A[131] - A[59]*tmp;
    tmp = A[136];
    A[137] = A[137] - A[53]*tmp;
    A[138] = A[138] - A[54]*tmp;
    A[139] = A[139] - A[55]*tmp;
    A[140] = A[140] - A[56]*tmp;
    A[141] = A[141] - A[57]*tmp;
    A[142] = A[142] - A[58]*tmp;
    A[143] = A[143] - A[59]*tmp;
    i_max = 5;
    a_max = abs(A[65]);
    if ( a_max < abs( A[66] ) ) { a_max = abs(A[66]); i_max = 6; }
    if ( a_max < abs( A[67] ) ) { a_max = abs(A[67]); i_max = 7; }
    if ( a_max < abs( A[68] ) ) { a_max = abs(A[68]); i_max = 8; }
    if ( a_max < abs( A[69] ) ) { a_max = abs(A[69]); i_max = 9; }
    if ( a_max < abs( A[70] ) ) { a_max = abs(A[70]); i_max = 10; }
    if ( a_max < abs( A[71] ) ) { a_max = abs(A[71]); i_max = 11; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[17], A[i_max+12] );
    std::swap( A[29], A[i_max+24] );
    std::swap( A[41], A[i_max+36] );
    std::swap( A[53], A[i_max+48] );
    std::swap( A[65], A[i_max+60] );
    std::swap( A[77], A[i_max+72] );
    std::swap( A[89], A[i_max+84] );
    std::swap( A[101], A[i_max+96] );
    std::swap( A[113], A[i_max+108] );
    std::swap( A[125], A[i_max+120] );
    std::swap( A[137], A[i_max+132] );
    P[5] = i_max + 1;
    tmp = A[65];
    A[66] = A[66] / tmp;
    A[67] = A[67] / tmp;
    A[68] = A[68] / tmp;
    A[69] = A[69] / tmp;
    A[70] = A[70] / tmp;
    A[71] = A[71] / tmp;
    tmp = A[77];
    A[78] = A[78] - A[66]*tmp;
    A[79] = A[79] - A[67]*tmp;
    A[80] = A[80] - A[68]*tmp;
    A[81] = A[81] - A[69]*tmp;
    A[82] = A[82] - A[70]*tmp;
    A[83] = A[83] - A[71]*tmp;
    tmp = A[89];
    A[90] = A[90] - A[66]*tmp;
    A[91] = A[91] - A[67]*tmp;
    A[92] = A[92] - A[68]*tmp;
    A[93] = A[93] - A[69]*tmp;
    A[94] = A[94] - A[70]*tmp;
    A[95] = A[95] - A[71]*tmp;
    tmp = A[101];
    A[102] = A[102] - A[66]*tmp;
    A[103] = A[103] - A[67]*tmp;
    A[104] = A[104] - A[68]*tmp;
    A[105] = A[105] - A[69]*tmp;
    A[106] = A[106] - A[70]*tmp;
    A[107] = A[107] - A[71]*tmp;
    tmp = A[113];
    A[114] = A[114] - A[66]*tmp;
    A[115] = A[115] - A[67]*tmp;
    A[116] = A[116] - A[68]*tmp;
    A[117] = A[117] - A[69]*tmp;
    A[118] = A[118] - A[70]*tmp;
    A[119] = A[119] - A[71]*tmp;
    tmp = A[125];
    A[126] = A[126] - A[66]*tmp;
    A[127] = A[127] - A[67]*tmp;
    A[128] = A[128] - A[68]*tmp;
    A[129] = A[129] - A[69]*tmp;
    A[130] = A[130] - A[70]*tmp;
    A[131] = A[131] - A[71]*tmp;
    tmp = A[137];
    A[138] = A[138] - A[66]*tmp;
    A[139] = A[139] - A[67]*tmp;
    A[140] = A[140] - A[68]*tmp;
    A[141] = A[141] - A[69]*tmp;
    A[142] = A[142] - A[70]*tmp;
    A[143] = A[143] - A[71]*tmp;
    i_max = 6;
    a_max = abs(A[78]);
    if ( a_max < abs( A[79] ) ) { a_max = abs(A[79]); i_max = 7; }
    if ( a_max < abs( A[80] ) ) { a_max = abs(A[80]); i_max = 8; }
    if ( a_max < abs( A[81] ) ) { a_max = abs(A[81]); i_max = 9; }
    if ( a_max < abs( A[82] ) ) { a_max = abs(A[82]); i_max = 10; }
    if ( a_max < abs( A[83] ) ) { a_max = abs(A[83]); i_max = 11; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[18], A[i_max+12] );
    std::swap( A[30], A[i_max+24] );
    std::swap( A[42], A[i_max+36] );
    std::swap( A[54], A[i_max+48] );
    std::swap( A[66], A[i_max+60] );
    std::swap( A[78], A[i_max+72] );
    std::swap( A[90], A[i_max+84] );
    std::swap( A[102], A[i_max+96] );
    std::swap( A[114], A[i_max+108] );
    std::swap( A[126], A[i_max+120] );
    std::swap( A[138], A[i_max+132] );
    P[6] = i_max + 1;
    tmp = A[78];
    A[79] = A[79] / tmp;
    A[80] = A[80] / tmp;
    A[81] = A[81] / tmp;
    A[82] = A[82] / tmp;
    A[83] = A[83] / tmp;
    tmp = A[90];
    A[91] = A[91] - A[79]*tmp;
    A[92] = A[92] - A[80]*tmp;
    A[93] = A[93] - A[81]*tmp;
    A[94] = A[94] - A[82]*tmp;
    A[95] = A[95] - A[83]*tmp;
    tmp = A[102];
    A[103] = A[103] - A[79]*tmp;
    A[104] = A[104] - A[80]*tmp;
    A[105] = A[105] - A[81]*tmp;
    A[106] = A[106] - A[82]*tmp;
    A[107] = A[107] - A[83]*tmp;
    tmp = A[114];
    A[115] = A[115] - A[79]*tmp;
    A[116] = A[116] - A[80]*tmp;
    A[117] = A[117] - A[81]*tmp;
    A[118] = A[118] - A[82]*tmp;
    A[119] = A[119] - A[83]*tmp;
    tmp = A[126];
    A[127] = A[127] - A[79]*tmp;
    A[128] = A[128] - A[80]*tmp;
    A[129] = A[129] - A[81]*tmp;
    A[130] = A[130] - A[82]*tmp;
    A[131] = A[131] - A[83]*tmp;
    tmp = A[138];
    A[139] = A[139] - A[79]*tmp;
    A[140] = A[140] - A[80]*tmp;
    A[141] = A[141] - A[81]*tmp;
    A[142] = A[142] - A[82]*tmp;
    A[143] = A[143] - A[83]*tmp;
    i_max = 7;
    a_max = abs(A[91]);
    if ( a_max < abs( A[92] ) ) { a_max = abs(A[92]); i_max = 8; }
    if ( a_max < abs( A[93] ) ) { a_max = abs(A[93]); i_max = 9; }
    if ( a_max < abs( A[94] ) ) { a_max = abs(A[94]); i_max = 10; }
    if ( a_max < abs( A[95] ) ) { a_max = abs(A[95]); i_max = 11; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[19], A[i_max+12] );
    std::swap( A[31], A[i_max+24] );
    std::swap( A[43], A[i_max+36] );
    std::swap( A[55], A[i_max+48] );
    std::swap( A[67], A[i_max+60] );
    std::swap( A[79], A[i_max+72] );
    std::swap( A[91], A[i_max+84] );
    std::swap( A[103], A[i_max+96] );
    std::swap( A[115], A[i_max+108] );
    std::swap( A[127], A[i_max+120] );
    std::swap( A[139], A[i_max+132] );
    P[7] = i_max + 1;
    tmp = A[91];
    A[92] = A[92] / tmp;
    A[93] = A[93] / tmp;
    A[94] = A[94] / tmp;
    A[95] = A[95] / tmp;
    tmp = A[103];
    A[104] = A[104] - A[92]*tmp;
    A[105] = A[105] - A[93]*tmp;
    A[106] = A[106] - A[94]*tmp;
    A[107] = A[107] - A[95]*tmp;
    tmp = A[115];
    A[116] = A[116] - A[92]*tmp;
    A[117] = A[117] - A[93]*tmp;
    A[118] = A[118] - A[94]*tmp;
    A[119] = A[119] - A[95]*tmp;
    tmp = A[127];
    A[128] = A[128] - A[92]*tmp;
    A[129] = A[129] - A[93]*tmp;
    A[130] = A[130] - A[94]*tmp;
    A[131] = A[131] - A[95]*tmp;
    tmp = A[139];
    A[140] = A[140] - A[92]*tmp;
    A[141] = A[141] - A[93]*tmp;
    A[142] = A[142] - A[94]*tmp;
    A[143] = A[143] - A[95]*tmp;
    i_max = 8;
    a_max = abs(A[104]);
    if ( a_max < abs( A[105] ) ) { a_max = abs(A[105]); i_max = 9; }
    if ( a_max < abs( A[106] ) ) { a_max = abs(A[106]); i_max = 10; }
    if ( a_max < abs( A[107] ) ) { a_max = abs(A[107]); i_max = 11; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[20], A[i_max+12] );
    std::swap( A[32], A[i_max+24] );
    std::swap( A[44], A[i_max+36] );
    std::swap( A[56], A[i_max+48] );
    std::swap( A[68], A[i_max+60] );
    std::swap( A[80], A[i_max+72] );
    std::swap( A[92], A[i_max+84] );
    std::swap( A[104], A[i_max+96] );
    std::swap( A[116], A[i_max+108] );
    std::swap( A[128], A[i_max+120] );
    std::swap( A[140], A[i_max+132] );
    P[8] = i_max + 1;
    tmp = A[104];
    A[105] = A[105] / tmp;
    A[106] = A[106] / tmp;
    A[107] = A[107] / tmp;
    tmp = A[116];
    A[117] = A[117] - A[105]*tmp;
    A[118] = A[118] - A[106]*tmp;
    A[119] = A[119] - A[107]*tmp;
    tmp = A[128];
    A[129] = A[129] - A[105]*tmp;
    A[130] = A[130] - A[106]*tmp;
    A[131] = A[131] - A[107]*tmp;
    tmp = A[140];
    A[141] = A[141] - A[105]*tmp;
    A[142] = A[142] - A[106]*tmp;
    A[143] = A[143] - A[107]*tmp;
    i_max = 9;
    a_max = abs(A[117]);
    if ( a_max < abs( A[118] ) ) { a_max = abs(A[118]); i_max = 10; }
    if ( a_max < abs( A[119] ) ) { a_max = abs(A[119]); i_max = 11; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[21], A[i_max+12] );
    std::swap( A[33], A[i_max+24] );
    std::swap( A[45], A[i_max+36] );
    std::swap( A[57], A[i_max+48] );
    std::swap( A[69], A[i_max+60] );
    std::swap( A[81], A[i_max+72] );
    std::swap( A[93], A[i_max+84] );
    std::swap( A[105], A[i_max+96] );
    std::swap( A[117], A[i_max+108] );
    std::swap( A[129], A[i_max+120] );
    std::swap( A[141], A[i_max+132] );
    P[9] = i_max + 1;
    tmp = A[117];
    A[118] = A[118] / tmp;
    A[119] = A[119] / tmp;
    tmp = A[129];
    A[130] = A[130] - A[118]*tmp;
    A[131] = A[131] - A[119]*tmp;
    tmp = A[141];
    A[142] = A[142] - A[118]*tmp;
    A[143] = A[143] - A[119]*tmp;
    i_max = 10;
    a_max = abs(A[130]);
    if ( a_max < abs( A[131] ) ) { a_max = abs(A[131]); i_max = 11; }
    std::swap( A[10], A[i_max+0] );
    std::swap( A[22], A[i_max+12] );
    std::swap( A[34], A[i_max+24] );
    std::swap( A[46], A[i_max+36] );
    std::swap( A[58], A[i_max+48] );
    std::swap( A[70], A[i_max+60] );
    std::swap( A[82], A[i_max+72] );
    std::swap( A[94], A[i_max+84] );
    std::swap( A[106], A[i_max+96] );
    std::swap( A[118], A[i_max+108] );
    std::swap( A[130], A[i_max+120] );
    std::swap( A[142], A[i_max+132] );
    P[10] = i_max + 1;
    tmp = A[130];
    A[131] = A[131] / tmp;
    tmp = A[142];
    A[143] = A[143] - A[131]*tmp;
    P[11] = 12;
}

void lu_13( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 11; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 12; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[13], A[i_max+13] );
    std::swap( A[26], A[i_max+26] );
    std::swap( A[39], A[i_max+39] );
    std::swap( A[52], A[i_max+52] );
    std::swap( A[65], A[i_max+65] );
    std::swap( A[78], A[i_max+78] );
    std::swap( A[91], A[i_max+91] );
    std::swap( A[104], A[i_max+104] );
    std::swap( A[117], A[i_max+117] );
    std::swap( A[130], A[i_max+130] );
    std::swap( A[143], A[i_max+143] );
    std::swap( A[156], A[i_max+156] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    tmp = A[13];
    A[14] = A[14] - A[1]*tmp;
    A[15] = A[15] - A[2]*tmp;
    A[16] = A[16] - A[3]*tmp;
    A[17] = A[17] - A[4]*tmp;
    A[18] = A[18] - A[5]*tmp;
    A[19] = A[19] - A[6]*tmp;
    A[20] = A[20] - A[7]*tmp;
    A[21] = A[21] - A[8]*tmp;
    A[22] = A[22] - A[9]*tmp;
    A[23] = A[23] - A[10]*tmp;
    A[24] = A[24] - A[11]*tmp;
    A[25] = A[25] - A[12]*tmp;
    tmp = A[26];
    A[27] = A[27] - A[1]*tmp;
    A[28] = A[28] - A[2]*tmp;
    A[29] = A[29] - A[3]*tmp;
    A[30] = A[30] - A[4]*tmp;
    A[31] = A[31] - A[5]*tmp;
    A[32] = A[32] - A[6]*tmp;
    A[33] = A[33] - A[7]*tmp;
    A[34] = A[34] - A[8]*tmp;
    A[35] = A[35] - A[9]*tmp;
    A[36] = A[36] - A[10]*tmp;
    A[37] = A[37] - A[11]*tmp;
    A[38] = A[38] - A[12]*tmp;
    tmp = A[39];
    A[40] = A[40] - A[1]*tmp;
    A[41] = A[41] - A[2]*tmp;
    A[42] = A[42] - A[3]*tmp;
    A[43] = A[43] - A[4]*tmp;
    A[44] = A[44] - A[5]*tmp;
    A[45] = A[45] - A[6]*tmp;
    A[46] = A[46] - A[7]*tmp;
    A[47] = A[47] - A[8]*tmp;
    A[48] = A[48] - A[9]*tmp;
    A[49] = A[49] - A[10]*tmp;
    A[50] = A[50] - A[11]*tmp;
    A[51] = A[51] - A[12]*tmp;
    tmp = A[52];
    A[53] = A[53] - A[1]*tmp;
    A[54] = A[54] - A[2]*tmp;
    A[55] = A[55] - A[3]*tmp;
    A[56] = A[56] - A[4]*tmp;
    A[57] = A[57] - A[5]*tmp;
    A[58] = A[58] - A[6]*tmp;
    A[59] = A[59] - A[7]*tmp;
    A[60] = A[60] - A[8]*tmp;
    A[61] = A[61] - A[9]*tmp;
    A[62] = A[62] - A[10]*tmp;
    A[63] = A[63] - A[11]*tmp;
    A[64] = A[64] - A[12]*tmp;
    tmp = A[65];
    A[66] = A[66] - A[1]*tmp;
    A[67] = A[67] - A[2]*tmp;
    A[68] = A[68] - A[3]*tmp;
    A[69] = A[69] - A[4]*tmp;
    A[70] = A[70] - A[5]*tmp;
    A[71] = A[71] - A[6]*tmp;
    A[72] = A[72] - A[7]*tmp;
    A[73] = A[73] - A[8]*tmp;
    A[74] = A[74] - A[9]*tmp;
    A[75] = A[75] - A[10]*tmp;
    A[76] = A[76] - A[11]*tmp;
    A[77] = A[77] - A[12]*tmp;
    tmp = A[78];
    A[79] = A[79] - A[1]*tmp;
    A[80] = A[80] - A[2]*tmp;
    A[81] = A[81] - A[3]*tmp;
    A[82] = A[82] - A[4]*tmp;
    A[83] = A[83] - A[5]*tmp;
    A[84] = A[84] - A[6]*tmp;
    A[85] = A[85] - A[7]*tmp;
    A[86] = A[86] - A[8]*tmp;
    A[87] = A[87] - A[9]*tmp;
    A[88] = A[88] - A[10]*tmp;
    A[89] = A[89] - A[11]*tmp;
    A[90] = A[90] - A[12]*tmp;
    tmp = A[91];
    A[92] = A[92] - A[1]*tmp;
    A[93] = A[93] - A[2]*tmp;
    A[94] = A[94] - A[3]*tmp;
    A[95] = A[95] - A[4]*tmp;
    A[96] = A[96] - A[5]*tmp;
    A[97] = A[97] - A[6]*tmp;
    A[98] = A[98] - A[7]*tmp;
    A[99] = A[99] - A[8]*tmp;
    A[100] = A[100] - A[9]*tmp;
    A[101] = A[101] - A[10]*tmp;
    A[102] = A[102] - A[11]*tmp;
    A[103] = A[103] - A[12]*tmp;
    tmp = A[104];
    A[105] = A[105] - A[1]*tmp;
    A[106] = A[106] - A[2]*tmp;
    A[107] = A[107] - A[3]*tmp;
    A[108] = A[108] - A[4]*tmp;
    A[109] = A[109] - A[5]*tmp;
    A[110] = A[110] - A[6]*tmp;
    A[111] = A[111] - A[7]*tmp;
    A[112] = A[112] - A[8]*tmp;
    A[113] = A[113] - A[9]*tmp;
    A[114] = A[114] - A[10]*tmp;
    A[115] = A[115] - A[11]*tmp;
    A[116] = A[116] - A[12]*tmp;
    tmp = A[117];
    A[118] = A[118] - A[1]*tmp;
    A[119] = A[119] - A[2]*tmp;
    A[120] = A[120] - A[3]*tmp;
    A[121] = A[121] - A[4]*tmp;
    A[122] = A[122] - A[5]*tmp;
    A[123] = A[123] - A[6]*tmp;
    A[124] = A[124] - A[7]*tmp;
    A[125] = A[125] - A[8]*tmp;
    A[126] = A[126] - A[9]*tmp;
    A[127] = A[127] - A[10]*tmp;
    A[128] = A[128] - A[11]*tmp;
    A[129] = A[129] - A[12]*tmp;
    tmp = A[130];
    A[131] = A[131] - A[1]*tmp;
    A[132] = A[132] - A[2]*tmp;
    A[133] = A[133] - A[3]*tmp;
    A[134] = A[134] - A[4]*tmp;
    A[135] = A[135] - A[5]*tmp;
    A[136] = A[136] - A[6]*tmp;
    A[137] = A[137] - A[7]*tmp;
    A[138] = A[138] - A[8]*tmp;
    A[139] = A[139] - A[9]*tmp;
    A[140] = A[140] - A[10]*tmp;
    A[141] = A[141] - A[11]*tmp;
    A[142] = A[142] - A[12]*tmp;
    tmp = A[143];
    A[144] = A[144] - A[1]*tmp;
    A[145] = A[145] - A[2]*tmp;
    A[146] = A[146] - A[3]*tmp;
    A[147] = A[147] - A[4]*tmp;
    A[148] = A[148] - A[5]*tmp;
    A[149] = A[149] - A[6]*tmp;
    A[150] = A[150] - A[7]*tmp;
    A[151] = A[151] - A[8]*tmp;
    A[152] = A[152] - A[9]*tmp;
    A[153] = A[153] - A[10]*tmp;
    A[154] = A[154] - A[11]*tmp;
    A[155] = A[155] - A[12]*tmp;
    tmp = A[156];
    A[157] = A[157] - A[1]*tmp;
    A[158] = A[158] - A[2]*tmp;
    A[159] = A[159] - A[3]*tmp;
    A[160] = A[160] - A[4]*tmp;
    A[161] = A[161] - A[5]*tmp;
    A[162] = A[162] - A[6]*tmp;
    A[163] = A[163] - A[7]*tmp;
    A[164] = A[164] - A[8]*tmp;
    A[165] = A[165] - A[9]*tmp;
    A[166] = A[166] - A[10]*tmp;
    A[167] = A[167] - A[11]*tmp;
    A[168] = A[168] - A[12]*tmp;
    i_max = 1;
    a_max = abs(A[14]);
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 2; }
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 3; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 4; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 5; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 6; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 7; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 8; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 9; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 10; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 11; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 12; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[14], A[i_max+13] );
    std::swap( A[27], A[i_max+26] );
    std::swap( A[40], A[i_max+39] );
    std::swap( A[53], A[i_max+52] );
    std::swap( A[66], A[i_max+65] );
    std::swap( A[79], A[i_max+78] );
    std::swap( A[92], A[i_max+91] );
    std::swap( A[105], A[i_max+104] );
    std::swap( A[118], A[i_max+117] );
    std::swap( A[131], A[i_max+130] );
    std::swap( A[144], A[i_max+143] );
    std::swap( A[157], A[i_max+156] );
    P[1] = i_max + 1;
    tmp = A[14];
    A[15] = A[15] / tmp;
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    tmp = A[27];
    A[28] = A[28] - A[15]*tmp;
    A[29] = A[29] - A[16]*tmp;
    A[30] = A[30] - A[17]*tmp;
    A[31] = A[31] - A[18]*tmp;
    A[32] = A[32] - A[19]*tmp;
    A[33] = A[33] - A[20]*tmp;
    A[34] = A[34] - A[21]*tmp;
    A[35] = A[35] - A[22]*tmp;
    A[36] = A[36] - A[23]*tmp;
    A[37] = A[37] - A[24]*tmp;
    A[38] = A[38] - A[25]*tmp;
    tmp = A[40];
    A[41] = A[41] - A[15]*tmp;
    A[42] = A[42] - A[16]*tmp;
    A[43] = A[43] - A[17]*tmp;
    A[44] = A[44] - A[18]*tmp;
    A[45] = A[45] - A[19]*tmp;
    A[46] = A[46] - A[20]*tmp;
    A[47] = A[47] - A[21]*tmp;
    A[48] = A[48] - A[22]*tmp;
    A[49] = A[49] - A[23]*tmp;
    A[50] = A[50] - A[24]*tmp;
    A[51] = A[51] - A[25]*tmp;
    tmp = A[53];
    A[54] = A[54] - A[15]*tmp;
    A[55] = A[55] - A[16]*tmp;
    A[56] = A[56] - A[17]*tmp;
    A[57] = A[57] - A[18]*tmp;
    A[58] = A[58] - A[19]*tmp;
    A[59] = A[59] - A[20]*tmp;
    A[60] = A[60] - A[21]*tmp;
    A[61] = A[61] - A[22]*tmp;
    A[62] = A[62] - A[23]*tmp;
    A[63] = A[63] - A[24]*tmp;
    A[64] = A[64] - A[25]*tmp;
    tmp = A[66];
    A[67] = A[67] - A[15]*tmp;
    A[68] = A[68] - A[16]*tmp;
    A[69] = A[69] - A[17]*tmp;
    A[70] = A[70] - A[18]*tmp;
    A[71] = A[71] - A[19]*tmp;
    A[72] = A[72] - A[20]*tmp;
    A[73] = A[73] - A[21]*tmp;
    A[74] = A[74] - A[22]*tmp;
    A[75] = A[75] - A[23]*tmp;
    A[76] = A[76] - A[24]*tmp;
    A[77] = A[77] - A[25]*tmp;
    tmp = A[79];
    A[80] = A[80] - A[15]*tmp;
    A[81] = A[81] - A[16]*tmp;
    A[82] = A[82] - A[17]*tmp;
    A[83] = A[83] - A[18]*tmp;
    A[84] = A[84] - A[19]*tmp;
    A[85] = A[85] - A[20]*tmp;
    A[86] = A[86] - A[21]*tmp;
    A[87] = A[87] - A[22]*tmp;
    A[88] = A[88] - A[23]*tmp;
    A[89] = A[89] - A[24]*tmp;
    A[90] = A[90] - A[25]*tmp;
    tmp = A[92];
    A[93] = A[93] - A[15]*tmp;
    A[94] = A[94] - A[16]*tmp;
    A[95] = A[95] - A[17]*tmp;
    A[96] = A[96] - A[18]*tmp;
    A[97] = A[97] - A[19]*tmp;
    A[98] = A[98] - A[20]*tmp;
    A[99] = A[99] - A[21]*tmp;
    A[100] = A[100] - A[22]*tmp;
    A[101] = A[101] - A[23]*tmp;
    A[102] = A[102] - A[24]*tmp;
    A[103] = A[103] - A[25]*tmp;
    tmp = A[105];
    A[106] = A[106] - A[15]*tmp;
    A[107] = A[107] - A[16]*tmp;
    A[108] = A[108] - A[17]*tmp;
    A[109] = A[109] - A[18]*tmp;
    A[110] = A[110] - A[19]*tmp;
    A[111] = A[111] - A[20]*tmp;
    A[112] = A[112] - A[21]*tmp;
    A[113] = A[113] - A[22]*tmp;
    A[114] = A[114] - A[23]*tmp;
    A[115] = A[115] - A[24]*tmp;
    A[116] = A[116] - A[25]*tmp;
    tmp = A[118];
    A[119] = A[119] - A[15]*tmp;
    A[120] = A[120] - A[16]*tmp;
    A[121] = A[121] - A[17]*tmp;
    A[122] = A[122] - A[18]*tmp;
    A[123] = A[123] - A[19]*tmp;
    A[124] = A[124] - A[20]*tmp;
    A[125] = A[125] - A[21]*tmp;
    A[126] = A[126] - A[22]*tmp;
    A[127] = A[127] - A[23]*tmp;
    A[128] = A[128] - A[24]*tmp;
    A[129] = A[129] - A[25]*tmp;
    tmp = A[131];
    A[132] = A[132] - A[15]*tmp;
    A[133] = A[133] - A[16]*tmp;
    A[134] = A[134] - A[17]*tmp;
    A[135] = A[135] - A[18]*tmp;
    A[136] = A[136] - A[19]*tmp;
    A[137] = A[137] - A[20]*tmp;
    A[138] = A[138] - A[21]*tmp;
    A[139] = A[139] - A[22]*tmp;
    A[140] = A[140] - A[23]*tmp;
    A[141] = A[141] - A[24]*tmp;
    A[142] = A[142] - A[25]*tmp;
    tmp = A[144];
    A[145] = A[145] - A[15]*tmp;
    A[146] = A[146] - A[16]*tmp;
    A[147] = A[147] - A[17]*tmp;
    A[148] = A[148] - A[18]*tmp;
    A[149] = A[149] - A[19]*tmp;
    A[150] = A[150] - A[20]*tmp;
    A[151] = A[151] - A[21]*tmp;
    A[152] = A[152] - A[22]*tmp;
    A[153] = A[153] - A[23]*tmp;
    A[154] = A[154] - A[24]*tmp;
    A[155] = A[155] - A[25]*tmp;
    tmp = A[157];
    A[158] = A[158] - A[15]*tmp;
    A[159] = A[159] - A[16]*tmp;
    A[160] = A[160] - A[17]*tmp;
    A[161] = A[161] - A[18]*tmp;
    A[162] = A[162] - A[19]*tmp;
    A[163] = A[163] - A[20]*tmp;
    A[164] = A[164] - A[21]*tmp;
    A[165] = A[165] - A[22]*tmp;
    A[166] = A[166] - A[23]*tmp;
    A[167] = A[167] - A[24]*tmp;
    A[168] = A[168] - A[25]*tmp;
    i_max = 2;
    a_max = abs(A[28]);
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 3; }
    if ( a_max < abs( A[30] ) ) { a_max = abs(A[30]); i_max = 4; }
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 5; }
    if ( a_max < abs( A[32] ) ) { a_max = abs(A[32]); i_max = 6; }
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 7; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 8; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 9; }
    if ( a_max < abs( A[36] ) ) { a_max = abs(A[36]); i_max = 10; }
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 11; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 12; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[15], A[i_max+13] );
    std::swap( A[28], A[i_max+26] );
    std::swap( A[41], A[i_max+39] );
    std::swap( A[54], A[i_max+52] );
    std::swap( A[67], A[i_max+65] );
    std::swap( A[80], A[i_max+78] );
    std::swap( A[93], A[i_max+91] );
    std::swap( A[106], A[i_max+104] );
    std::swap( A[119], A[i_max+117] );
    std::swap( A[132], A[i_max+130] );
    std::swap( A[145], A[i_max+143] );
    std::swap( A[158], A[i_max+156] );
    P[2] = i_max + 1;
    tmp = A[28];
    A[29] = A[29] / tmp;
    A[30] = A[30] / tmp;
    A[31] = A[31] / tmp;
    A[32] = A[32] / tmp;
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    A[36] = A[36] / tmp;
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    tmp = A[41];
    A[42] = A[42] - A[29]*tmp;
    A[43] = A[43] - A[30]*tmp;
    A[44] = A[44] - A[31]*tmp;
    A[45] = A[45] - A[32]*tmp;
    A[46] = A[46] - A[33]*tmp;
    A[47] = A[47] - A[34]*tmp;
    A[48] = A[48] - A[35]*tmp;
    A[49] = A[49] - A[36]*tmp;
    A[50] = A[50] - A[37]*tmp;
    A[51] = A[51] - A[38]*tmp;
    tmp = A[54];
    A[55] = A[55] - A[29]*tmp;
    A[56] = A[56] - A[30]*tmp;
    A[57] = A[57] - A[31]*tmp;
    A[58] = A[58] - A[32]*tmp;
    A[59] = A[59] - A[33]*tmp;
    A[60] = A[60] - A[34]*tmp;
    A[61] = A[61] - A[35]*tmp;
    A[62] = A[62] - A[36]*tmp;
    A[63] = A[63] - A[37]*tmp;
    A[64] = A[64] - A[38]*tmp;
    tmp = A[67];
    A[68] = A[68] - A[29]*tmp;
    A[69] = A[69] - A[30]*tmp;
    A[70] = A[70] - A[31]*tmp;
    A[71] = A[71] - A[32]*tmp;
    A[72] = A[72] - A[33]*tmp;
    A[73] = A[73] - A[34]*tmp;
    A[74] = A[74] - A[35]*tmp;
    A[75] = A[75] - A[36]*tmp;
    A[76] = A[76] - A[37]*tmp;
    A[77] = A[77] - A[38]*tmp;
    tmp = A[80];
    A[81] = A[81] - A[29]*tmp;
    A[82] = A[82] - A[30]*tmp;
    A[83] = A[83] - A[31]*tmp;
    A[84] = A[84] - A[32]*tmp;
    A[85] = A[85] - A[33]*tmp;
    A[86] = A[86] - A[34]*tmp;
    A[87] = A[87] - A[35]*tmp;
    A[88] = A[88] - A[36]*tmp;
    A[89] = A[89] - A[37]*tmp;
    A[90] = A[90] - A[38]*tmp;
    tmp = A[93];
    A[94] = A[94] - A[29]*tmp;
    A[95] = A[95] - A[30]*tmp;
    A[96] = A[96] - A[31]*tmp;
    A[97] = A[97] - A[32]*tmp;
    A[98] = A[98] - A[33]*tmp;
    A[99] = A[99] - A[34]*tmp;
    A[100] = A[100] - A[35]*tmp;
    A[101] = A[101] - A[36]*tmp;
    A[102] = A[102] - A[37]*tmp;
    A[103] = A[103] - A[38]*tmp;
    tmp = A[106];
    A[107] = A[107] - A[29]*tmp;
    A[108] = A[108] - A[30]*tmp;
    A[109] = A[109] - A[31]*tmp;
    A[110] = A[110] - A[32]*tmp;
    A[111] = A[111] - A[33]*tmp;
    A[112] = A[112] - A[34]*tmp;
    A[113] = A[113] - A[35]*tmp;
    A[114] = A[114] - A[36]*tmp;
    A[115] = A[115] - A[37]*tmp;
    A[116] = A[116] - A[38]*tmp;
    tmp = A[119];
    A[120] = A[120] - A[29]*tmp;
    A[121] = A[121] - A[30]*tmp;
    A[122] = A[122] - A[31]*tmp;
    A[123] = A[123] - A[32]*tmp;
    A[124] = A[124] - A[33]*tmp;
    A[125] = A[125] - A[34]*tmp;
    A[126] = A[126] - A[35]*tmp;
    A[127] = A[127] - A[36]*tmp;
    A[128] = A[128] - A[37]*tmp;
    A[129] = A[129] - A[38]*tmp;
    tmp = A[132];
    A[133] = A[133] - A[29]*tmp;
    A[134] = A[134] - A[30]*tmp;
    A[135] = A[135] - A[31]*tmp;
    A[136] = A[136] - A[32]*tmp;
    A[137] = A[137] - A[33]*tmp;
    A[138] = A[138] - A[34]*tmp;
    A[139] = A[139] - A[35]*tmp;
    A[140] = A[140] - A[36]*tmp;
    A[141] = A[141] - A[37]*tmp;
    A[142] = A[142] - A[38]*tmp;
    tmp = A[145];
    A[146] = A[146] - A[29]*tmp;
    A[147] = A[147] - A[30]*tmp;
    A[148] = A[148] - A[31]*tmp;
    A[149] = A[149] - A[32]*tmp;
    A[150] = A[150] - A[33]*tmp;
    A[151] = A[151] - A[34]*tmp;
    A[152] = A[152] - A[35]*tmp;
    A[153] = A[153] - A[36]*tmp;
    A[154] = A[154] - A[37]*tmp;
    A[155] = A[155] - A[38]*tmp;
    tmp = A[158];
    A[159] = A[159] - A[29]*tmp;
    A[160] = A[160] - A[30]*tmp;
    A[161] = A[161] - A[31]*tmp;
    A[162] = A[162] - A[32]*tmp;
    A[163] = A[163] - A[33]*tmp;
    A[164] = A[164] - A[34]*tmp;
    A[165] = A[165] - A[35]*tmp;
    A[166] = A[166] - A[36]*tmp;
    A[167] = A[167] - A[37]*tmp;
    A[168] = A[168] - A[38]*tmp;
    i_max = 3;
    a_max = abs(A[42]);
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 4; }
    if ( a_max < abs( A[44] ) ) { a_max = abs(A[44]); i_max = 5; }
    if ( a_max < abs( A[45] ) ) { a_max = abs(A[45]); i_max = 6; }
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 7; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 8; }
    if ( a_max < abs( A[48] ) ) { a_max = abs(A[48]); i_max = 9; }
    if ( a_max < abs( A[49] ) ) { a_max = abs(A[49]); i_max = 10; }
    if ( a_max < abs( A[50] ) ) { a_max = abs(A[50]); i_max = 11; }
    if ( a_max < abs( A[51] ) ) { a_max = abs(A[51]); i_max = 12; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[16], A[i_max+13] );
    std::swap( A[29], A[i_max+26] );
    std::swap( A[42], A[i_max+39] );
    std::swap( A[55], A[i_max+52] );
    std::swap( A[68], A[i_max+65] );
    std::swap( A[81], A[i_max+78] );
    std::swap( A[94], A[i_max+91] );
    std::swap( A[107], A[i_max+104] );
    std::swap( A[120], A[i_max+117] );
    std::swap( A[133], A[i_max+130] );
    std::swap( A[146], A[i_max+143] );
    std::swap( A[159], A[i_max+156] );
    P[3] = i_max + 1;
    tmp = A[42];
    A[43] = A[43] / tmp;
    A[44] = A[44] / tmp;
    A[45] = A[45] / tmp;
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    A[48] = A[48] / tmp;
    A[49] = A[49] / tmp;
    A[50] = A[50] / tmp;
    A[51] = A[51] / tmp;
    tmp = A[55];
    A[56] = A[56] - A[43]*tmp;
    A[57] = A[57] - A[44]*tmp;
    A[58] = A[58] - A[45]*tmp;
    A[59] = A[59] - A[46]*tmp;
    A[60] = A[60] - A[47]*tmp;
    A[61] = A[61] - A[48]*tmp;
    A[62] = A[62] - A[49]*tmp;
    A[63] = A[63] - A[50]*tmp;
    A[64] = A[64] - A[51]*tmp;
    tmp = A[68];
    A[69] = A[69] - A[43]*tmp;
    A[70] = A[70] - A[44]*tmp;
    A[71] = A[71] - A[45]*tmp;
    A[72] = A[72] - A[46]*tmp;
    A[73] = A[73] - A[47]*tmp;
    A[74] = A[74] - A[48]*tmp;
    A[75] = A[75] - A[49]*tmp;
    A[76] = A[76] - A[50]*tmp;
    A[77] = A[77] - A[51]*tmp;
    tmp = A[81];
    A[82] = A[82] - A[43]*tmp;
    A[83] = A[83] - A[44]*tmp;
    A[84] = A[84] - A[45]*tmp;
    A[85] = A[85] - A[46]*tmp;
    A[86] = A[86] - A[47]*tmp;
    A[87] = A[87] - A[48]*tmp;
    A[88] = A[88] - A[49]*tmp;
    A[89] = A[89] - A[50]*tmp;
    A[90] = A[90] - A[51]*tmp;
    tmp = A[94];
    A[95] = A[95] - A[43]*tmp;
    A[96] = A[96] - A[44]*tmp;
    A[97] = A[97] - A[45]*tmp;
    A[98] = A[98] - A[46]*tmp;
    A[99] = A[99] - A[47]*tmp;
    A[100] = A[100] - A[48]*tmp;
    A[101] = A[101] - A[49]*tmp;
    A[102] = A[102] - A[50]*tmp;
    A[103] = A[103] - A[51]*tmp;
    tmp = A[107];
    A[108] = A[108] - A[43]*tmp;
    A[109] = A[109] - A[44]*tmp;
    A[110] = A[110] - A[45]*tmp;
    A[111] = A[111] - A[46]*tmp;
    A[112] = A[112] - A[47]*tmp;
    A[113] = A[113] - A[48]*tmp;
    A[114] = A[114] - A[49]*tmp;
    A[115] = A[115] - A[50]*tmp;
    A[116] = A[116] - A[51]*tmp;
    tmp = A[120];
    A[121] = A[121] - A[43]*tmp;
    A[122] = A[122] - A[44]*tmp;
    A[123] = A[123] - A[45]*tmp;
    A[124] = A[124] - A[46]*tmp;
    A[125] = A[125] - A[47]*tmp;
    A[126] = A[126] - A[48]*tmp;
    A[127] = A[127] - A[49]*tmp;
    A[128] = A[128] - A[50]*tmp;
    A[129] = A[129] - A[51]*tmp;
    tmp = A[133];
    A[134] = A[134] - A[43]*tmp;
    A[135] = A[135] - A[44]*tmp;
    A[136] = A[136] - A[45]*tmp;
    A[137] = A[137] - A[46]*tmp;
    A[138] = A[138] - A[47]*tmp;
    A[139] = A[139] - A[48]*tmp;
    A[140] = A[140] - A[49]*tmp;
    A[141] = A[141] - A[50]*tmp;
    A[142] = A[142] - A[51]*tmp;
    tmp = A[146];
    A[147] = A[147] - A[43]*tmp;
    A[148] = A[148] - A[44]*tmp;
    A[149] = A[149] - A[45]*tmp;
    A[150] = A[150] - A[46]*tmp;
    A[151] = A[151] - A[47]*tmp;
    A[152] = A[152] - A[48]*tmp;
    A[153] = A[153] - A[49]*tmp;
    A[154] = A[154] - A[50]*tmp;
    A[155] = A[155] - A[51]*tmp;
    tmp = A[159];
    A[160] = A[160] - A[43]*tmp;
    A[161] = A[161] - A[44]*tmp;
    A[162] = A[162] - A[45]*tmp;
    A[163] = A[163] - A[46]*tmp;
    A[164] = A[164] - A[47]*tmp;
    A[165] = A[165] - A[48]*tmp;
    A[166] = A[166] - A[49]*tmp;
    A[167] = A[167] - A[50]*tmp;
    A[168] = A[168] - A[51]*tmp;
    i_max = 4;
    a_max = abs(A[56]);
    if ( a_max < abs( A[57] ) ) { a_max = abs(A[57]); i_max = 5; }
    if ( a_max < abs( A[58] ) ) { a_max = abs(A[58]); i_max = 6; }
    if ( a_max < abs( A[59] ) ) { a_max = abs(A[59]); i_max = 7; }
    if ( a_max < abs( A[60] ) ) { a_max = abs(A[60]); i_max = 8; }
    if ( a_max < abs( A[61] ) ) { a_max = abs(A[61]); i_max = 9; }
    if ( a_max < abs( A[62] ) ) { a_max = abs(A[62]); i_max = 10; }
    if ( a_max < abs( A[63] ) ) { a_max = abs(A[63]); i_max = 11; }
    if ( a_max < abs( A[64] ) ) { a_max = abs(A[64]); i_max = 12; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[17], A[i_max+13] );
    std::swap( A[30], A[i_max+26] );
    std::swap( A[43], A[i_max+39] );
    std::swap( A[56], A[i_max+52] );
    std::swap( A[69], A[i_max+65] );
    std::swap( A[82], A[i_max+78] );
    std::swap( A[95], A[i_max+91] );
    std::swap( A[108], A[i_max+104] );
    std::swap( A[121], A[i_max+117] );
    std::swap( A[134], A[i_max+130] );
    std::swap( A[147], A[i_max+143] );
    std::swap( A[160], A[i_max+156] );
    P[4] = i_max + 1;
    tmp = A[56];
    A[57] = A[57] / tmp;
    A[58] = A[58] / tmp;
    A[59] = A[59] / tmp;
    A[60] = A[60] / tmp;
    A[61] = A[61] / tmp;
    A[62] = A[62] / tmp;
    A[63] = A[63] / tmp;
    A[64] = A[64] / tmp;
    tmp = A[69];
    A[70] = A[70] - A[57]*tmp;
    A[71] = A[71] - A[58]*tmp;
    A[72] = A[72] - A[59]*tmp;
    A[73] = A[73] - A[60]*tmp;
    A[74] = A[74] - A[61]*tmp;
    A[75] = A[75] - A[62]*tmp;
    A[76] = A[76] - A[63]*tmp;
    A[77] = A[77] - A[64]*tmp;
    tmp = A[82];
    A[83] = A[83] - A[57]*tmp;
    A[84] = A[84] - A[58]*tmp;
    A[85] = A[85] - A[59]*tmp;
    A[86] = A[86] - A[60]*tmp;
    A[87] = A[87] - A[61]*tmp;
    A[88] = A[88] - A[62]*tmp;
    A[89] = A[89] - A[63]*tmp;
    A[90] = A[90] - A[64]*tmp;
    tmp = A[95];
    A[96] = A[96] - A[57]*tmp;
    A[97] = A[97] - A[58]*tmp;
    A[98] = A[98] - A[59]*tmp;
    A[99] = A[99] - A[60]*tmp;
    A[100] = A[100] - A[61]*tmp;
    A[101] = A[101] - A[62]*tmp;
    A[102] = A[102] - A[63]*tmp;
    A[103] = A[103] - A[64]*tmp;
    tmp = A[108];
    A[109] = A[109] - A[57]*tmp;
    A[110] = A[110] - A[58]*tmp;
    A[111] = A[111] - A[59]*tmp;
    A[112] = A[112] - A[60]*tmp;
    A[113] = A[113] - A[61]*tmp;
    A[114] = A[114] - A[62]*tmp;
    A[115] = A[115] - A[63]*tmp;
    A[116] = A[116] - A[64]*tmp;
    tmp = A[121];
    A[122] = A[122] - A[57]*tmp;
    A[123] = A[123] - A[58]*tmp;
    A[124] = A[124] - A[59]*tmp;
    A[125] = A[125] - A[60]*tmp;
    A[126] = A[126] - A[61]*tmp;
    A[127] = A[127] - A[62]*tmp;
    A[128] = A[128] - A[63]*tmp;
    A[129] = A[129] - A[64]*tmp;
    tmp = A[134];
    A[135] = A[135] - A[57]*tmp;
    A[136] = A[136] - A[58]*tmp;
    A[137] = A[137] - A[59]*tmp;
    A[138] = A[138] - A[60]*tmp;
    A[139] = A[139] - A[61]*tmp;
    A[140] = A[140] - A[62]*tmp;
    A[141] = A[141] - A[63]*tmp;
    A[142] = A[142] - A[64]*tmp;
    tmp = A[147];
    A[148] = A[148] - A[57]*tmp;
    A[149] = A[149] - A[58]*tmp;
    A[150] = A[150] - A[59]*tmp;
    A[151] = A[151] - A[60]*tmp;
    A[152] = A[152] - A[61]*tmp;
    A[153] = A[153] - A[62]*tmp;
    A[154] = A[154] - A[63]*tmp;
    A[155] = A[155] - A[64]*tmp;
    tmp = A[160];
    A[161] = A[161] - A[57]*tmp;
    A[162] = A[162] - A[58]*tmp;
    A[163] = A[163] - A[59]*tmp;
    A[164] = A[164] - A[60]*tmp;
    A[165] = A[165] - A[61]*tmp;
    A[166] = A[166] - A[62]*tmp;
    A[167] = A[167] - A[63]*tmp;
    A[168] = A[168] - A[64]*tmp;
    i_max = 5;
    a_max = abs(A[70]);
    if ( a_max < abs( A[71] ) ) { a_max = abs(A[71]); i_max = 6; }
    if ( a_max < abs( A[72] ) ) { a_max = abs(A[72]); i_max = 7; }
    if ( a_max < abs( A[73] ) ) { a_max = abs(A[73]); i_max = 8; }
    if ( a_max < abs( A[74] ) ) { a_max = abs(A[74]); i_max = 9; }
    if ( a_max < abs( A[75] ) ) { a_max = abs(A[75]); i_max = 10; }
    if ( a_max < abs( A[76] ) ) { a_max = abs(A[76]); i_max = 11; }
    if ( a_max < abs( A[77] ) ) { a_max = abs(A[77]); i_max = 12; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[18], A[i_max+13] );
    std::swap( A[31], A[i_max+26] );
    std::swap( A[44], A[i_max+39] );
    std::swap( A[57], A[i_max+52] );
    std::swap( A[70], A[i_max+65] );
    std::swap( A[83], A[i_max+78] );
    std::swap( A[96], A[i_max+91] );
    std::swap( A[109], A[i_max+104] );
    std::swap( A[122], A[i_max+117] );
    std::swap( A[135], A[i_max+130] );
    std::swap( A[148], A[i_max+143] );
    std::swap( A[161], A[i_max+156] );
    P[5] = i_max + 1;
    tmp = A[70];
    A[71] = A[71] / tmp;
    A[72] = A[72] / tmp;
    A[73] = A[73] / tmp;
    A[74] = A[74] / tmp;
    A[75] = A[75] / tmp;
    A[76] = A[76] / tmp;
    A[77] = A[77] / tmp;
    tmp = A[83];
    A[84] = A[84] - A[71]*tmp;
    A[85] = A[85] - A[72]*tmp;
    A[86] = A[86] - A[73]*tmp;
    A[87] = A[87] - A[74]*tmp;
    A[88] = A[88] - A[75]*tmp;
    A[89] = A[89] - A[76]*tmp;
    A[90] = A[90] - A[77]*tmp;
    tmp = A[96];
    A[97] = A[97] - A[71]*tmp;
    A[98] = A[98] - A[72]*tmp;
    A[99] = A[99] - A[73]*tmp;
    A[100] = A[100] - A[74]*tmp;
    A[101] = A[101] - A[75]*tmp;
    A[102] = A[102] - A[76]*tmp;
    A[103] = A[103] - A[77]*tmp;
    tmp = A[109];
    A[110] = A[110] - A[71]*tmp;
    A[111] = A[111] - A[72]*tmp;
    A[112] = A[112] - A[73]*tmp;
    A[113] = A[113] - A[74]*tmp;
    A[114] = A[114] - A[75]*tmp;
    A[115] = A[115] - A[76]*tmp;
    A[116] = A[116] - A[77]*tmp;
    tmp = A[122];
    A[123] = A[123] - A[71]*tmp;
    A[124] = A[124] - A[72]*tmp;
    A[125] = A[125] - A[73]*tmp;
    A[126] = A[126] - A[74]*tmp;
    A[127] = A[127] - A[75]*tmp;
    A[128] = A[128] - A[76]*tmp;
    A[129] = A[129] - A[77]*tmp;
    tmp = A[135];
    A[136] = A[136] - A[71]*tmp;
    A[137] = A[137] - A[72]*tmp;
    A[138] = A[138] - A[73]*tmp;
    A[139] = A[139] - A[74]*tmp;
    A[140] = A[140] - A[75]*tmp;
    A[141] = A[141] - A[76]*tmp;
    A[142] = A[142] - A[77]*tmp;
    tmp = A[148];
    A[149] = A[149] - A[71]*tmp;
    A[150] = A[150] - A[72]*tmp;
    A[151] = A[151] - A[73]*tmp;
    A[152] = A[152] - A[74]*tmp;
    A[153] = A[153] - A[75]*tmp;
    A[154] = A[154] - A[76]*tmp;
    A[155] = A[155] - A[77]*tmp;
    tmp = A[161];
    A[162] = A[162] - A[71]*tmp;
    A[163] = A[163] - A[72]*tmp;
    A[164] = A[164] - A[73]*tmp;
    A[165] = A[165] - A[74]*tmp;
    A[166] = A[166] - A[75]*tmp;
    A[167] = A[167] - A[76]*tmp;
    A[168] = A[168] - A[77]*tmp;
    i_max = 6;
    a_max = abs(A[84]);
    if ( a_max < abs( A[85] ) ) { a_max = abs(A[85]); i_max = 7; }
    if ( a_max < abs( A[86] ) ) { a_max = abs(A[86]); i_max = 8; }
    if ( a_max < abs( A[87] ) ) { a_max = abs(A[87]); i_max = 9; }
    if ( a_max < abs( A[88] ) ) { a_max = abs(A[88]); i_max = 10; }
    if ( a_max < abs( A[89] ) ) { a_max = abs(A[89]); i_max = 11; }
    if ( a_max < abs( A[90] ) ) { a_max = abs(A[90]); i_max = 12; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[19], A[i_max+13] );
    std::swap( A[32], A[i_max+26] );
    std::swap( A[45], A[i_max+39] );
    std::swap( A[58], A[i_max+52] );
    std::swap( A[71], A[i_max+65] );
    std::swap( A[84], A[i_max+78] );
    std::swap( A[97], A[i_max+91] );
    std::swap( A[110], A[i_max+104] );
    std::swap( A[123], A[i_max+117] );
    std::swap( A[136], A[i_max+130] );
    std::swap( A[149], A[i_max+143] );
    std::swap( A[162], A[i_max+156] );
    P[6] = i_max + 1;
    tmp = A[84];
    A[85] = A[85] / tmp;
    A[86] = A[86] / tmp;
    A[87] = A[87] / tmp;
    A[88] = A[88] / tmp;
    A[89] = A[89] / tmp;
    A[90] = A[90] / tmp;
    tmp = A[97];
    A[98] = A[98] - A[85]*tmp;
    A[99] = A[99] - A[86]*tmp;
    A[100] = A[100] - A[87]*tmp;
    A[101] = A[101] - A[88]*tmp;
    A[102] = A[102] - A[89]*tmp;
    A[103] = A[103] - A[90]*tmp;
    tmp = A[110];
    A[111] = A[111] - A[85]*tmp;
    A[112] = A[112] - A[86]*tmp;
    A[113] = A[113] - A[87]*tmp;
    A[114] = A[114] - A[88]*tmp;
    A[115] = A[115] - A[89]*tmp;
    A[116] = A[116] - A[90]*tmp;
    tmp = A[123];
    A[124] = A[124] - A[85]*tmp;
    A[125] = A[125] - A[86]*tmp;
    A[126] = A[126] - A[87]*tmp;
    A[127] = A[127] - A[88]*tmp;
    A[128] = A[128] - A[89]*tmp;
    A[129] = A[129] - A[90]*tmp;
    tmp = A[136];
    A[137] = A[137] - A[85]*tmp;
    A[138] = A[138] - A[86]*tmp;
    A[139] = A[139] - A[87]*tmp;
    A[140] = A[140] - A[88]*tmp;
    A[141] = A[141] - A[89]*tmp;
    A[142] = A[142] - A[90]*tmp;
    tmp = A[149];
    A[150] = A[150] - A[85]*tmp;
    A[151] = A[151] - A[86]*tmp;
    A[152] = A[152] - A[87]*tmp;
    A[153] = A[153] - A[88]*tmp;
    A[154] = A[154] - A[89]*tmp;
    A[155] = A[155] - A[90]*tmp;
    tmp = A[162];
    A[163] = A[163] - A[85]*tmp;
    A[164] = A[164] - A[86]*tmp;
    A[165] = A[165] - A[87]*tmp;
    A[166] = A[166] - A[88]*tmp;
    A[167] = A[167] - A[89]*tmp;
    A[168] = A[168] - A[90]*tmp;
    i_max = 7;
    a_max = abs(A[98]);
    if ( a_max < abs( A[99] ) ) { a_max = abs(A[99]); i_max = 8; }
    if ( a_max < abs( A[100] ) ) { a_max = abs(A[100]); i_max = 9; }
    if ( a_max < abs( A[101] ) ) { a_max = abs(A[101]); i_max = 10; }
    if ( a_max < abs( A[102] ) ) { a_max = abs(A[102]); i_max = 11; }
    if ( a_max < abs( A[103] ) ) { a_max = abs(A[103]); i_max = 12; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[20], A[i_max+13] );
    std::swap( A[33], A[i_max+26] );
    std::swap( A[46], A[i_max+39] );
    std::swap( A[59], A[i_max+52] );
    std::swap( A[72], A[i_max+65] );
    std::swap( A[85], A[i_max+78] );
    std::swap( A[98], A[i_max+91] );
    std::swap( A[111], A[i_max+104] );
    std::swap( A[124], A[i_max+117] );
    std::swap( A[137], A[i_max+130] );
    std::swap( A[150], A[i_max+143] );
    std::swap( A[163], A[i_max+156] );
    P[7] = i_max + 1;
    tmp = A[98];
    A[99] = A[99] / tmp;
    A[100] = A[100] / tmp;
    A[101] = A[101] / tmp;
    A[102] = A[102] / tmp;
    A[103] = A[103] / tmp;
    tmp = A[111];
    A[112] = A[112] - A[99]*tmp;
    A[113] = A[113] - A[100]*tmp;
    A[114] = A[114] - A[101]*tmp;
    A[115] = A[115] - A[102]*tmp;
    A[116] = A[116] - A[103]*tmp;
    tmp = A[124];
    A[125] = A[125] - A[99]*tmp;
    A[126] = A[126] - A[100]*tmp;
    A[127] = A[127] - A[101]*tmp;
    A[128] = A[128] - A[102]*tmp;
    A[129] = A[129] - A[103]*tmp;
    tmp = A[137];
    A[138] = A[138] - A[99]*tmp;
    A[139] = A[139] - A[100]*tmp;
    A[140] = A[140] - A[101]*tmp;
    A[141] = A[141] - A[102]*tmp;
    A[142] = A[142] - A[103]*tmp;
    tmp = A[150];
    A[151] = A[151] - A[99]*tmp;
    A[152] = A[152] - A[100]*tmp;
    A[153] = A[153] - A[101]*tmp;
    A[154] = A[154] - A[102]*tmp;
    A[155] = A[155] - A[103]*tmp;
    tmp = A[163];
    A[164] = A[164] - A[99]*tmp;
    A[165] = A[165] - A[100]*tmp;
    A[166] = A[166] - A[101]*tmp;
    A[167] = A[167] - A[102]*tmp;
    A[168] = A[168] - A[103]*tmp;
    i_max = 8;
    a_max = abs(A[112]);
    if ( a_max < abs( A[113] ) ) { a_max = abs(A[113]); i_max = 9; }
    if ( a_max < abs( A[114] ) ) { a_max = abs(A[114]); i_max = 10; }
    if ( a_max < abs( A[115] ) ) { a_max = abs(A[115]); i_max = 11; }
    if ( a_max < abs( A[116] ) ) { a_max = abs(A[116]); i_max = 12; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[21], A[i_max+13] );
    std::swap( A[34], A[i_max+26] );
    std::swap( A[47], A[i_max+39] );
    std::swap( A[60], A[i_max+52] );
    std::swap( A[73], A[i_max+65] );
    std::swap( A[86], A[i_max+78] );
    std::swap( A[99], A[i_max+91] );
    std::swap( A[112], A[i_max+104] );
    std::swap( A[125], A[i_max+117] );
    std::swap( A[138], A[i_max+130] );
    std::swap( A[151], A[i_max+143] );
    std::swap( A[164], A[i_max+156] );
    P[8] = i_max + 1;
    tmp = A[112];
    A[113] = A[113] / tmp;
    A[114] = A[114] / tmp;
    A[115] = A[115] / tmp;
    A[116] = A[116] / tmp;
    tmp = A[125];
    A[126] = A[126] - A[113]*tmp;
    A[127] = A[127] - A[114]*tmp;
    A[128] = A[128] - A[115]*tmp;
    A[129] = A[129] - A[116]*tmp;
    tmp = A[138];
    A[139] = A[139] - A[113]*tmp;
    A[140] = A[140] - A[114]*tmp;
    A[141] = A[141] - A[115]*tmp;
    A[142] = A[142] - A[116]*tmp;
    tmp = A[151];
    A[152] = A[152] - A[113]*tmp;
    A[153] = A[153] - A[114]*tmp;
    A[154] = A[154] - A[115]*tmp;
    A[155] = A[155] - A[116]*tmp;
    tmp = A[164];
    A[165] = A[165] - A[113]*tmp;
    A[166] = A[166] - A[114]*tmp;
    A[167] = A[167] - A[115]*tmp;
    A[168] = A[168] - A[116]*tmp;
    i_max = 9;
    a_max = abs(A[126]);
    if ( a_max < abs( A[127] ) ) { a_max = abs(A[127]); i_max = 10; }
    if ( a_max < abs( A[128] ) ) { a_max = abs(A[128]); i_max = 11; }
    if ( a_max < abs( A[129] ) ) { a_max = abs(A[129]); i_max = 12; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[22], A[i_max+13] );
    std::swap( A[35], A[i_max+26] );
    std::swap( A[48], A[i_max+39] );
    std::swap( A[61], A[i_max+52] );
    std::swap( A[74], A[i_max+65] );
    std::swap( A[87], A[i_max+78] );
    std::swap( A[100], A[i_max+91] );
    std::swap( A[113], A[i_max+104] );
    std::swap( A[126], A[i_max+117] );
    std::swap( A[139], A[i_max+130] );
    std::swap( A[152], A[i_max+143] );
    std::swap( A[165], A[i_max+156] );
    P[9] = i_max + 1;
    tmp = A[126];
    A[127] = A[127] / tmp;
    A[128] = A[128] / tmp;
    A[129] = A[129] / tmp;
    tmp = A[139];
    A[140] = A[140] - A[127]*tmp;
    A[141] = A[141] - A[128]*tmp;
    A[142] = A[142] - A[129]*tmp;
    tmp = A[152];
    A[153] = A[153] - A[127]*tmp;
    A[154] = A[154] - A[128]*tmp;
    A[155] = A[155] - A[129]*tmp;
    tmp = A[165];
    A[166] = A[166] - A[127]*tmp;
    A[167] = A[167] - A[128]*tmp;
    A[168] = A[168] - A[129]*tmp;
    i_max = 10;
    a_max = abs(A[140]);
    if ( a_max < abs( A[141] ) ) { a_max = abs(A[141]); i_max = 11; }
    if ( a_max < abs( A[142] ) ) { a_max = abs(A[142]); i_max = 12; }
    std::swap( A[10], A[i_max+0] );
    std::swap( A[23], A[i_max+13] );
    std::swap( A[36], A[i_max+26] );
    std::swap( A[49], A[i_max+39] );
    std::swap( A[62], A[i_max+52] );
    std::swap( A[75], A[i_max+65] );
    std::swap( A[88], A[i_max+78] );
    std::swap( A[101], A[i_max+91] );
    std::swap( A[114], A[i_max+104] );
    std::swap( A[127], A[i_max+117] );
    std::swap( A[140], A[i_max+130] );
    std::swap( A[153], A[i_max+143] );
    std::swap( A[166], A[i_max+156] );
    P[10] = i_max + 1;
    tmp = A[140];
    A[141] = A[141] / tmp;
    A[142] = A[142] / tmp;
    tmp = A[153];
    A[154] = A[154] - A[141]*tmp;
    A[155] = A[155] - A[142]*tmp;
    tmp = A[166];
    A[167] = A[167] - A[141]*tmp;
    A[168] = A[168] - A[142]*tmp;
    i_max = 11;
    a_max = abs(A[154]);
    if ( a_max < abs( A[155] ) ) { a_max = abs(A[155]); i_max = 12; }
    std::swap( A[11], A[i_max+0] );
    std::swap( A[24], A[i_max+13] );
    std::swap( A[37], A[i_max+26] );
    std::swap( A[50], A[i_max+39] );
    std::swap( A[63], A[i_max+52] );
    std::swap( A[76], A[i_max+65] );
    std::swap( A[89], A[i_max+78] );
    std::swap( A[102], A[i_max+91] );
    std::swap( A[115], A[i_max+104] );
    std::swap( A[128], A[i_max+117] );
    std::swap( A[141], A[i_max+130] );
    std::swap( A[154], A[i_max+143] );
    std::swap( A[167], A[i_max+156] );
    P[11] = i_max + 1;
    tmp = A[154];
    A[155] = A[155] / tmp;
    tmp = A[167];
    A[168] = A[168] - A[155]*tmp;
    P[12] = 13;
}

void lu_14( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 11; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 12; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 13; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[14], A[i_max+14] );
    std::swap( A[28], A[i_max+28] );
    std::swap( A[42], A[i_max+42] );
    std::swap( A[56], A[i_max+56] );
    std::swap( A[70], A[i_max+70] );
    std::swap( A[84], A[i_max+84] );
    std::swap( A[98], A[i_max+98] );
    std::swap( A[112], A[i_max+112] );
    std::swap( A[126], A[i_max+126] );
    std::swap( A[140], A[i_max+140] );
    std::swap( A[154], A[i_max+154] );
    std::swap( A[168], A[i_max+168] );
    std::swap( A[182], A[i_max+182] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    tmp = A[14];
    A[15] = A[15] - A[1]*tmp;
    A[16] = A[16] - A[2]*tmp;
    A[17] = A[17] - A[3]*tmp;
    A[18] = A[18] - A[4]*tmp;
    A[19] = A[19] - A[5]*tmp;
    A[20] = A[20] - A[6]*tmp;
    A[21] = A[21] - A[7]*tmp;
    A[22] = A[22] - A[8]*tmp;
    A[23] = A[23] - A[9]*tmp;
    A[24] = A[24] - A[10]*tmp;
    A[25] = A[25] - A[11]*tmp;
    A[26] = A[26] - A[12]*tmp;
    A[27] = A[27] - A[13]*tmp;
    tmp = A[28];
    A[29] = A[29] - A[1]*tmp;
    A[30] = A[30] - A[2]*tmp;
    A[31] = A[31] - A[3]*tmp;
    A[32] = A[32] - A[4]*tmp;
    A[33] = A[33] - A[5]*tmp;
    A[34] = A[34] - A[6]*tmp;
    A[35] = A[35] - A[7]*tmp;
    A[36] = A[36] - A[8]*tmp;
    A[37] = A[37] - A[9]*tmp;
    A[38] = A[38] - A[10]*tmp;
    A[39] = A[39] - A[11]*tmp;
    A[40] = A[40] - A[12]*tmp;
    A[41] = A[41] - A[13]*tmp;
    tmp = A[42];
    A[43] = A[43] - A[1]*tmp;
    A[44] = A[44] - A[2]*tmp;
    A[45] = A[45] - A[3]*tmp;
    A[46] = A[46] - A[4]*tmp;
    A[47] = A[47] - A[5]*tmp;
    A[48] = A[48] - A[6]*tmp;
    A[49] = A[49] - A[7]*tmp;
    A[50] = A[50] - A[8]*tmp;
    A[51] = A[51] - A[9]*tmp;
    A[52] = A[52] - A[10]*tmp;
    A[53] = A[53] - A[11]*tmp;
    A[54] = A[54] - A[12]*tmp;
    A[55] = A[55] - A[13]*tmp;
    tmp = A[56];
    A[57] = A[57] - A[1]*tmp;
    A[58] = A[58] - A[2]*tmp;
    A[59] = A[59] - A[3]*tmp;
    A[60] = A[60] - A[4]*tmp;
    A[61] = A[61] - A[5]*tmp;
    A[62] = A[62] - A[6]*tmp;
    A[63] = A[63] - A[7]*tmp;
    A[64] = A[64] - A[8]*tmp;
    A[65] = A[65] - A[9]*tmp;
    A[66] = A[66] - A[10]*tmp;
    A[67] = A[67] - A[11]*tmp;
    A[68] = A[68] - A[12]*tmp;
    A[69] = A[69] - A[13]*tmp;
    tmp = A[70];
    A[71] = A[71] - A[1]*tmp;
    A[72] = A[72] - A[2]*tmp;
    A[73] = A[73] - A[3]*tmp;
    A[74] = A[74] - A[4]*tmp;
    A[75] = A[75] - A[5]*tmp;
    A[76] = A[76] - A[6]*tmp;
    A[77] = A[77] - A[7]*tmp;
    A[78] = A[78] - A[8]*tmp;
    A[79] = A[79] - A[9]*tmp;
    A[80] = A[80] - A[10]*tmp;
    A[81] = A[81] - A[11]*tmp;
    A[82] = A[82] - A[12]*tmp;
    A[83] = A[83] - A[13]*tmp;
    tmp = A[84];
    A[85] = A[85] - A[1]*tmp;
    A[86] = A[86] - A[2]*tmp;
    A[87] = A[87] - A[3]*tmp;
    A[88] = A[88] - A[4]*tmp;
    A[89] = A[89] - A[5]*tmp;
    A[90] = A[90] - A[6]*tmp;
    A[91] = A[91] - A[7]*tmp;
    A[92] = A[92] - A[8]*tmp;
    A[93] = A[93] - A[9]*tmp;
    A[94] = A[94] - A[10]*tmp;
    A[95] = A[95] - A[11]*tmp;
    A[96] = A[96] - A[12]*tmp;
    A[97] = A[97] - A[13]*tmp;
    tmp = A[98];
    A[99] = A[99] - A[1]*tmp;
    A[100] = A[100] - A[2]*tmp;
    A[101] = A[101] - A[3]*tmp;
    A[102] = A[102] - A[4]*tmp;
    A[103] = A[103] - A[5]*tmp;
    A[104] = A[104] - A[6]*tmp;
    A[105] = A[105] - A[7]*tmp;
    A[106] = A[106] - A[8]*tmp;
    A[107] = A[107] - A[9]*tmp;
    A[108] = A[108] - A[10]*tmp;
    A[109] = A[109] - A[11]*tmp;
    A[110] = A[110] - A[12]*tmp;
    A[111] = A[111] - A[13]*tmp;
    tmp = A[112];
    A[113] = A[113] - A[1]*tmp;
    A[114] = A[114] - A[2]*tmp;
    A[115] = A[115] - A[3]*tmp;
    A[116] = A[116] - A[4]*tmp;
    A[117] = A[117] - A[5]*tmp;
    A[118] = A[118] - A[6]*tmp;
    A[119] = A[119] - A[7]*tmp;
    A[120] = A[120] - A[8]*tmp;
    A[121] = A[121] - A[9]*tmp;
    A[122] = A[122] - A[10]*tmp;
    A[123] = A[123] - A[11]*tmp;
    A[124] = A[124] - A[12]*tmp;
    A[125] = A[125] - A[13]*tmp;
    tmp = A[126];
    A[127] = A[127] - A[1]*tmp;
    A[128] = A[128] - A[2]*tmp;
    A[129] = A[129] - A[3]*tmp;
    A[130] = A[130] - A[4]*tmp;
    A[131] = A[131] - A[5]*tmp;
    A[132] = A[132] - A[6]*tmp;
    A[133] = A[133] - A[7]*tmp;
    A[134] = A[134] - A[8]*tmp;
    A[135] = A[135] - A[9]*tmp;
    A[136] = A[136] - A[10]*tmp;
    A[137] = A[137] - A[11]*tmp;
    A[138] = A[138] - A[12]*tmp;
    A[139] = A[139] - A[13]*tmp;
    tmp = A[140];
    A[141] = A[141] - A[1]*tmp;
    A[142] = A[142] - A[2]*tmp;
    A[143] = A[143] - A[3]*tmp;
    A[144] = A[144] - A[4]*tmp;
    A[145] = A[145] - A[5]*tmp;
    A[146] = A[146] - A[6]*tmp;
    A[147] = A[147] - A[7]*tmp;
    A[148] = A[148] - A[8]*tmp;
    A[149] = A[149] - A[9]*tmp;
    A[150] = A[150] - A[10]*tmp;
    A[151] = A[151] - A[11]*tmp;
    A[152] = A[152] - A[12]*tmp;
    A[153] = A[153] - A[13]*tmp;
    tmp = A[154];
    A[155] = A[155] - A[1]*tmp;
    A[156] = A[156] - A[2]*tmp;
    A[157] = A[157] - A[3]*tmp;
    A[158] = A[158] - A[4]*tmp;
    A[159] = A[159] - A[5]*tmp;
    A[160] = A[160] - A[6]*tmp;
    A[161] = A[161] - A[7]*tmp;
    A[162] = A[162] - A[8]*tmp;
    A[163] = A[163] - A[9]*tmp;
    A[164] = A[164] - A[10]*tmp;
    A[165] = A[165] - A[11]*tmp;
    A[166] = A[166] - A[12]*tmp;
    A[167] = A[167] - A[13]*tmp;
    tmp = A[168];
    A[169] = A[169] - A[1]*tmp;
    A[170] = A[170] - A[2]*tmp;
    A[171] = A[171] - A[3]*tmp;
    A[172] = A[172] - A[4]*tmp;
    A[173] = A[173] - A[5]*tmp;
    A[174] = A[174] - A[6]*tmp;
    A[175] = A[175] - A[7]*tmp;
    A[176] = A[176] - A[8]*tmp;
    A[177] = A[177] - A[9]*tmp;
    A[178] = A[178] - A[10]*tmp;
    A[179] = A[179] - A[11]*tmp;
    A[180] = A[180] - A[12]*tmp;
    A[181] = A[181] - A[13]*tmp;
    tmp = A[182];
    A[183] = A[183] - A[1]*tmp;
    A[184] = A[184] - A[2]*tmp;
    A[185] = A[185] - A[3]*tmp;
    A[186] = A[186] - A[4]*tmp;
    A[187] = A[187] - A[5]*tmp;
    A[188] = A[188] - A[6]*tmp;
    A[189] = A[189] - A[7]*tmp;
    A[190] = A[190] - A[8]*tmp;
    A[191] = A[191] - A[9]*tmp;
    A[192] = A[192] - A[10]*tmp;
    A[193] = A[193] - A[11]*tmp;
    A[194] = A[194] - A[12]*tmp;
    A[195] = A[195] - A[13]*tmp;
    i_max = 1;
    a_max = abs(A[15]);
    if ( a_max < abs( A[16] ) ) { a_max = abs(A[16]); i_max = 2; }
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 3; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 4; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 5; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 6; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 7; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 8; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 9; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 10; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 11; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 12; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 13; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[15], A[i_max+14] );
    std::swap( A[29], A[i_max+28] );
    std::swap( A[43], A[i_max+42] );
    std::swap( A[57], A[i_max+56] );
    std::swap( A[71], A[i_max+70] );
    std::swap( A[85], A[i_max+84] );
    std::swap( A[99], A[i_max+98] );
    std::swap( A[113], A[i_max+112] );
    std::swap( A[127], A[i_max+126] );
    std::swap( A[141], A[i_max+140] );
    std::swap( A[155], A[i_max+154] );
    std::swap( A[169], A[i_max+168] );
    std::swap( A[183], A[i_max+182] );
    P[1] = i_max + 1;
    tmp = A[15];
    A[16] = A[16] / tmp;
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    tmp = A[29];
    A[30] = A[30] - A[16]*tmp;
    A[31] = A[31] - A[17]*tmp;
    A[32] = A[32] - A[18]*tmp;
    A[33] = A[33] - A[19]*tmp;
    A[34] = A[34] - A[20]*tmp;
    A[35] = A[35] - A[21]*tmp;
    A[36] = A[36] - A[22]*tmp;
    A[37] = A[37] - A[23]*tmp;
    A[38] = A[38] - A[24]*tmp;
    A[39] = A[39] - A[25]*tmp;
    A[40] = A[40] - A[26]*tmp;
    A[41] = A[41] - A[27]*tmp;
    tmp = A[43];
    A[44] = A[44] - A[16]*tmp;
    A[45] = A[45] - A[17]*tmp;
    A[46] = A[46] - A[18]*tmp;
    A[47] = A[47] - A[19]*tmp;
    A[48] = A[48] - A[20]*tmp;
    A[49] = A[49] - A[21]*tmp;
    A[50] = A[50] - A[22]*tmp;
    A[51] = A[51] - A[23]*tmp;
    A[52] = A[52] - A[24]*tmp;
    A[53] = A[53] - A[25]*tmp;
    A[54] = A[54] - A[26]*tmp;
    A[55] = A[55] - A[27]*tmp;
    tmp = A[57];
    A[58] = A[58] - A[16]*tmp;
    A[59] = A[59] - A[17]*tmp;
    A[60] = A[60] - A[18]*tmp;
    A[61] = A[61] - A[19]*tmp;
    A[62] = A[62] - A[20]*tmp;
    A[63] = A[63] - A[21]*tmp;
    A[64] = A[64] - A[22]*tmp;
    A[65] = A[65] - A[23]*tmp;
    A[66] = A[66] - A[24]*tmp;
    A[67] = A[67] - A[25]*tmp;
    A[68] = A[68] - A[26]*tmp;
    A[69] = A[69] - A[27]*tmp;
    tmp = A[71];
    A[72] = A[72] - A[16]*tmp;
    A[73] = A[73] - A[17]*tmp;
    A[74] = A[74] - A[18]*tmp;
    A[75] = A[75] - A[19]*tmp;
    A[76] = A[76] - A[20]*tmp;
    A[77] = A[77] - A[21]*tmp;
    A[78] = A[78] - A[22]*tmp;
    A[79] = A[79] - A[23]*tmp;
    A[80] = A[80] - A[24]*tmp;
    A[81] = A[81] - A[25]*tmp;
    A[82] = A[82] - A[26]*tmp;
    A[83] = A[83] - A[27]*tmp;
    tmp = A[85];
    A[86] = A[86] - A[16]*tmp;
    A[87] = A[87] - A[17]*tmp;
    A[88] = A[88] - A[18]*tmp;
    A[89] = A[89] - A[19]*tmp;
    A[90] = A[90] - A[20]*tmp;
    A[91] = A[91] - A[21]*tmp;
    A[92] = A[92] - A[22]*tmp;
    A[93] = A[93] - A[23]*tmp;
    A[94] = A[94] - A[24]*tmp;
    A[95] = A[95] - A[25]*tmp;
    A[96] = A[96] - A[26]*tmp;
    A[97] = A[97] - A[27]*tmp;
    tmp = A[99];
    A[100] = A[100] - A[16]*tmp;
    A[101] = A[101] - A[17]*tmp;
    A[102] = A[102] - A[18]*tmp;
    A[103] = A[103] - A[19]*tmp;
    A[104] = A[104] - A[20]*tmp;
    A[105] = A[105] - A[21]*tmp;
    A[106] = A[106] - A[22]*tmp;
    A[107] = A[107] - A[23]*tmp;
    A[108] = A[108] - A[24]*tmp;
    A[109] = A[109] - A[25]*tmp;
    A[110] = A[110] - A[26]*tmp;
    A[111] = A[111] - A[27]*tmp;
    tmp = A[113];
    A[114] = A[114] - A[16]*tmp;
    A[115] = A[115] - A[17]*tmp;
    A[116] = A[116] - A[18]*tmp;
    A[117] = A[117] - A[19]*tmp;
    A[118] = A[118] - A[20]*tmp;
    A[119] = A[119] - A[21]*tmp;
    A[120] = A[120] - A[22]*tmp;
    A[121] = A[121] - A[23]*tmp;
    A[122] = A[122] - A[24]*tmp;
    A[123] = A[123] - A[25]*tmp;
    A[124] = A[124] - A[26]*tmp;
    A[125] = A[125] - A[27]*tmp;
    tmp = A[127];
    A[128] = A[128] - A[16]*tmp;
    A[129] = A[129] - A[17]*tmp;
    A[130] = A[130] - A[18]*tmp;
    A[131] = A[131] - A[19]*tmp;
    A[132] = A[132] - A[20]*tmp;
    A[133] = A[133] - A[21]*tmp;
    A[134] = A[134] - A[22]*tmp;
    A[135] = A[135] - A[23]*tmp;
    A[136] = A[136] - A[24]*tmp;
    A[137] = A[137] - A[25]*tmp;
    A[138] = A[138] - A[26]*tmp;
    A[139] = A[139] - A[27]*tmp;
    tmp = A[141];
    A[142] = A[142] - A[16]*tmp;
    A[143] = A[143] - A[17]*tmp;
    A[144] = A[144] - A[18]*tmp;
    A[145] = A[145] - A[19]*tmp;
    A[146] = A[146] - A[20]*tmp;
    A[147] = A[147] - A[21]*tmp;
    A[148] = A[148] - A[22]*tmp;
    A[149] = A[149] - A[23]*tmp;
    A[150] = A[150] - A[24]*tmp;
    A[151] = A[151] - A[25]*tmp;
    A[152] = A[152] - A[26]*tmp;
    A[153] = A[153] - A[27]*tmp;
    tmp = A[155];
    A[156] = A[156] - A[16]*tmp;
    A[157] = A[157] - A[17]*tmp;
    A[158] = A[158] - A[18]*tmp;
    A[159] = A[159] - A[19]*tmp;
    A[160] = A[160] - A[20]*tmp;
    A[161] = A[161] - A[21]*tmp;
    A[162] = A[162] - A[22]*tmp;
    A[163] = A[163] - A[23]*tmp;
    A[164] = A[164] - A[24]*tmp;
    A[165] = A[165] - A[25]*tmp;
    A[166] = A[166] - A[26]*tmp;
    A[167] = A[167] - A[27]*tmp;
    tmp = A[169];
    A[170] = A[170] - A[16]*tmp;
    A[171] = A[171] - A[17]*tmp;
    A[172] = A[172] - A[18]*tmp;
    A[173] = A[173] - A[19]*tmp;
    A[174] = A[174] - A[20]*tmp;
    A[175] = A[175] - A[21]*tmp;
    A[176] = A[176] - A[22]*tmp;
    A[177] = A[177] - A[23]*tmp;
    A[178] = A[178] - A[24]*tmp;
    A[179] = A[179] - A[25]*tmp;
    A[180] = A[180] - A[26]*tmp;
    A[181] = A[181] - A[27]*tmp;
    tmp = A[183];
    A[184] = A[184] - A[16]*tmp;
    A[185] = A[185] - A[17]*tmp;
    A[186] = A[186] - A[18]*tmp;
    A[187] = A[187] - A[19]*tmp;
    A[188] = A[188] - A[20]*tmp;
    A[189] = A[189] - A[21]*tmp;
    A[190] = A[190] - A[22]*tmp;
    A[191] = A[191] - A[23]*tmp;
    A[192] = A[192] - A[24]*tmp;
    A[193] = A[193] - A[25]*tmp;
    A[194] = A[194] - A[26]*tmp;
    A[195] = A[195] - A[27]*tmp;
    i_max = 2;
    a_max = abs(A[30]);
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 3; }
    if ( a_max < abs( A[32] ) ) { a_max = abs(A[32]); i_max = 4; }
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 5; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 6; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 7; }
    if ( a_max < abs( A[36] ) ) { a_max = abs(A[36]); i_max = 8; }
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 9; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 10; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 11; }
    if ( a_max < abs( A[40] ) ) { a_max = abs(A[40]); i_max = 12; }
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 13; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[16], A[i_max+14] );
    std::swap( A[30], A[i_max+28] );
    std::swap( A[44], A[i_max+42] );
    std::swap( A[58], A[i_max+56] );
    std::swap( A[72], A[i_max+70] );
    std::swap( A[86], A[i_max+84] );
    std::swap( A[100], A[i_max+98] );
    std::swap( A[114], A[i_max+112] );
    std::swap( A[128], A[i_max+126] );
    std::swap( A[142], A[i_max+140] );
    std::swap( A[156], A[i_max+154] );
    std::swap( A[170], A[i_max+168] );
    std::swap( A[184], A[i_max+182] );
    P[2] = i_max + 1;
    tmp = A[30];
    A[31] = A[31] / tmp;
    A[32] = A[32] / tmp;
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    A[36] = A[36] / tmp;
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    A[40] = A[40] / tmp;
    A[41] = A[41] / tmp;
    tmp = A[44];
    A[45] = A[45] - A[31]*tmp;
    A[46] = A[46] - A[32]*tmp;
    A[47] = A[47] - A[33]*tmp;
    A[48] = A[48] - A[34]*tmp;
    A[49] = A[49] - A[35]*tmp;
    A[50] = A[50] - A[36]*tmp;
    A[51] = A[51] - A[37]*tmp;
    A[52] = A[52] - A[38]*tmp;
    A[53] = A[53] - A[39]*tmp;
    A[54] = A[54] - A[40]*tmp;
    A[55] = A[55] - A[41]*tmp;
    tmp = A[58];
    A[59] = A[59] - A[31]*tmp;
    A[60] = A[60] - A[32]*tmp;
    A[61] = A[61] - A[33]*tmp;
    A[62] = A[62] - A[34]*tmp;
    A[63] = A[63] - A[35]*tmp;
    A[64] = A[64] - A[36]*tmp;
    A[65] = A[65] - A[37]*tmp;
    A[66] = A[66] - A[38]*tmp;
    A[67] = A[67] - A[39]*tmp;
    A[68] = A[68] - A[40]*tmp;
    A[69] = A[69] - A[41]*tmp;
    tmp = A[72];
    A[73] = A[73] - A[31]*tmp;
    A[74] = A[74] - A[32]*tmp;
    A[75] = A[75] - A[33]*tmp;
    A[76] = A[76] - A[34]*tmp;
    A[77] = A[77] - A[35]*tmp;
    A[78] = A[78] - A[36]*tmp;
    A[79] = A[79] - A[37]*tmp;
    A[80] = A[80] - A[38]*tmp;
    A[81] = A[81] - A[39]*tmp;
    A[82] = A[82] - A[40]*tmp;
    A[83] = A[83] - A[41]*tmp;
    tmp = A[86];
    A[87] = A[87] - A[31]*tmp;
    A[88] = A[88] - A[32]*tmp;
    A[89] = A[89] - A[33]*tmp;
    A[90] = A[90] - A[34]*tmp;
    A[91] = A[91] - A[35]*tmp;
    A[92] = A[92] - A[36]*tmp;
    A[93] = A[93] - A[37]*tmp;
    A[94] = A[94] - A[38]*tmp;
    A[95] = A[95] - A[39]*tmp;
    A[96] = A[96] - A[40]*tmp;
    A[97] = A[97] - A[41]*tmp;
    tmp = A[100];
    A[101] = A[101] - A[31]*tmp;
    A[102] = A[102] - A[32]*tmp;
    A[103] = A[103] - A[33]*tmp;
    A[104] = A[104] - A[34]*tmp;
    A[105] = A[105] - A[35]*tmp;
    A[106] = A[106] - A[36]*tmp;
    A[107] = A[107] - A[37]*tmp;
    A[108] = A[108] - A[38]*tmp;
    A[109] = A[109] - A[39]*tmp;
    A[110] = A[110] - A[40]*tmp;
    A[111] = A[111] - A[41]*tmp;
    tmp = A[114];
    A[115] = A[115] - A[31]*tmp;
    A[116] = A[116] - A[32]*tmp;
    A[117] = A[117] - A[33]*tmp;
    A[118] = A[118] - A[34]*tmp;
    A[119] = A[119] - A[35]*tmp;
    A[120] = A[120] - A[36]*tmp;
    A[121] = A[121] - A[37]*tmp;
    A[122] = A[122] - A[38]*tmp;
    A[123] = A[123] - A[39]*tmp;
    A[124] = A[124] - A[40]*tmp;
    A[125] = A[125] - A[41]*tmp;
    tmp = A[128];
    A[129] = A[129] - A[31]*tmp;
    A[130] = A[130] - A[32]*tmp;
    A[131] = A[131] - A[33]*tmp;
    A[132] = A[132] - A[34]*tmp;
    A[133] = A[133] - A[35]*tmp;
    A[134] = A[134] - A[36]*tmp;
    A[135] = A[135] - A[37]*tmp;
    A[136] = A[136] - A[38]*tmp;
    A[137] = A[137] - A[39]*tmp;
    A[138] = A[138] - A[40]*tmp;
    A[139] = A[139] - A[41]*tmp;
    tmp = A[142];
    A[143] = A[143] - A[31]*tmp;
    A[144] = A[144] - A[32]*tmp;
    A[145] = A[145] - A[33]*tmp;
    A[146] = A[146] - A[34]*tmp;
    A[147] = A[147] - A[35]*tmp;
    A[148] = A[148] - A[36]*tmp;
    A[149] = A[149] - A[37]*tmp;
    A[150] = A[150] - A[38]*tmp;
    A[151] = A[151] - A[39]*tmp;
    A[152] = A[152] - A[40]*tmp;
    A[153] = A[153] - A[41]*tmp;
    tmp = A[156];
    A[157] = A[157] - A[31]*tmp;
    A[158] = A[158] - A[32]*tmp;
    A[159] = A[159] - A[33]*tmp;
    A[160] = A[160] - A[34]*tmp;
    A[161] = A[161] - A[35]*tmp;
    A[162] = A[162] - A[36]*tmp;
    A[163] = A[163] - A[37]*tmp;
    A[164] = A[164] - A[38]*tmp;
    A[165] = A[165] - A[39]*tmp;
    A[166] = A[166] - A[40]*tmp;
    A[167] = A[167] - A[41]*tmp;
    tmp = A[170];
    A[171] = A[171] - A[31]*tmp;
    A[172] = A[172] - A[32]*tmp;
    A[173] = A[173] - A[33]*tmp;
    A[174] = A[174] - A[34]*tmp;
    A[175] = A[175] - A[35]*tmp;
    A[176] = A[176] - A[36]*tmp;
    A[177] = A[177] - A[37]*tmp;
    A[178] = A[178] - A[38]*tmp;
    A[179] = A[179] - A[39]*tmp;
    A[180] = A[180] - A[40]*tmp;
    A[181] = A[181] - A[41]*tmp;
    tmp = A[184];
    A[185] = A[185] - A[31]*tmp;
    A[186] = A[186] - A[32]*tmp;
    A[187] = A[187] - A[33]*tmp;
    A[188] = A[188] - A[34]*tmp;
    A[189] = A[189] - A[35]*tmp;
    A[190] = A[190] - A[36]*tmp;
    A[191] = A[191] - A[37]*tmp;
    A[192] = A[192] - A[38]*tmp;
    A[193] = A[193] - A[39]*tmp;
    A[194] = A[194] - A[40]*tmp;
    A[195] = A[195] - A[41]*tmp;
    i_max = 3;
    a_max = abs(A[45]);
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 4; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 5; }
    if ( a_max < abs( A[48] ) ) { a_max = abs(A[48]); i_max = 6; }
    if ( a_max < abs( A[49] ) ) { a_max = abs(A[49]); i_max = 7; }
    if ( a_max < abs( A[50] ) ) { a_max = abs(A[50]); i_max = 8; }
    if ( a_max < abs( A[51] ) ) { a_max = abs(A[51]); i_max = 9; }
    if ( a_max < abs( A[52] ) ) { a_max = abs(A[52]); i_max = 10; }
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 11; }
    if ( a_max < abs( A[54] ) ) { a_max = abs(A[54]); i_max = 12; }
    if ( a_max < abs( A[55] ) ) { a_max = abs(A[55]); i_max = 13; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[17], A[i_max+14] );
    std::swap( A[31], A[i_max+28] );
    std::swap( A[45], A[i_max+42] );
    std::swap( A[59], A[i_max+56] );
    std::swap( A[73], A[i_max+70] );
    std::swap( A[87], A[i_max+84] );
    std::swap( A[101], A[i_max+98] );
    std::swap( A[115], A[i_max+112] );
    std::swap( A[129], A[i_max+126] );
    std::swap( A[143], A[i_max+140] );
    std::swap( A[157], A[i_max+154] );
    std::swap( A[171], A[i_max+168] );
    std::swap( A[185], A[i_max+182] );
    P[3] = i_max + 1;
    tmp = A[45];
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    A[48] = A[48] / tmp;
    A[49] = A[49] / tmp;
    A[50] = A[50] / tmp;
    A[51] = A[51] / tmp;
    A[52] = A[52] / tmp;
    A[53] = A[53] / tmp;
    A[54] = A[54] / tmp;
    A[55] = A[55] / tmp;
    tmp = A[59];
    A[60] = A[60] - A[46]*tmp;
    A[61] = A[61] - A[47]*tmp;
    A[62] = A[62] - A[48]*tmp;
    A[63] = A[63] - A[49]*tmp;
    A[64] = A[64] - A[50]*tmp;
    A[65] = A[65] - A[51]*tmp;
    A[66] = A[66] - A[52]*tmp;
    A[67] = A[67] - A[53]*tmp;
    A[68] = A[68] - A[54]*tmp;
    A[69] = A[69] - A[55]*tmp;
    tmp = A[73];
    A[74] = A[74] - A[46]*tmp;
    A[75] = A[75] - A[47]*tmp;
    A[76] = A[76] - A[48]*tmp;
    A[77] = A[77] - A[49]*tmp;
    A[78] = A[78] - A[50]*tmp;
    A[79] = A[79] - A[51]*tmp;
    A[80] = A[80] - A[52]*tmp;
    A[81] = A[81] - A[53]*tmp;
    A[82] = A[82] - A[54]*tmp;
    A[83] = A[83] - A[55]*tmp;
    tmp = A[87];
    A[88] = A[88] - A[46]*tmp;
    A[89] = A[89] - A[47]*tmp;
    A[90] = A[90] - A[48]*tmp;
    A[91] = A[91] - A[49]*tmp;
    A[92] = A[92] - A[50]*tmp;
    A[93] = A[93] - A[51]*tmp;
    A[94] = A[94] - A[52]*tmp;
    A[95] = A[95] - A[53]*tmp;
    A[96] = A[96] - A[54]*tmp;
    A[97] = A[97] - A[55]*tmp;
    tmp = A[101];
    A[102] = A[102] - A[46]*tmp;
    A[103] = A[103] - A[47]*tmp;
    A[104] = A[104] - A[48]*tmp;
    A[105] = A[105] - A[49]*tmp;
    A[106] = A[106] - A[50]*tmp;
    A[107] = A[107] - A[51]*tmp;
    A[108] = A[108] - A[52]*tmp;
    A[109] = A[109] - A[53]*tmp;
    A[110] = A[110] - A[54]*tmp;
    A[111] = A[111] - A[55]*tmp;
    tmp = A[115];
    A[116] = A[116] - A[46]*tmp;
    A[117] = A[117] - A[47]*tmp;
    A[118] = A[118] - A[48]*tmp;
    A[119] = A[119] - A[49]*tmp;
    A[120] = A[120] - A[50]*tmp;
    A[121] = A[121] - A[51]*tmp;
    A[122] = A[122] - A[52]*tmp;
    A[123] = A[123] - A[53]*tmp;
    A[124] = A[124] - A[54]*tmp;
    A[125] = A[125] - A[55]*tmp;
    tmp = A[129];
    A[130] = A[130] - A[46]*tmp;
    A[131] = A[131] - A[47]*tmp;
    A[132] = A[132] - A[48]*tmp;
    A[133] = A[133] - A[49]*tmp;
    A[134] = A[134] - A[50]*tmp;
    A[135] = A[135] - A[51]*tmp;
    A[136] = A[136] - A[52]*tmp;
    A[137] = A[137] - A[53]*tmp;
    A[138] = A[138] - A[54]*tmp;
    A[139] = A[139] - A[55]*tmp;
    tmp = A[143];
    A[144] = A[144] - A[46]*tmp;
    A[145] = A[145] - A[47]*tmp;
    A[146] = A[146] - A[48]*tmp;
    A[147] = A[147] - A[49]*tmp;
    A[148] = A[148] - A[50]*tmp;
    A[149] = A[149] - A[51]*tmp;
    A[150] = A[150] - A[52]*tmp;
    A[151] = A[151] - A[53]*tmp;
    A[152] = A[152] - A[54]*tmp;
    A[153] = A[153] - A[55]*tmp;
    tmp = A[157];
    A[158] = A[158] - A[46]*tmp;
    A[159] = A[159] - A[47]*tmp;
    A[160] = A[160] - A[48]*tmp;
    A[161] = A[161] - A[49]*tmp;
    A[162] = A[162] - A[50]*tmp;
    A[163] = A[163] - A[51]*tmp;
    A[164] = A[164] - A[52]*tmp;
    A[165] = A[165] - A[53]*tmp;
    A[166] = A[166] - A[54]*tmp;
    A[167] = A[167] - A[55]*tmp;
    tmp = A[171];
    A[172] = A[172] - A[46]*tmp;
    A[173] = A[173] - A[47]*tmp;
    A[174] = A[174] - A[48]*tmp;
    A[175] = A[175] - A[49]*tmp;
    A[176] = A[176] - A[50]*tmp;
    A[177] = A[177] - A[51]*tmp;
    A[178] = A[178] - A[52]*tmp;
    A[179] = A[179] - A[53]*tmp;
    A[180] = A[180] - A[54]*tmp;
    A[181] = A[181] - A[55]*tmp;
    tmp = A[185];
    A[186] = A[186] - A[46]*tmp;
    A[187] = A[187] - A[47]*tmp;
    A[188] = A[188] - A[48]*tmp;
    A[189] = A[189] - A[49]*tmp;
    A[190] = A[190] - A[50]*tmp;
    A[191] = A[191] - A[51]*tmp;
    A[192] = A[192] - A[52]*tmp;
    A[193] = A[193] - A[53]*tmp;
    A[194] = A[194] - A[54]*tmp;
    A[195] = A[195] - A[55]*tmp;
    i_max = 4;
    a_max = abs(A[60]);
    if ( a_max < abs( A[61] ) ) { a_max = abs(A[61]); i_max = 5; }
    if ( a_max < abs( A[62] ) ) { a_max = abs(A[62]); i_max = 6; }
    if ( a_max < abs( A[63] ) ) { a_max = abs(A[63]); i_max = 7; }
    if ( a_max < abs( A[64] ) ) { a_max = abs(A[64]); i_max = 8; }
    if ( a_max < abs( A[65] ) ) { a_max = abs(A[65]); i_max = 9; }
    if ( a_max < abs( A[66] ) ) { a_max = abs(A[66]); i_max = 10; }
    if ( a_max < abs( A[67] ) ) { a_max = abs(A[67]); i_max = 11; }
    if ( a_max < abs( A[68] ) ) { a_max = abs(A[68]); i_max = 12; }
    if ( a_max < abs( A[69] ) ) { a_max = abs(A[69]); i_max = 13; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[18], A[i_max+14] );
    std::swap( A[32], A[i_max+28] );
    std::swap( A[46], A[i_max+42] );
    std::swap( A[60], A[i_max+56] );
    std::swap( A[74], A[i_max+70] );
    std::swap( A[88], A[i_max+84] );
    std::swap( A[102], A[i_max+98] );
    std::swap( A[116], A[i_max+112] );
    std::swap( A[130], A[i_max+126] );
    std::swap( A[144], A[i_max+140] );
    std::swap( A[158], A[i_max+154] );
    std::swap( A[172], A[i_max+168] );
    std::swap( A[186], A[i_max+182] );
    P[4] = i_max + 1;
    tmp = A[60];
    A[61] = A[61] / tmp;
    A[62] = A[62] / tmp;
    A[63] = A[63] / tmp;
    A[64] = A[64] / tmp;
    A[65] = A[65] / tmp;
    A[66] = A[66] / tmp;
    A[67] = A[67] / tmp;
    A[68] = A[68] / tmp;
    A[69] = A[69] / tmp;
    tmp = A[74];
    A[75] = A[75] - A[61]*tmp;
    A[76] = A[76] - A[62]*tmp;
    A[77] = A[77] - A[63]*tmp;
    A[78] = A[78] - A[64]*tmp;
    A[79] = A[79] - A[65]*tmp;
    A[80] = A[80] - A[66]*tmp;
    A[81] = A[81] - A[67]*tmp;
    A[82] = A[82] - A[68]*tmp;
    A[83] = A[83] - A[69]*tmp;
    tmp = A[88];
    A[89] = A[89] - A[61]*tmp;
    A[90] = A[90] - A[62]*tmp;
    A[91] = A[91] - A[63]*tmp;
    A[92] = A[92] - A[64]*tmp;
    A[93] = A[93] - A[65]*tmp;
    A[94] = A[94] - A[66]*tmp;
    A[95] = A[95] - A[67]*tmp;
    A[96] = A[96] - A[68]*tmp;
    A[97] = A[97] - A[69]*tmp;
    tmp = A[102];
    A[103] = A[103] - A[61]*tmp;
    A[104] = A[104] - A[62]*tmp;
    A[105] = A[105] - A[63]*tmp;
    A[106] = A[106] - A[64]*tmp;
    A[107] = A[107] - A[65]*tmp;
    A[108] = A[108] - A[66]*tmp;
    A[109] = A[109] - A[67]*tmp;
    A[110] = A[110] - A[68]*tmp;
    A[111] = A[111] - A[69]*tmp;
    tmp = A[116];
    A[117] = A[117] - A[61]*tmp;
    A[118] = A[118] - A[62]*tmp;
    A[119] = A[119] - A[63]*tmp;
    A[120] = A[120] - A[64]*tmp;
    A[121] = A[121] - A[65]*tmp;
    A[122] = A[122] - A[66]*tmp;
    A[123] = A[123] - A[67]*tmp;
    A[124] = A[124] - A[68]*tmp;
    A[125] = A[125] - A[69]*tmp;
    tmp = A[130];
    A[131] = A[131] - A[61]*tmp;
    A[132] = A[132] - A[62]*tmp;
    A[133] = A[133] - A[63]*tmp;
    A[134] = A[134] - A[64]*tmp;
    A[135] = A[135] - A[65]*tmp;
    A[136] = A[136] - A[66]*tmp;
    A[137] = A[137] - A[67]*tmp;
    A[138] = A[138] - A[68]*tmp;
    A[139] = A[139] - A[69]*tmp;
    tmp = A[144];
    A[145] = A[145] - A[61]*tmp;
    A[146] = A[146] - A[62]*tmp;
    A[147] = A[147] - A[63]*tmp;
    A[148] = A[148] - A[64]*tmp;
    A[149] = A[149] - A[65]*tmp;
    A[150] = A[150] - A[66]*tmp;
    A[151] = A[151] - A[67]*tmp;
    A[152] = A[152] - A[68]*tmp;
    A[153] = A[153] - A[69]*tmp;
    tmp = A[158];
    A[159] = A[159] - A[61]*tmp;
    A[160] = A[160] - A[62]*tmp;
    A[161] = A[161] - A[63]*tmp;
    A[162] = A[162] - A[64]*tmp;
    A[163] = A[163] - A[65]*tmp;
    A[164] = A[164] - A[66]*tmp;
    A[165] = A[165] - A[67]*tmp;
    A[166] = A[166] - A[68]*tmp;
    A[167] = A[167] - A[69]*tmp;
    tmp = A[172];
    A[173] = A[173] - A[61]*tmp;
    A[174] = A[174] - A[62]*tmp;
    A[175] = A[175] - A[63]*tmp;
    A[176] = A[176] - A[64]*tmp;
    A[177] = A[177] - A[65]*tmp;
    A[178] = A[178] - A[66]*tmp;
    A[179] = A[179] - A[67]*tmp;
    A[180] = A[180] - A[68]*tmp;
    A[181] = A[181] - A[69]*tmp;
    tmp = A[186];
    A[187] = A[187] - A[61]*tmp;
    A[188] = A[188] - A[62]*tmp;
    A[189] = A[189] - A[63]*tmp;
    A[190] = A[190] - A[64]*tmp;
    A[191] = A[191] - A[65]*tmp;
    A[192] = A[192] - A[66]*tmp;
    A[193] = A[193] - A[67]*tmp;
    A[194] = A[194] - A[68]*tmp;
    A[195] = A[195] - A[69]*tmp;
    i_max = 5;
    a_max = abs(A[75]);
    if ( a_max < abs( A[76] ) ) { a_max = abs(A[76]); i_max = 6; }
    if ( a_max < abs( A[77] ) ) { a_max = abs(A[77]); i_max = 7; }
    if ( a_max < abs( A[78] ) ) { a_max = abs(A[78]); i_max = 8; }
    if ( a_max < abs( A[79] ) ) { a_max = abs(A[79]); i_max = 9; }
    if ( a_max < abs( A[80] ) ) { a_max = abs(A[80]); i_max = 10; }
    if ( a_max < abs( A[81] ) ) { a_max = abs(A[81]); i_max = 11; }
    if ( a_max < abs( A[82] ) ) { a_max = abs(A[82]); i_max = 12; }
    if ( a_max < abs( A[83] ) ) { a_max = abs(A[83]); i_max = 13; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[19], A[i_max+14] );
    std::swap( A[33], A[i_max+28] );
    std::swap( A[47], A[i_max+42] );
    std::swap( A[61], A[i_max+56] );
    std::swap( A[75], A[i_max+70] );
    std::swap( A[89], A[i_max+84] );
    std::swap( A[103], A[i_max+98] );
    std::swap( A[117], A[i_max+112] );
    std::swap( A[131], A[i_max+126] );
    std::swap( A[145], A[i_max+140] );
    std::swap( A[159], A[i_max+154] );
    std::swap( A[173], A[i_max+168] );
    std::swap( A[187], A[i_max+182] );
    P[5] = i_max + 1;
    tmp = A[75];
    A[76] = A[76] / tmp;
    A[77] = A[77] / tmp;
    A[78] = A[78] / tmp;
    A[79] = A[79] / tmp;
    A[80] = A[80] / tmp;
    A[81] = A[81] / tmp;
    A[82] = A[82] / tmp;
    A[83] = A[83] / tmp;
    tmp = A[89];
    A[90] = A[90] - A[76]*tmp;
    A[91] = A[91] - A[77]*tmp;
    A[92] = A[92] - A[78]*tmp;
    A[93] = A[93] - A[79]*tmp;
    A[94] = A[94] - A[80]*tmp;
    A[95] = A[95] - A[81]*tmp;
    A[96] = A[96] - A[82]*tmp;
    A[97] = A[97] - A[83]*tmp;
    tmp = A[103];
    A[104] = A[104] - A[76]*tmp;
    A[105] = A[105] - A[77]*tmp;
    A[106] = A[106] - A[78]*tmp;
    A[107] = A[107] - A[79]*tmp;
    A[108] = A[108] - A[80]*tmp;
    A[109] = A[109] - A[81]*tmp;
    A[110] = A[110] - A[82]*tmp;
    A[111] = A[111] - A[83]*tmp;
    tmp = A[117];
    A[118] = A[118] - A[76]*tmp;
    A[119] = A[119] - A[77]*tmp;
    A[120] = A[120] - A[78]*tmp;
    A[121] = A[121] - A[79]*tmp;
    A[122] = A[122] - A[80]*tmp;
    A[123] = A[123] - A[81]*tmp;
    A[124] = A[124] - A[82]*tmp;
    A[125] = A[125] - A[83]*tmp;
    tmp = A[131];
    A[132] = A[132] - A[76]*tmp;
    A[133] = A[133] - A[77]*tmp;
    A[134] = A[134] - A[78]*tmp;
    A[135] = A[135] - A[79]*tmp;
    A[136] = A[136] - A[80]*tmp;
    A[137] = A[137] - A[81]*tmp;
    A[138] = A[138] - A[82]*tmp;
    A[139] = A[139] - A[83]*tmp;
    tmp = A[145];
    A[146] = A[146] - A[76]*tmp;
    A[147] = A[147] - A[77]*tmp;
    A[148] = A[148] - A[78]*tmp;
    A[149] = A[149] - A[79]*tmp;
    A[150] = A[150] - A[80]*tmp;
    A[151] = A[151] - A[81]*tmp;
    A[152] = A[152] - A[82]*tmp;
    A[153] = A[153] - A[83]*tmp;
    tmp = A[159];
    A[160] = A[160] - A[76]*tmp;
    A[161] = A[161] - A[77]*tmp;
    A[162] = A[162] - A[78]*tmp;
    A[163] = A[163] - A[79]*tmp;
    A[164] = A[164] - A[80]*tmp;
    A[165] = A[165] - A[81]*tmp;
    A[166] = A[166] - A[82]*tmp;
    A[167] = A[167] - A[83]*tmp;
    tmp = A[173];
    A[174] = A[174] - A[76]*tmp;
    A[175] = A[175] - A[77]*tmp;
    A[176] = A[176] - A[78]*tmp;
    A[177] = A[177] - A[79]*tmp;
    A[178] = A[178] - A[80]*tmp;
    A[179] = A[179] - A[81]*tmp;
    A[180] = A[180] - A[82]*tmp;
    A[181] = A[181] - A[83]*tmp;
    tmp = A[187];
    A[188] = A[188] - A[76]*tmp;
    A[189] = A[189] - A[77]*tmp;
    A[190] = A[190] - A[78]*tmp;
    A[191] = A[191] - A[79]*tmp;
    A[192] = A[192] - A[80]*tmp;
    A[193] = A[193] - A[81]*tmp;
    A[194] = A[194] - A[82]*tmp;
    A[195] = A[195] - A[83]*tmp;
    i_max = 6;
    a_max = abs(A[90]);
    if ( a_max < abs( A[91] ) ) { a_max = abs(A[91]); i_max = 7; }
    if ( a_max < abs( A[92] ) ) { a_max = abs(A[92]); i_max = 8; }
    if ( a_max < abs( A[93] ) ) { a_max = abs(A[93]); i_max = 9; }
    if ( a_max < abs( A[94] ) ) { a_max = abs(A[94]); i_max = 10; }
    if ( a_max < abs( A[95] ) ) { a_max = abs(A[95]); i_max = 11; }
    if ( a_max < abs( A[96] ) ) { a_max = abs(A[96]); i_max = 12; }
    if ( a_max < abs( A[97] ) ) { a_max = abs(A[97]); i_max = 13; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[20], A[i_max+14] );
    std::swap( A[34], A[i_max+28] );
    std::swap( A[48], A[i_max+42] );
    std::swap( A[62], A[i_max+56] );
    std::swap( A[76], A[i_max+70] );
    std::swap( A[90], A[i_max+84] );
    std::swap( A[104], A[i_max+98] );
    std::swap( A[118], A[i_max+112] );
    std::swap( A[132], A[i_max+126] );
    std::swap( A[146], A[i_max+140] );
    std::swap( A[160], A[i_max+154] );
    std::swap( A[174], A[i_max+168] );
    std::swap( A[188], A[i_max+182] );
    P[6] = i_max + 1;
    tmp = A[90];
    A[91] = A[91] / tmp;
    A[92] = A[92] / tmp;
    A[93] = A[93] / tmp;
    A[94] = A[94] / tmp;
    A[95] = A[95] / tmp;
    A[96] = A[96] / tmp;
    A[97] = A[97] / tmp;
    tmp = A[104];
    A[105] = A[105] - A[91]*tmp;
    A[106] = A[106] - A[92]*tmp;
    A[107] = A[107] - A[93]*tmp;
    A[108] = A[108] - A[94]*tmp;
    A[109] = A[109] - A[95]*tmp;
    A[110] = A[110] - A[96]*tmp;
    A[111] = A[111] - A[97]*tmp;
    tmp = A[118];
    A[119] = A[119] - A[91]*tmp;
    A[120] = A[120] - A[92]*tmp;
    A[121] = A[121] - A[93]*tmp;
    A[122] = A[122] - A[94]*tmp;
    A[123] = A[123] - A[95]*tmp;
    A[124] = A[124] - A[96]*tmp;
    A[125] = A[125] - A[97]*tmp;
    tmp = A[132];
    A[133] = A[133] - A[91]*tmp;
    A[134] = A[134] - A[92]*tmp;
    A[135] = A[135] - A[93]*tmp;
    A[136] = A[136] - A[94]*tmp;
    A[137] = A[137] - A[95]*tmp;
    A[138] = A[138] - A[96]*tmp;
    A[139] = A[139] - A[97]*tmp;
    tmp = A[146];
    A[147] = A[147] - A[91]*tmp;
    A[148] = A[148] - A[92]*tmp;
    A[149] = A[149] - A[93]*tmp;
    A[150] = A[150] - A[94]*tmp;
    A[151] = A[151] - A[95]*tmp;
    A[152] = A[152] - A[96]*tmp;
    A[153] = A[153] - A[97]*tmp;
    tmp = A[160];
    A[161] = A[161] - A[91]*tmp;
    A[162] = A[162] - A[92]*tmp;
    A[163] = A[163] - A[93]*tmp;
    A[164] = A[164] - A[94]*tmp;
    A[165] = A[165] - A[95]*tmp;
    A[166] = A[166] - A[96]*tmp;
    A[167] = A[167] - A[97]*tmp;
    tmp = A[174];
    A[175] = A[175] - A[91]*tmp;
    A[176] = A[176] - A[92]*tmp;
    A[177] = A[177] - A[93]*tmp;
    A[178] = A[178] - A[94]*tmp;
    A[179] = A[179] - A[95]*tmp;
    A[180] = A[180] - A[96]*tmp;
    A[181] = A[181] - A[97]*tmp;
    tmp = A[188];
    A[189] = A[189] - A[91]*tmp;
    A[190] = A[190] - A[92]*tmp;
    A[191] = A[191] - A[93]*tmp;
    A[192] = A[192] - A[94]*tmp;
    A[193] = A[193] - A[95]*tmp;
    A[194] = A[194] - A[96]*tmp;
    A[195] = A[195] - A[97]*tmp;
    i_max = 7;
    a_max = abs(A[105]);
    if ( a_max < abs( A[106] ) ) { a_max = abs(A[106]); i_max = 8; }
    if ( a_max < abs( A[107] ) ) { a_max = abs(A[107]); i_max = 9; }
    if ( a_max < abs( A[108] ) ) { a_max = abs(A[108]); i_max = 10; }
    if ( a_max < abs( A[109] ) ) { a_max = abs(A[109]); i_max = 11; }
    if ( a_max < abs( A[110] ) ) { a_max = abs(A[110]); i_max = 12; }
    if ( a_max < abs( A[111] ) ) { a_max = abs(A[111]); i_max = 13; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[21], A[i_max+14] );
    std::swap( A[35], A[i_max+28] );
    std::swap( A[49], A[i_max+42] );
    std::swap( A[63], A[i_max+56] );
    std::swap( A[77], A[i_max+70] );
    std::swap( A[91], A[i_max+84] );
    std::swap( A[105], A[i_max+98] );
    std::swap( A[119], A[i_max+112] );
    std::swap( A[133], A[i_max+126] );
    std::swap( A[147], A[i_max+140] );
    std::swap( A[161], A[i_max+154] );
    std::swap( A[175], A[i_max+168] );
    std::swap( A[189], A[i_max+182] );
    P[7] = i_max + 1;
    tmp = A[105];
    A[106] = A[106] / tmp;
    A[107] = A[107] / tmp;
    A[108] = A[108] / tmp;
    A[109] = A[109] / tmp;
    A[110] = A[110] / tmp;
    A[111] = A[111] / tmp;
    tmp = A[119];
    A[120] = A[120] - A[106]*tmp;
    A[121] = A[121] - A[107]*tmp;
    A[122] = A[122] - A[108]*tmp;
    A[123] = A[123] - A[109]*tmp;
    A[124] = A[124] - A[110]*tmp;
    A[125] = A[125] - A[111]*tmp;
    tmp = A[133];
    A[134] = A[134] - A[106]*tmp;
    A[135] = A[135] - A[107]*tmp;
    A[136] = A[136] - A[108]*tmp;
    A[137] = A[137] - A[109]*tmp;
    A[138] = A[138] - A[110]*tmp;
    A[139] = A[139] - A[111]*tmp;
    tmp = A[147];
    A[148] = A[148] - A[106]*tmp;
    A[149] = A[149] - A[107]*tmp;
    A[150] = A[150] - A[108]*tmp;
    A[151] = A[151] - A[109]*tmp;
    A[152] = A[152] - A[110]*tmp;
    A[153] = A[153] - A[111]*tmp;
    tmp = A[161];
    A[162] = A[162] - A[106]*tmp;
    A[163] = A[163] - A[107]*tmp;
    A[164] = A[164] - A[108]*tmp;
    A[165] = A[165] - A[109]*tmp;
    A[166] = A[166] - A[110]*tmp;
    A[167] = A[167] - A[111]*tmp;
    tmp = A[175];
    A[176] = A[176] - A[106]*tmp;
    A[177] = A[177] - A[107]*tmp;
    A[178] = A[178] - A[108]*tmp;
    A[179] = A[179] - A[109]*tmp;
    A[180] = A[180] - A[110]*tmp;
    A[181] = A[181] - A[111]*tmp;
    tmp = A[189];
    A[190] = A[190] - A[106]*tmp;
    A[191] = A[191] - A[107]*tmp;
    A[192] = A[192] - A[108]*tmp;
    A[193] = A[193] - A[109]*tmp;
    A[194] = A[194] - A[110]*tmp;
    A[195] = A[195] - A[111]*tmp;
    i_max = 8;
    a_max = abs(A[120]);
    if ( a_max < abs( A[121] ) ) { a_max = abs(A[121]); i_max = 9; }
    if ( a_max < abs( A[122] ) ) { a_max = abs(A[122]); i_max = 10; }
    if ( a_max < abs( A[123] ) ) { a_max = abs(A[123]); i_max = 11; }
    if ( a_max < abs( A[124] ) ) { a_max = abs(A[124]); i_max = 12; }
    if ( a_max < abs( A[125] ) ) { a_max = abs(A[125]); i_max = 13; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[22], A[i_max+14] );
    std::swap( A[36], A[i_max+28] );
    std::swap( A[50], A[i_max+42] );
    std::swap( A[64], A[i_max+56] );
    std::swap( A[78], A[i_max+70] );
    std::swap( A[92], A[i_max+84] );
    std::swap( A[106], A[i_max+98] );
    std::swap( A[120], A[i_max+112] );
    std::swap( A[134], A[i_max+126] );
    std::swap( A[148], A[i_max+140] );
    std::swap( A[162], A[i_max+154] );
    std::swap( A[176], A[i_max+168] );
    std::swap( A[190], A[i_max+182] );
    P[8] = i_max + 1;
    tmp = A[120];
    A[121] = A[121] / tmp;
    A[122] = A[122] / tmp;
    A[123] = A[123] / tmp;
    A[124] = A[124] / tmp;
    A[125] = A[125] / tmp;
    tmp = A[134];
    A[135] = A[135] - A[121]*tmp;
    A[136] = A[136] - A[122]*tmp;
    A[137] = A[137] - A[123]*tmp;
    A[138] = A[138] - A[124]*tmp;
    A[139] = A[139] - A[125]*tmp;
    tmp = A[148];
    A[149] = A[149] - A[121]*tmp;
    A[150] = A[150] - A[122]*tmp;
    A[151] = A[151] - A[123]*tmp;
    A[152] = A[152] - A[124]*tmp;
    A[153] = A[153] - A[125]*tmp;
    tmp = A[162];
    A[163] = A[163] - A[121]*tmp;
    A[164] = A[164] - A[122]*tmp;
    A[165] = A[165] - A[123]*tmp;
    A[166] = A[166] - A[124]*tmp;
    A[167] = A[167] - A[125]*tmp;
    tmp = A[176];
    A[177] = A[177] - A[121]*tmp;
    A[178] = A[178] - A[122]*tmp;
    A[179] = A[179] - A[123]*tmp;
    A[180] = A[180] - A[124]*tmp;
    A[181] = A[181] - A[125]*tmp;
    tmp = A[190];
    A[191] = A[191] - A[121]*tmp;
    A[192] = A[192] - A[122]*tmp;
    A[193] = A[193] - A[123]*tmp;
    A[194] = A[194] - A[124]*tmp;
    A[195] = A[195] - A[125]*tmp;
    i_max = 9;
    a_max = abs(A[135]);
    if ( a_max < abs( A[136] ) ) { a_max = abs(A[136]); i_max = 10; }
    if ( a_max < abs( A[137] ) ) { a_max = abs(A[137]); i_max = 11; }
    if ( a_max < abs( A[138] ) ) { a_max = abs(A[138]); i_max = 12; }
    if ( a_max < abs( A[139] ) ) { a_max = abs(A[139]); i_max = 13; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[23], A[i_max+14] );
    std::swap( A[37], A[i_max+28] );
    std::swap( A[51], A[i_max+42] );
    std::swap( A[65], A[i_max+56] );
    std::swap( A[79], A[i_max+70] );
    std::swap( A[93], A[i_max+84] );
    std::swap( A[107], A[i_max+98] );
    std::swap( A[121], A[i_max+112] );
    std::swap( A[135], A[i_max+126] );
    std::swap( A[149], A[i_max+140] );
    std::swap( A[163], A[i_max+154] );
    std::swap( A[177], A[i_max+168] );
    std::swap( A[191], A[i_max+182] );
    P[9] = i_max + 1;
    tmp = A[135];
    A[136] = A[136] / tmp;
    A[137] = A[137] / tmp;
    A[138] = A[138] / tmp;
    A[139] = A[139] / tmp;
    tmp = A[149];
    A[150] = A[150] - A[136]*tmp;
    A[151] = A[151] - A[137]*tmp;
    A[152] = A[152] - A[138]*tmp;
    A[153] = A[153] - A[139]*tmp;
    tmp = A[163];
    A[164] = A[164] - A[136]*tmp;
    A[165] = A[165] - A[137]*tmp;
    A[166] = A[166] - A[138]*tmp;
    A[167] = A[167] - A[139]*tmp;
    tmp = A[177];
    A[178] = A[178] - A[136]*tmp;
    A[179] = A[179] - A[137]*tmp;
    A[180] = A[180] - A[138]*tmp;
    A[181] = A[181] - A[139]*tmp;
    tmp = A[191];
    A[192] = A[192] - A[136]*tmp;
    A[193] = A[193] - A[137]*tmp;
    A[194] = A[194] - A[138]*tmp;
    A[195] = A[195] - A[139]*tmp;
    i_max = 10;
    a_max = abs(A[150]);
    if ( a_max < abs( A[151] ) ) { a_max = abs(A[151]); i_max = 11; }
    if ( a_max < abs( A[152] ) ) { a_max = abs(A[152]); i_max = 12; }
    if ( a_max < abs( A[153] ) ) { a_max = abs(A[153]); i_max = 13; }
    std::swap( A[10], A[i_max+0] );
    std::swap( A[24], A[i_max+14] );
    std::swap( A[38], A[i_max+28] );
    std::swap( A[52], A[i_max+42] );
    std::swap( A[66], A[i_max+56] );
    std::swap( A[80], A[i_max+70] );
    std::swap( A[94], A[i_max+84] );
    std::swap( A[108], A[i_max+98] );
    std::swap( A[122], A[i_max+112] );
    std::swap( A[136], A[i_max+126] );
    std::swap( A[150], A[i_max+140] );
    std::swap( A[164], A[i_max+154] );
    std::swap( A[178], A[i_max+168] );
    std::swap( A[192], A[i_max+182] );
    P[10] = i_max + 1;
    tmp = A[150];
    A[151] = A[151] / tmp;
    A[152] = A[152] / tmp;
    A[153] = A[153] / tmp;
    tmp = A[164];
    A[165] = A[165] - A[151]*tmp;
    A[166] = A[166] - A[152]*tmp;
    A[167] = A[167] - A[153]*tmp;
    tmp = A[178];
    A[179] = A[179] - A[151]*tmp;
    A[180] = A[180] - A[152]*tmp;
    A[181] = A[181] - A[153]*tmp;
    tmp = A[192];
    A[193] = A[193] - A[151]*tmp;
    A[194] = A[194] - A[152]*tmp;
    A[195] = A[195] - A[153]*tmp;
    i_max = 11;
    a_max = abs(A[165]);
    if ( a_max < abs( A[166] ) ) { a_max = abs(A[166]); i_max = 12; }
    if ( a_max < abs( A[167] ) ) { a_max = abs(A[167]); i_max = 13; }
    std::swap( A[11], A[i_max+0] );
    std::swap( A[25], A[i_max+14] );
    std::swap( A[39], A[i_max+28] );
    std::swap( A[53], A[i_max+42] );
    std::swap( A[67], A[i_max+56] );
    std::swap( A[81], A[i_max+70] );
    std::swap( A[95], A[i_max+84] );
    std::swap( A[109], A[i_max+98] );
    std::swap( A[123], A[i_max+112] );
    std::swap( A[137], A[i_max+126] );
    std::swap( A[151], A[i_max+140] );
    std::swap( A[165], A[i_max+154] );
    std::swap( A[179], A[i_max+168] );
    std::swap( A[193], A[i_max+182] );
    P[11] = i_max + 1;
    tmp = A[165];
    A[166] = A[166] / tmp;
    A[167] = A[167] / tmp;
    tmp = A[179];
    A[180] = A[180] - A[166]*tmp;
    A[181] = A[181] - A[167]*tmp;
    tmp = A[193];
    A[194] = A[194] - A[166]*tmp;
    A[195] = A[195] - A[167]*tmp;
    i_max = 12;
    a_max = abs(A[180]);
    if ( a_max < abs( A[181] ) ) { a_max = abs(A[181]); i_max = 13; }
    std::swap( A[12], A[i_max+0] );
    std::swap( A[26], A[i_max+14] );
    std::swap( A[40], A[i_max+28] );
    std::swap( A[54], A[i_max+42] );
    std::swap( A[68], A[i_max+56] );
    std::swap( A[82], A[i_max+70] );
    std::swap( A[96], A[i_max+84] );
    std::swap( A[110], A[i_max+98] );
    std::swap( A[124], A[i_max+112] );
    std::swap( A[138], A[i_max+126] );
    std::swap( A[152], A[i_max+140] );
    std::swap( A[166], A[i_max+154] );
    std::swap( A[180], A[i_max+168] );
    std::swap( A[194], A[i_max+182] );
    P[12] = i_max + 1;
    tmp = A[180];
    A[181] = A[181] / tmp;
    tmp = A[194];
    A[195] = A[195] - A[181]*tmp;
    P[13] = 14;
}

void lu_15( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 11; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 12; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 13; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 14; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[15], A[i_max+15] );
    std::swap( A[30], A[i_max+30] );
    std::swap( A[45], A[i_max+45] );
    std::swap( A[60], A[i_max+60] );
    std::swap( A[75], A[i_max+75] );
    std::swap( A[90], A[i_max+90] );
    std::swap( A[105], A[i_max+105] );
    std::swap( A[120], A[i_max+120] );
    std::swap( A[135], A[i_max+135] );
    std::swap( A[150], A[i_max+150] );
    std::swap( A[165], A[i_max+165] );
    std::swap( A[180], A[i_max+180] );
    std::swap( A[195], A[i_max+195] );
    std::swap( A[210], A[i_max+210] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    tmp = A[15];
    A[16] = A[16] - A[1]*tmp;
    A[17] = A[17] - A[2]*tmp;
    A[18] = A[18] - A[3]*tmp;
    A[19] = A[19] - A[4]*tmp;
    A[20] = A[20] - A[5]*tmp;
    A[21] = A[21] - A[6]*tmp;
    A[22] = A[22] - A[7]*tmp;
    A[23] = A[23] - A[8]*tmp;
    A[24] = A[24] - A[9]*tmp;
    A[25] = A[25] - A[10]*tmp;
    A[26] = A[26] - A[11]*tmp;
    A[27] = A[27] - A[12]*tmp;
    A[28] = A[28] - A[13]*tmp;
    A[29] = A[29] - A[14]*tmp;
    tmp = A[30];
    A[31] = A[31] - A[1]*tmp;
    A[32] = A[32] - A[2]*tmp;
    A[33] = A[33] - A[3]*tmp;
    A[34] = A[34] - A[4]*tmp;
    A[35] = A[35] - A[5]*tmp;
    A[36] = A[36] - A[6]*tmp;
    A[37] = A[37] - A[7]*tmp;
    A[38] = A[38] - A[8]*tmp;
    A[39] = A[39] - A[9]*tmp;
    A[40] = A[40] - A[10]*tmp;
    A[41] = A[41] - A[11]*tmp;
    A[42] = A[42] - A[12]*tmp;
    A[43] = A[43] - A[13]*tmp;
    A[44] = A[44] - A[14]*tmp;
    tmp = A[45];
    A[46] = A[46] - A[1]*tmp;
    A[47] = A[47] - A[2]*tmp;
    A[48] = A[48] - A[3]*tmp;
    A[49] = A[49] - A[4]*tmp;
    A[50] = A[50] - A[5]*tmp;
    A[51] = A[51] - A[6]*tmp;
    A[52] = A[52] - A[7]*tmp;
    A[53] = A[53] - A[8]*tmp;
    A[54] = A[54] - A[9]*tmp;
    A[55] = A[55] - A[10]*tmp;
    A[56] = A[56] - A[11]*tmp;
    A[57] = A[57] - A[12]*tmp;
    A[58] = A[58] - A[13]*tmp;
    A[59] = A[59] - A[14]*tmp;
    tmp = A[60];
    A[61] = A[61] - A[1]*tmp;
    A[62] = A[62] - A[2]*tmp;
    A[63] = A[63] - A[3]*tmp;
    A[64] = A[64] - A[4]*tmp;
    A[65] = A[65] - A[5]*tmp;
    A[66] = A[66] - A[6]*tmp;
    A[67] = A[67] - A[7]*tmp;
    A[68] = A[68] - A[8]*tmp;
    A[69] = A[69] - A[9]*tmp;
    A[70] = A[70] - A[10]*tmp;
    A[71] = A[71] - A[11]*tmp;
    A[72] = A[72] - A[12]*tmp;
    A[73] = A[73] - A[13]*tmp;
    A[74] = A[74] - A[14]*tmp;
    tmp = A[75];
    A[76] = A[76] - A[1]*tmp;
    A[77] = A[77] - A[2]*tmp;
    A[78] = A[78] - A[3]*tmp;
    A[79] = A[79] - A[4]*tmp;
    A[80] = A[80] - A[5]*tmp;
    A[81] = A[81] - A[6]*tmp;
    A[82] = A[82] - A[7]*tmp;
    A[83] = A[83] - A[8]*tmp;
    A[84] = A[84] - A[9]*tmp;
    A[85] = A[85] - A[10]*tmp;
    A[86] = A[86] - A[11]*tmp;
    A[87] = A[87] - A[12]*tmp;
    A[88] = A[88] - A[13]*tmp;
    A[89] = A[89] - A[14]*tmp;
    tmp = A[90];
    A[91] = A[91] - A[1]*tmp;
    A[92] = A[92] - A[2]*tmp;
    A[93] = A[93] - A[3]*tmp;
    A[94] = A[94] - A[4]*tmp;
    A[95] = A[95] - A[5]*tmp;
    A[96] = A[96] - A[6]*tmp;
    A[97] = A[97] - A[7]*tmp;
    A[98] = A[98] - A[8]*tmp;
    A[99] = A[99] - A[9]*tmp;
    A[100] = A[100] - A[10]*tmp;
    A[101] = A[101] - A[11]*tmp;
    A[102] = A[102] - A[12]*tmp;
    A[103] = A[103] - A[13]*tmp;
    A[104] = A[104] - A[14]*tmp;
    tmp = A[105];
    A[106] = A[106] - A[1]*tmp;
    A[107] = A[107] - A[2]*tmp;
    A[108] = A[108] - A[3]*tmp;
    A[109] = A[109] - A[4]*tmp;
    A[110] = A[110] - A[5]*tmp;
    A[111] = A[111] - A[6]*tmp;
    A[112] = A[112] - A[7]*tmp;
    A[113] = A[113] - A[8]*tmp;
    A[114] = A[114] - A[9]*tmp;
    A[115] = A[115] - A[10]*tmp;
    A[116] = A[116] - A[11]*tmp;
    A[117] = A[117] - A[12]*tmp;
    A[118] = A[118] - A[13]*tmp;
    A[119] = A[119] - A[14]*tmp;
    tmp = A[120];
    A[121] = A[121] - A[1]*tmp;
    A[122] = A[122] - A[2]*tmp;
    A[123] = A[123] - A[3]*tmp;
    A[124] = A[124] - A[4]*tmp;
    A[125] = A[125] - A[5]*tmp;
    A[126] = A[126] - A[6]*tmp;
    A[127] = A[127] - A[7]*tmp;
    A[128] = A[128] - A[8]*tmp;
    A[129] = A[129] - A[9]*tmp;
    A[130] = A[130] - A[10]*tmp;
    A[131] = A[131] - A[11]*tmp;
    A[132] = A[132] - A[12]*tmp;
    A[133] = A[133] - A[13]*tmp;
    A[134] = A[134] - A[14]*tmp;
    tmp = A[135];
    A[136] = A[136] - A[1]*tmp;
    A[137] = A[137] - A[2]*tmp;
    A[138] = A[138] - A[3]*tmp;
    A[139] = A[139] - A[4]*tmp;
    A[140] = A[140] - A[5]*tmp;
    A[141] = A[141] - A[6]*tmp;
    A[142] = A[142] - A[7]*tmp;
    A[143] = A[143] - A[8]*tmp;
    A[144] = A[144] - A[9]*tmp;
    A[145] = A[145] - A[10]*tmp;
    A[146] = A[146] - A[11]*tmp;
    A[147] = A[147] - A[12]*tmp;
    A[148] = A[148] - A[13]*tmp;
    A[149] = A[149] - A[14]*tmp;
    tmp = A[150];
    A[151] = A[151] - A[1]*tmp;
    A[152] = A[152] - A[2]*tmp;
    A[153] = A[153] - A[3]*tmp;
    A[154] = A[154] - A[4]*tmp;
    A[155] = A[155] - A[5]*tmp;
    A[156] = A[156] - A[6]*tmp;
    A[157] = A[157] - A[7]*tmp;
    A[158] = A[158] - A[8]*tmp;
    A[159] = A[159] - A[9]*tmp;
    A[160] = A[160] - A[10]*tmp;
    A[161] = A[161] - A[11]*tmp;
    A[162] = A[162] - A[12]*tmp;
    A[163] = A[163] - A[13]*tmp;
    A[164] = A[164] - A[14]*tmp;
    tmp = A[165];
    A[166] = A[166] - A[1]*tmp;
    A[167] = A[167] - A[2]*tmp;
    A[168] = A[168] - A[3]*tmp;
    A[169] = A[169] - A[4]*tmp;
    A[170] = A[170] - A[5]*tmp;
    A[171] = A[171] - A[6]*tmp;
    A[172] = A[172] - A[7]*tmp;
    A[173] = A[173] - A[8]*tmp;
    A[174] = A[174] - A[9]*tmp;
    A[175] = A[175] - A[10]*tmp;
    A[176] = A[176] - A[11]*tmp;
    A[177] = A[177] - A[12]*tmp;
    A[178] = A[178] - A[13]*tmp;
    A[179] = A[179] - A[14]*tmp;
    tmp = A[180];
    A[181] = A[181] - A[1]*tmp;
    A[182] = A[182] - A[2]*tmp;
    A[183] = A[183] - A[3]*tmp;
    A[184] = A[184] - A[4]*tmp;
    A[185] = A[185] - A[5]*tmp;
    A[186] = A[186] - A[6]*tmp;
    A[187] = A[187] - A[7]*tmp;
    A[188] = A[188] - A[8]*tmp;
    A[189] = A[189] - A[9]*tmp;
    A[190] = A[190] - A[10]*tmp;
    A[191] = A[191] - A[11]*tmp;
    A[192] = A[192] - A[12]*tmp;
    A[193] = A[193] - A[13]*tmp;
    A[194] = A[194] - A[14]*tmp;
    tmp = A[195];
    A[196] = A[196] - A[1]*tmp;
    A[197] = A[197] - A[2]*tmp;
    A[198] = A[198] - A[3]*tmp;
    A[199] = A[199] - A[4]*tmp;
    A[200] = A[200] - A[5]*tmp;
    A[201] = A[201] - A[6]*tmp;
    A[202] = A[202] - A[7]*tmp;
    A[203] = A[203] - A[8]*tmp;
    A[204] = A[204] - A[9]*tmp;
    A[205] = A[205] - A[10]*tmp;
    A[206] = A[206] - A[11]*tmp;
    A[207] = A[207] - A[12]*tmp;
    A[208] = A[208] - A[13]*tmp;
    A[209] = A[209] - A[14]*tmp;
    tmp = A[210];
    A[211] = A[211] - A[1]*tmp;
    A[212] = A[212] - A[2]*tmp;
    A[213] = A[213] - A[3]*tmp;
    A[214] = A[214] - A[4]*tmp;
    A[215] = A[215] - A[5]*tmp;
    A[216] = A[216] - A[6]*tmp;
    A[217] = A[217] - A[7]*tmp;
    A[218] = A[218] - A[8]*tmp;
    A[219] = A[219] - A[9]*tmp;
    A[220] = A[220] - A[10]*tmp;
    A[221] = A[221] - A[11]*tmp;
    A[222] = A[222] - A[12]*tmp;
    A[223] = A[223] - A[13]*tmp;
    A[224] = A[224] - A[14]*tmp;
    i_max = 1;
    a_max = abs(A[16]);
    if ( a_max < abs( A[17] ) ) { a_max = abs(A[17]); i_max = 2; }
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 3; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 4; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 5; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 6; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 7; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 8; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 9; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 10; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 11; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 12; }
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 13; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 14; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[16], A[i_max+15] );
    std::swap( A[31], A[i_max+30] );
    std::swap( A[46], A[i_max+45] );
    std::swap( A[61], A[i_max+60] );
    std::swap( A[76], A[i_max+75] );
    std::swap( A[91], A[i_max+90] );
    std::swap( A[106], A[i_max+105] );
    std::swap( A[121], A[i_max+120] );
    std::swap( A[136], A[i_max+135] );
    std::swap( A[151], A[i_max+150] );
    std::swap( A[166], A[i_max+165] );
    std::swap( A[181], A[i_max+180] );
    std::swap( A[196], A[i_max+195] );
    std::swap( A[211], A[i_max+210] );
    P[1] = i_max + 1;
    tmp = A[16];
    A[17] = A[17] / tmp;
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    tmp = A[31];
    A[32] = A[32] - A[17]*tmp;
    A[33] = A[33] - A[18]*tmp;
    A[34] = A[34] - A[19]*tmp;
    A[35] = A[35] - A[20]*tmp;
    A[36] = A[36] - A[21]*tmp;
    A[37] = A[37] - A[22]*tmp;
    A[38] = A[38] - A[23]*tmp;
    A[39] = A[39] - A[24]*tmp;
    A[40] = A[40] - A[25]*tmp;
    A[41] = A[41] - A[26]*tmp;
    A[42] = A[42] - A[27]*tmp;
    A[43] = A[43] - A[28]*tmp;
    A[44] = A[44] - A[29]*tmp;
    tmp = A[46];
    A[47] = A[47] - A[17]*tmp;
    A[48] = A[48] - A[18]*tmp;
    A[49] = A[49] - A[19]*tmp;
    A[50] = A[50] - A[20]*tmp;
    A[51] = A[51] - A[21]*tmp;
    A[52] = A[52] - A[22]*tmp;
    A[53] = A[53] - A[23]*tmp;
    A[54] = A[54] - A[24]*tmp;
    A[55] = A[55] - A[25]*tmp;
    A[56] = A[56] - A[26]*tmp;
    A[57] = A[57] - A[27]*tmp;
    A[58] = A[58] - A[28]*tmp;
    A[59] = A[59] - A[29]*tmp;
    tmp = A[61];
    A[62] = A[62] - A[17]*tmp;
    A[63] = A[63] - A[18]*tmp;
    A[64] = A[64] - A[19]*tmp;
    A[65] = A[65] - A[20]*tmp;
    A[66] = A[66] - A[21]*tmp;
    A[67] = A[67] - A[22]*tmp;
    A[68] = A[68] - A[23]*tmp;
    A[69] = A[69] - A[24]*tmp;
    A[70] = A[70] - A[25]*tmp;
    A[71] = A[71] - A[26]*tmp;
    A[72] = A[72] - A[27]*tmp;
    A[73] = A[73] - A[28]*tmp;
    A[74] = A[74] - A[29]*tmp;
    tmp = A[76];
    A[77] = A[77] - A[17]*tmp;
    A[78] = A[78] - A[18]*tmp;
    A[79] = A[79] - A[19]*tmp;
    A[80] = A[80] - A[20]*tmp;
    A[81] = A[81] - A[21]*tmp;
    A[82] = A[82] - A[22]*tmp;
    A[83] = A[83] - A[23]*tmp;
    A[84] = A[84] - A[24]*tmp;
    A[85] = A[85] - A[25]*tmp;
    A[86] = A[86] - A[26]*tmp;
    A[87] = A[87] - A[27]*tmp;
    A[88] = A[88] - A[28]*tmp;
    A[89] = A[89] - A[29]*tmp;
    tmp = A[91];
    A[92] = A[92] - A[17]*tmp;
    A[93] = A[93] - A[18]*tmp;
    A[94] = A[94] - A[19]*tmp;
    A[95] = A[95] - A[20]*tmp;
    A[96] = A[96] - A[21]*tmp;
    A[97] = A[97] - A[22]*tmp;
    A[98] = A[98] - A[23]*tmp;
    A[99] = A[99] - A[24]*tmp;
    A[100] = A[100] - A[25]*tmp;
    A[101] = A[101] - A[26]*tmp;
    A[102] = A[102] - A[27]*tmp;
    A[103] = A[103] - A[28]*tmp;
    A[104] = A[104] - A[29]*tmp;
    tmp = A[106];
    A[107] = A[107] - A[17]*tmp;
    A[108] = A[108] - A[18]*tmp;
    A[109] = A[109] - A[19]*tmp;
    A[110] = A[110] - A[20]*tmp;
    A[111] = A[111] - A[21]*tmp;
    A[112] = A[112] - A[22]*tmp;
    A[113] = A[113] - A[23]*tmp;
    A[114] = A[114] - A[24]*tmp;
    A[115] = A[115] - A[25]*tmp;
    A[116] = A[116] - A[26]*tmp;
    A[117] = A[117] - A[27]*tmp;
    A[118] = A[118] - A[28]*tmp;
    A[119] = A[119] - A[29]*tmp;
    tmp = A[121];
    A[122] = A[122] - A[17]*tmp;
    A[123] = A[123] - A[18]*tmp;
    A[124] = A[124] - A[19]*tmp;
    A[125] = A[125] - A[20]*tmp;
    A[126] = A[126] - A[21]*tmp;
    A[127] = A[127] - A[22]*tmp;
    A[128] = A[128] - A[23]*tmp;
    A[129] = A[129] - A[24]*tmp;
    A[130] = A[130] - A[25]*tmp;
    A[131] = A[131] - A[26]*tmp;
    A[132] = A[132] - A[27]*tmp;
    A[133] = A[133] - A[28]*tmp;
    A[134] = A[134] - A[29]*tmp;
    tmp = A[136];
    A[137] = A[137] - A[17]*tmp;
    A[138] = A[138] - A[18]*tmp;
    A[139] = A[139] - A[19]*tmp;
    A[140] = A[140] - A[20]*tmp;
    A[141] = A[141] - A[21]*tmp;
    A[142] = A[142] - A[22]*tmp;
    A[143] = A[143] - A[23]*tmp;
    A[144] = A[144] - A[24]*tmp;
    A[145] = A[145] - A[25]*tmp;
    A[146] = A[146] - A[26]*tmp;
    A[147] = A[147] - A[27]*tmp;
    A[148] = A[148] - A[28]*tmp;
    A[149] = A[149] - A[29]*tmp;
    tmp = A[151];
    A[152] = A[152] - A[17]*tmp;
    A[153] = A[153] - A[18]*tmp;
    A[154] = A[154] - A[19]*tmp;
    A[155] = A[155] - A[20]*tmp;
    A[156] = A[156] - A[21]*tmp;
    A[157] = A[157] - A[22]*tmp;
    A[158] = A[158] - A[23]*tmp;
    A[159] = A[159] - A[24]*tmp;
    A[160] = A[160] - A[25]*tmp;
    A[161] = A[161] - A[26]*tmp;
    A[162] = A[162] - A[27]*tmp;
    A[163] = A[163] - A[28]*tmp;
    A[164] = A[164] - A[29]*tmp;
    tmp = A[166];
    A[167] = A[167] - A[17]*tmp;
    A[168] = A[168] - A[18]*tmp;
    A[169] = A[169] - A[19]*tmp;
    A[170] = A[170] - A[20]*tmp;
    A[171] = A[171] - A[21]*tmp;
    A[172] = A[172] - A[22]*tmp;
    A[173] = A[173] - A[23]*tmp;
    A[174] = A[174] - A[24]*tmp;
    A[175] = A[175] - A[25]*tmp;
    A[176] = A[176] - A[26]*tmp;
    A[177] = A[177] - A[27]*tmp;
    A[178] = A[178] - A[28]*tmp;
    A[179] = A[179] - A[29]*tmp;
    tmp = A[181];
    A[182] = A[182] - A[17]*tmp;
    A[183] = A[183] - A[18]*tmp;
    A[184] = A[184] - A[19]*tmp;
    A[185] = A[185] - A[20]*tmp;
    A[186] = A[186] - A[21]*tmp;
    A[187] = A[187] - A[22]*tmp;
    A[188] = A[188] - A[23]*tmp;
    A[189] = A[189] - A[24]*tmp;
    A[190] = A[190] - A[25]*tmp;
    A[191] = A[191] - A[26]*tmp;
    A[192] = A[192] - A[27]*tmp;
    A[193] = A[193] - A[28]*tmp;
    A[194] = A[194] - A[29]*tmp;
    tmp = A[196];
    A[197] = A[197] - A[17]*tmp;
    A[198] = A[198] - A[18]*tmp;
    A[199] = A[199] - A[19]*tmp;
    A[200] = A[200] - A[20]*tmp;
    A[201] = A[201] - A[21]*tmp;
    A[202] = A[202] - A[22]*tmp;
    A[203] = A[203] - A[23]*tmp;
    A[204] = A[204] - A[24]*tmp;
    A[205] = A[205] - A[25]*tmp;
    A[206] = A[206] - A[26]*tmp;
    A[207] = A[207] - A[27]*tmp;
    A[208] = A[208] - A[28]*tmp;
    A[209] = A[209] - A[29]*tmp;
    tmp = A[211];
    A[212] = A[212] - A[17]*tmp;
    A[213] = A[213] - A[18]*tmp;
    A[214] = A[214] - A[19]*tmp;
    A[215] = A[215] - A[20]*tmp;
    A[216] = A[216] - A[21]*tmp;
    A[217] = A[217] - A[22]*tmp;
    A[218] = A[218] - A[23]*tmp;
    A[219] = A[219] - A[24]*tmp;
    A[220] = A[220] - A[25]*tmp;
    A[221] = A[221] - A[26]*tmp;
    A[222] = A[222] - A[27]*tmp;
    A[223] = A[223] - A[28]*tmp;
    A[224] = A[224] - A[29]*tmp;
    i_max = 2;
    a_max = abs(A[32]);
    if ( a_max < abs( A[33] ) ) { a_max = abs(A[33]); i_max = 3; }
    if ( a_max < abs( A[34] ) ) { a_max = abs(A[34]); i_max = 4; }
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 5; }
    if ( a_max < abs( A[36] ) ) { a_max = abs(A[36]); i_max = 6; }
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 7; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 8; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 9; }
    if ( a_max < abs( A[40] ) ) { a_max = abs(A[40]); i_max = 10; }
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 11; }
    if ( a_max < abs( A[42] ) ) { a_max = abs(A[42]); i_max = 12; }
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 13; }
    if ( a_max < abs( A[44] ) ) { a_max = abs(A[44]); i_max = 14; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[17], A[i_max+15] );
    std::swap( A[32], A[i_max+30] );
    std::swap( A[47], A[i_max+45] );
    std::swap( A[62], A[i_max+60] );
    std::swap( A[77], A[i_max+75] );
    std::swap( A[92], A[i_max+90] );
    std::swap( A[107], A[i_max+105] );
    std::swap( A[122], A[i_max+120] );
    std::swap( A[137], A[i_max+135] );
    std::swap( A[152], A[i_max+150] );
    std::swap( A[167], A[i_max+165] );
    std::swap( A[182], A[i_max+180] );
    std::swap( A[197], A[i_max+195] );
    std::swap( A[212], A[i_max+210] );
    P[2] = i_max + 1;
    tmp = A[32];
    A[33] = A[33] / tmp;
    A[34] = A[34] / tmp;
    A[35] = A[35] / tmp;
    A[36] = A[36] / tmp;
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    A[40] = A[40] / tmp;
    A[41] = A[41] / tmp;
    A[42] = A[42] / tmp;
    A[43] = A[43] / tmp;
    A[44] = A[44] / tmp;
    tmp = A[47];
    A[48] = A[48] - A[33]*tmp;
    A[49] = A[49] - A[34]*tmp;
    A[50] = A[50] - A[35]*tmp;
    A[51] = A[51] - A[36]*tmp;
    A[52] = A[52] - A[37]*tmp;
    A[53] = A[53] - A[38]*tmp;
    A[54] = A[54] - A[39]*tmp;
    A[55] = A[55] - A[40]*tmp;
    A[56] = A[56] - A[41]*tmp;
    A[57] = A[57] - A[42]*tmp;
    A[58] = A[58] - A[43]*tmp;
    A[59] = A[59] - A[44]*tmp;
    tmp = A[62];
    A[63] = A[63] - A[33]*tmp;
    A[64] = A[64] - A[34]*tmp;
    A[65] = A[65] - A[35]*tmp;
    A[66] = A[66] - A[36]*tmp;
    A[67] = A[67] - A[37]*tmp;
    A[68] = A[68] - A[38]*tmp;
    A[69] = A[69] - A[39]*tmp;
    A[70] = A[70] - A[40]*tmp;
    A[71] = A[71] - A[41]*tmp;
    A[72] = A[72] - A[42]*tmp;
    A[73] = A[73] - A[43]*tmp;
    A[74] = A[74] - A[44]*tmp;
    tmp = A[77];
    A[78] = A[78] - A[33]*tmp;
    A[79] = A[79] - A[34]*tmp;
    A[80] = A[80] - A[35]*tmp;
    A[81] = A[81] - A[36]*tmp;
    A[82] = A[82] - A[37]*tmp;
    A[83] = A[83] - A[38]*tmp;
    A[84] = A[84] - A[39]*tmp;
    A[85] = A[85] - A[40]*tmp;
    A[86] = A[86] - A[41]*tmp;
    A[87] = A[87] - A[42]*tmp;
    A[88] = A[88] - A[43]*tmp;
    A[89] = A[89] - A[44]*tmp;
    tmp = A[92];
    A[93] = A[93] - A[33]*tmp;
    A[94] = A[94] - A[34]*tmp;
    A[95] = A[95] - A[35]*tmp;
    A[96] = A[96] - A[36]*tmp;
    A[97] = A[97] - A[37]*tmp;
    A[98] = A[98] - A[38]*tmp;
    A[99] = A[99] - A[39]*tmp;
    A[100] = A[100] - A[40]*tmp;
    A[101] = A[101] - A[41]*tmp;
    A[102] = A[102] - A[42]*tmp;
    A[103] = A[103] - A[43]*tmp;
    A[104] = A[104] - A[44]*tmp;
    tmp = A[107];
    A[108] = A[108] - A[33]*tmp;
    A[109] = A[109] - A[34]*tmp;
    A[110] = A[110] - A[35]*tmp;
    A[111] = A[111] - A[36]*tmp;
    A[112] = A[112] - A[37]*tmp;
    A[113] = A[113] - A[38]*tmp;
    A[114] = A[114] - A[39]*tmp;
    A[115] = A[115] - A[40]*tmp;
    A[116] = A[116] - A[41]*tmp;
    A[117] = A[117] - A[42]*tmp;
    A[118] = A[118] - A[43]*tmp;
    A[119] = A[119] - A[44]*tmp;
    tmp = A[122];
    A[123] = A[123] - A[33]*tmp;
    A[124] = A[124] - A[34]*tmp;
    A[125] = A[125] - A[35]*tmp;
    A[126] = A[126] - A[36]*tmp;
    A[127] = A[127] - A[37]*tmp;
    A[128] = A[128] - A[38]*tmp;
    A[129] = A[129] - A[39]*tmp;
    A[130] = A[130] - A[40]*tmp;
    A[131] = A[131] - A[41]*tmp;
    A[132] = A[132] - A[42]*tmp;
    A[133] = A[133] - A[43]*tmp;
    A[134] = A[134] - A[44]*tmp;
    tmp = A[137];
    A[138] = A[138] - A[33]*tmp;
    A[139] = A[139] - A[34]*tmp;
    A[140] = A[140] - A[35]*tmp;
    A[141] = A[141] - A[36]*tmp;
    A[142] = A[142] - A[37]*tmp;
    A[143] = A[143] - A[38]*tmp;
    A[144] = A[144] - A[39]*tmp;
    A[145] = A[145] - A[40]*tmp;
    A[146] = A[146] - A[41]*tmp;
    A[147] = A[147] - A[42]*tmp;
    A[148] = A[148] - A[43]*tmp;
    A[149] = A[149] - A[44]*tmp;
    tmp = A[152];
    A[153] = A[153] - A[33]*tmp;
    A[154] = A[154] - A[34]*tmp;
    A[155] = A[155] - A[35]*tmp;
    A[156] = A[156] - A[36]*tmp;
    A[157] = A[157] - A[37]*tmp;
    A[158] = A[158] - A[38]*tmp;
    A[159] = A[159] - A[39]*tmp;
    A[160] = A[160] - A[40]*tmp;
    A[161] = A[161] - A[41]*tmp;
    A[162] = A[162] - A[42]*tmp;
    A[163] = A[163] - A[43]*tmp;
    A[164] = A[164] - A[44]*tmp;
    tmp = A[167];
    A[168] = A[168] - A[33]*tmp;
    A[169] = A[169] - A[34]*tmp;
    A[170] = A[170] - A[35]*tmp;
    A[171] = A[171] - A[36]*tmp;
    A[172] = A[172] - A[37]*tmp;
    A[173] = A[173] - A[38]*tmp;
    A[174] = A[174] - A[39]*tmp;
    A[175] = A[175] - A[40]*tmp;
    A[176] = A[176] - A[41]*tmp;
    A[177] = A[177] - A[42]*tmp;
    A[178] = A[178] - A[43]*tmp;
    A[179] = A[179] - A[44]*tmp;
    tmp = A[182];
    A[183] = A[183] - A[33]*tmp;
    A[184] = A[184] - A[34]*tmp;
    A[185] = A[185] - A[35]*tmp;
    A[186] = A[186] - A[36]*tmp;
    A[187] = A[187] - A[37]*tmp;
    A[188] = A[188] - A[38]*tmp;
    A[189] = A[189] - A[39]*tmp;
    A[190] = A[190] - A[40]*tmp;
    A[191] = A[191] - A[41]*tmp;
    A[192] = A[192] - A[42]*tmp;
    A[193] = A[193] - A[43]*tmp;
    A[194] = A[194] - A[44]*tmp;
    tmp = A[197];
    A[198] = A[198] - A[33]*tmp;
    A[199] = A[199] - A[34]*tmp;
    A[200] = A[200] - A[35]*tmp;
    A[201] = A[201] - A[36]*tmp;
    A[202] = A[202] - A[37]*tmp;
    A[203] = A[203] - A[38]*tmp;
    A[204] = A[204] - A[39]*tmp;
    A[205] = A[205] - A[40]*tmp;
    A[206] = A[206] - A[41]*tmp;
    A[207] = A[207] - A[42]*tmp;
    A[208] = A[208] - A[43]*tmp;
    A[209] = A[209] - A[44]*tmp;
    tmp = A[212];
    A[213] = A[213] - A[33]*tmp;
    A[214] = A[214] - A[34]*tmp;
    A[215] = A[215] - A[35]*tmp;
    A[216] = A[216] - A[36]*tmp;
    A[217] = A[217] - A[37]*tmp;
    A[218] = A[218] - A[38]*tmp;
    A[219] = A[219] - A[39]*tmp;
    A[220] = A[220] - A[40]*tmp;
    A[221] = A[221] - A[41]*tmp;
    A[222] = A[222] - A[42]*tmp;
    A[223] = A[223] - A[43]*tmp;
    A[224] = A[224] - A[44]*tmp;
    i_max = 3;
    a_max = abs(A[48]);
    if ( a_max < abs( A[49] ) ) { a_max = abs(A[49]); i_max = 4; }
    if ( a_max < abs( A[50] ) ) { a_max = abs(A[50]); i_max = 5; }
    if ( a_max < abs( A[51] ) ) { a_max = abs(A[51]); i_max = 6; }
    if ( a_max < abs( A[52] ) ) { a_max = abs(A[52]); i_max = 7; }
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 8; }
    if ( a_max < abs( A[54] ) ) { a_max = abs(A[54]); i_max = 9; }
    if ( a_max < abs( A[55] ) ) { a_max = abs(A[55]); i_max = 10; }
    if ( a_max < abs( A[56] ) ) { a_max = abs(A[56]); i_max = 11; }
    if ( a_max < abs( A[57] ) ) { a_max = abs(A[57]); i_max = 12; }
    if ( a_max < abs( A[58] ) ) { a_max = abs(A[58]); i_max = 13; }
    if ( a_max < abs( A[59] ) ) { a_max = abs(A[59]); i_max = 14; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[18], A[i_max+15] );
    std::swap( A[33], A[i_max+30] );
    std::swap( A[48], A[i_max+45] );
    std::swap( A[63], A[i_max+60] );
    std::swap( A[78], A[i_max+75] );
    std::swap( A[93], A[i_max+90] );
    std::swap( A[108], A[i_max+105] );
    std::swap( A[123], A[i_max+120] );
    std::swap( A[138], A[i_max+135] );
    std::swap( A[153], A[i_max+150] );
    std::swap( A[168], A[i_max+165] );
    std::swap( A[183], A[i_max+180] );
    std::swap( A[198], A[i_max+195] );
    std::swap( A[213], A[i_max+210] );
    P[3] = i_max + 1;
    tmp = A[48];
    A[49] = A[49] / tmp;
    A[50] = A[50] / tmp;
    A[51] = A[51] / tmp;
    A[52] = A[52] / tmp;
    A[53] = A[53] / tmp;
    A[54] = A[54] / tmp;
    A[55] = A[55] / tmp;
    A[56] = A[56] / tmp;
    A[57] = A[57] / tmp;
    A[58] = A[58] / tmp;
    A[59] = A[59] / tmp;
    tmp = A[63];
    A[64] = A[64] - A[49]*tmp;
    A[65] = A[65] - A[50]*tmp;
    A[66] = A[66] - A[51]*tmp;
    A[67] = A[67] - A[52]*tmp;
    A[68] = A[68] - A[53]*tmp;
    A[69] = A[69] - A[54]*tmp;
    A[70] = A[70] - A[55]*tmp;
    A[71] = A[71] - A[56]*tmp;
    A[72] = A[72] - A[57]*tmp;
    A[73] = A[73] - A[58]*tmp;
    A[74] = A[74] - A[59]*tmp;
    tmp = A[78];
    A[79] = A[79] - A[49]*tmp;
    A[80] = A[80] - A[50]*tmp;
    A[81] = A[81] - A[51]*tmp;
    A[82] = A[82] - A[52]*tmp;
    A[83] = A[83] - A[53]*tmp;
    A[84] = A[84] - A[54]*tmp;
    A[85] = A[85] - A[55]*tmp;
    A[86] = A[86] - A[56]*tmp;
    A[87] = A[87] - A[57]*tmp;
    A[88] = A[88] - A[58]*tmp;
    A[89] = A[89] - A[59]*tmp;
    tmp = A[93];
    A[94] = A[94] - A[49]*tmp;
    A[95] = A[95] - A[50]*tmp;
    A[96] = A[96] - A[51]*tmp;
    A[97] = A[97] - A[52]*tmp;
    A[98] = A[98] - A[53]*tmp;
    A[99] = A[99] - A[54]*tmp;
    A[100] = A[100] - A[55]*tmp;
    A[101] = A[101] - A[56]*tmp;
    A[102] = A[102] - A[57]*tmp;
    A[103] = A[103] - A[58]*tmp;
    A[104] = A[104] - A[59]*tmp;
    tmp = A[108];
    A[109] = A[109] - A[49]*tmp;
    A[110] = A[110] - A[50]*tmp;
    A[111] = A[111] - A[51]*tmp;
    A[112] = A[112] - A[52]*tmp;
    A[113] = A[113] - A[53]*tmp;
    A[114] = A[114] - A[54]*tmp;
    A[115] = A[115] - A[55]*tmp;
    A[116] = A[116] - A[56]*tmp;
    A[117] = A[117] - A[57]*tmp;
    A[118] = A[118] - A[58]*tmp;
    A[119] = A[119] - A[59]*tmp;
    tmp = A[123];
    A[124] = A[124] - A[49]*tmp;
    A[125] = A[125] - A[50]*tmp;
    A[126] = A[126] - A[51]*tmp;
    A[127] = A[127] - A[52]*tmp;
    A[128] = A[128] - A[53]*tmp;
    A[129] = A[129] - A[54]*tmp;
    A[130] = A[130] - A[55]*tmp;
    A[131] = A[131] - A[56]*tmp;
    A[132] = A[132] - A[57]*tmp;
    A[133] = A[133] - A[58]*tmp;
    A[134] = A[134] - A[59]*tmp;
    tmp = A[138];
    A[139] = A[139] - A[49]*tmp;
    A[140] = A[140] - A[50]*tmp;
    A[141] = A[141] - A[51]*tmp;
    A[142] = A[142] - A[52]*tmp;
    A[143] = A[143] - A[53]*tmp;
    A[144] = A[144] - A[54]*tmp;
    A[145] = A[145] - A[55]*tmp;
    A[146] = A[146] - A[56]*tmp;
    A[147] = A[147] - A[57]*tmp;
    A[148] = A[148] - A[58]*tmp;
    A[149] = A[149] - A[59]*tmp;
    tmp = A[153];
    A[154] = A[154] - A[49]*tmp;
    A[155] = A[155] - A[50]*tmp;
    A[156] = A[156] - A[51]*tmp;
    A[157] = A[157] - A[52]*tmp;
    A[158] = A[158] - A[53]*tmp;
    A[159] = A[159] - A[54]*tmp;
    A[160] = A[160] - A[55]*tmp;
    A[161] = A[161] - A[56]*tmp;
    A[162] = A[162] - A[57]*tmp;
    A[163] = A[163] - A[58]*tmp;
    A[164] = A[164] - A[59]*tmp;
    tmp = A[168];
    A[169] = A[169] - A[49]*tmp;
    A[170] = A[170] - A[50]*tmp;
    A[171] = A[171] - A[51]*tmp;
    A[172] = A[172] - A[52]*tmp;
    A[173] = A[173] - A[53]*tmp;
    A[174] = A[174] - A[54]*tmp;
    A[175] = A[175] - A[55]*tmp;
    A[176] = A[176] - A[56]*tmp;
    A[177] = A[177] - A[57]*tmp;
    A[178] = A[178] - A[58]*tmp;
    A[179] = A[179] - A[59]*tmp;
    tmp = A[183];
    A[184] = A[184] - A[49]*tmp;
    A[185] = A[185] - A[50]*tmp;
    A[186] = A[186] - A[51]*tmp;
    A[187] = A[187] - A[52]*tmp;
    A[188] = A[188] - A[53]*tmp;
    A[189] = A[189] - A[54]*tmp;
    A[190] = A[190] - A[55]*tmp;
    A[191] = A[191] - A[56]*tmp;
    A[192] = A[192] - A[57]*tmp;
    A[193] = A[193] - A[58]*tmp;
    A[194] = A[194] - A[59]*tmp;
    tmp = A[198];
    A[199] = A[199] - A[49]*tmp;
    A[200] = A[200] - A[50]*tmp;
    A[201] = A[201] - A[51]*tmp;
    A[202] = A[202] - A[52]*tmp;
    A[203] = A[203] - A[53]*tmp;
    A[204] = A[204] - A[54]*tmp;
    A[205] = A[205] - A[55]*tmp;
    A[206] = A[206] - A[56]*tmp;
    A[207] = A[207] - A[57]*tmp;
    A[208] = A[208] - A[58]*tmp;
    A[209] = A[209] - A[59]*tmp;
    tmp = A[213];
    A[214] = A[214] - A[49]*tmp;
    A[215] = A[215] - A[50]*tmp;
    A[216] = A[216] - A[51]*tmp;
    A[217] = A[217] - A[52]*tmp;
    A[218] = A[218] - A[53]*tmp;
    A[219] = A[219] - A[54]*tmp;
    A[220] = A[220] - A[55]*tmp;
    A[221] = A[221] - A[56]*tmp;
    A[222] = A[222] - A[57]*tmp;
    A[223] = A[223] - A[58]*tmp;
    A[224] = A[224] - A[59]*tmp;
    i_max = 4;
    a_max = abs(A[64]);
    if ( a_max < abs( A[65] ) ) { a_max = abs(A[65]); i_max = 5; }
    if ( a_max < abs( A[66] ) ) { a_max = abs(A[66]); i_max = 6; }
    if ( a_max < abs( A[67] ) ) { a_max = abs(A[67]); i_max = 7; }
    if ( a_max < abs( A[68] ) ) { a_max = abs(A[68]); i_max = 8; }
    if ( a_max < abs( A[69] ) ) { a_max = abs(A[69]); i_max = 9; }
    if ( a_max < abs( A[70] ) ) { a_max = abs(A[70]); i_max = 10; }
    if ( a_max < abs( A[71] ) ) { a_max = abs(A[71]); i_max = 11; }
    if ( a_max < abs( A[72] ) ) { a_max = abs(A[72]); i_max = 12; }
    if ( a_max < abs( A[73] ) ) { a_max = abs(A[73]); i_max = 13; }
    if ( a_max < abs( A[74] ) ) { a_max = abs(A[74]); i_max = 14; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[19], A[i_max+15] );
    std::swap( A[34], A[i_max+30] );
    std::swap( A[49], A[i_max+45] );
    std::swap( A[64], A[i_max+60] );
    std::swap( A[79], A[i_max+75] );
    std::swap( A[94], A[i_max+90] );
    std::swap( A[109], A[i_max+105] );
    std::swap( A[124], A[i_max+120] );
    std::swap( A[139], A[i_max+135] );
    std::swap( A[154], A[i_max+150] );
    std::swap( A[169], A[i_max+165] );
    std::swap( A[184], A[i_max+180] );
    std::swap( A[199], A[i_max+195] );
    std::swap( A[214], A[i_max+210] );
    P[4] = i_max + 1;
    tmp = A[64];
    A[65] = A[65] / tmp;
    A[66] = A[66] / tmp;
    A[67] = A[67] / tmp;
    A[68] = A[68] / tmp;
    A[69] = A[69] / tmp;
    A[70] = A[70] / tmp;
    A[71] = A[71] / tmp;
    A[72] = A[72] / tmp;
    A[73] = A[73] / tmp;
    A[74] = A[74] / tmp;
    tmp = A[79];
    A[80] = A[80] - A[65]*tmp;
    A[81] = A[81] - A[66]*tmp;
    A[82] = A[82] - A[67]*tmp;
    A[83] = A[83] - A[68]*tmp;
    A[84] = A[84] - A[69]*tmp;
    A[85] = A[85] - A[70]*tmp;
    A[86] = A[86] - A[71]*tmp;
    A[87] = A[87] - A[72]*tmp;
    A[88] = A[88] - A[73]*tmp;
    A[89] = A[89] - A[74]*tmp;
    tmp = A[94];
    A[95] = A[95] - A[65]*tmp;
    A[96] = A[96] - A[66]*tmp;
    A[97] = A[97] - A[67]*tmp;
    A[98] = A[98] - A[68]*tmp;
    A[99] = A[99] - A[69]*tmp;
    A[100] = A[100] - A[70]*tmp;
    A[101] = A[101] - A[71]*tmp;
    A[102] = A[102] - A[72]*tmp;
    A[103] = A[103] - A[73]*tmp;
    A[104] = A[104] - A[74]*tmp;
    tmp = A[109];
    A[110] = A[110] - A[65]*tmp;
    A[111] = A[111] - A[66]*tmp;
    A[112] = A[112] - A[67]*tmp;
    A[113] = A[113] - A[68]*tmp;
    A[114] = A[114] - A[69]*tmp;
    A[115] = A[115] - A[70]*tmp;
    A[116] = A[116] - A[71]*tmp;
    A[117] = A[117] - A[72]*tmp;
    A[118] = A[118] - A[73]*tmp;
    A[119] = A[119] - A[74]*tmp;
    tmp = A[124];
    A[125] = A[125] - A[65]*tmp;
    A[126] = A[126] - A[66]*tmp;
    A[127] = A[127] - A[67]*tmp;
    A[128] = A[128] - A[68]*tmp;
    A[129] = A[129] - A[69]*tmp;
    A[130] = A[130] - A[70]*tmp;
    A[131] = A[131] - A[71]*tmp;
    A[132] = A[132] - A[72]*tmp;
    A[133] = A[133] - A[73]*tmp;
    A[134] = A[134] - A[74]*tmp;
    tmp = A[139];
    A[140] = A[140] - A[65]*tmp;
    A[141] = A[141] - A[66]*tmp;
    A[142] = A[142] - A[67]*tmp;
    A[143] = A[143] - A[68]*tmp;
    A[144] = A[144] - A[69]*tmp;
    A[145] = A[145] - A[70]*tmp;
    A[146] = A[146] - A[71]*tmp;
    A[147] = A[147] - A[72]*tmp;
    A[148] = A[148] - A[73]*tmp;
    A[149] = A[149] - A[74]*tmp;
    tmp = A[154];
    A[155] = A[155] - A[65]*tmp;
    A[156] = A[156] - A[66]*tmp;
    A[157] = A[157] - A[67]*tmp;
    A[158] = A[158] - A[68]*tmp;
    A[159] = A[159] - A[69]*tmp;
    A[160] = A[160] - A[70]*tmp;
    A[161] = A[161] - A[71]*tmp;
    A[162] = A[162] - A[72]*tmp;
    A[163] = A[163] - A[73]*tmp;
    A[164] = A[164] - A[74]*tmp;
    tmp = A[169];
    A[170] = A[170] - A[65]*tmp;
    A[171] = A[171] - A[66]*tmp;
    A[172] = A[172] - A[67]*tmp;
    A[173] = A[173] - A[68]*tmp;
    A[174] = A[174] - A[69]*tmp;
    A[175] = A[175] - A[70]*tmp;
    A[176] = A[176] - A[71]*tmp;
    A[177] = A[177] - A[72]*tmp;
    A[178] = A[178] - A[73]*tmp;
    A[179] = A[179] - A[74]*tmp;
    tmp = A[184];
    A[185] = A[185] - A[65]*tmp;
    A[186] = A[186] - A[66]*tmp;
    A[187] = A[187] - A[67]*tmp;
    A[188] = A[188] - A[68]*tmp;
    A[189] = A[189] - A[69]*tmp;
    A[190] = A[190] - A[70]*tmp;
    A[191] = A[191] - A[71]*tmp;
    A[192] = A[192] - A[72]*tmp;
    A[193] = A[193] - A[73]*tmp;
    A[194] = A[194] - A[74]*tmp;
    tmp = A[199];
    A[200] = A[200] - A[65]*tmp;
    A[201] = A[201] - A[66]*tmp;
    A[202] = A[202] - A[67]*tmp;
    A[203] = A[203] - A[68]*tmp;
    A[204] = A[204] - A[69]*tmp;
    A[205] = A[205] - A[70]*tmp;
    A[206] = A[206] - A[71]*tmp;
    A[207] = A[207] - A[72]*tmp;
    A[208] = A[208] - A[73]*tmp;
    A[209] = A[209] - A[74]*tmp;
    tmp = A[214];
    A[215] = A[215] - A[65]*tmp;
    A[216] = A[216] - A[66]*tmp;
    A[217] = A[217] - A[67]*tmp;
    A[218] = A[218] - A[68]*tmp;
    A[219] = A[219] - A[69]*tmp;
    A[220] = A[220] - A[70]*tmp;
    A[221] = A[221] - A[71]*tmp;
    A[222] = A[222] - A[72]*tmp;
    A[223] = A[223] - A[73]*tmp;
    A[224] = A[224] - A[74]*tmp;
    i_max = 5;
    a_max = abs(A[80]);
    if ( a_max < abs( A[81] ) ) { a_max = abs(A[81]); i_max = 6; }
    if ( a_max < abs( A[82] ) ) { a_max = abs(A[82]); i_max = 7; }
    if ( a_max < abs( A[83] ) ) { a_max = abs(A[83]); i_max = 8; }
    if ( a_max < abs( A[84] ) ) { a_max = abs(A[84]); i_max = 9; }
    if ( a_max < abs( A[85] ) ) { a_max = abs(A[85]); i_max = 10; }
    if ( a_max < abs( A[86] ) ) { a_max = abs(A[86]); i_max = 11; }
    if ( a_max < abs( A[87] ) ) { a_max = abs(A[87]); i_max = 12; }
    if ( a_max < abs( A[88] ) ) { a_max = abs(A[88]); i_max = 13; }
    if ( a_max < abs( A[89] ) ) { a_max = abs(A[89]); i_max = 14; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[20], A[i_max+15] );
    std::swap( A[35], A[i_max+30] );
    std::swap( A[50], A[i_max+45] );
    std::swap( A[65], A[i_max+60] );
    std::swap( A[80], A[i_max+75] );
    std::swap( A[95], A[i_max+90] );
    std::swap( A[110], A[i_max+105] );
    std::swap( A[125], A[i_max+120] );
    std::swap( A[140], A[i_max+135] );
    std::swap( A[155], A[i_max+150] );
    std::swap( A[170], A[i_max+165] );
    std::swap( A[185], A[i_max+180] );
    std::swap( A[200], A[i_max+195] );
    std::swap( A[215], A[i_max+210] );
    P[5] = i_max + 1;
    tmp = A[80];
    A[81] = A[81] / tmp;
    A[82] = A[82] / tmp;
    A[83] = A[83] / tmp;
    A[84] = A[84] / tmp;
    A[85] = A[85] / tmp;
    A[86] = A[86] / tmp;
    A[87] = A[87] / tmp;
    A[88] = A[88] / tmp;
    A[89] = A[89] / tmp;
    tmp = A[95];
    A[96] = A[96] - A[81]*tmp;
    A[97] = A[97] - A[82]*tmp;
    A[98] = A[98] - A[83]*tmp;
    A[99] = A[99] - A[84]*tmp;
    A[100] = A[100] - A[85]*tmp;
    A[101] = A[101] - A[86]*tmp;
    A[102] = A[102] - A[87]*tmp;
    A[103] = A[103] - A[88]*tmp;
    A[104] = A[104] - A[89]*tmp;
    tmp = A[110];
    A[111] = A[111] - A[81]*tmp;
    A[112] = A[112] - A[82]*tmp;
    A[113] = A[113] - A[83]*tmp;
    A[114] = A[114] - A[84]*tmp;
    A[115] = A[115] - A[85]*tmp;
    A[116] = A[116] - A[86]*tmp;
    A[117] = A[117] - A[87]*tmp;
    A[118] = A[118] - A[88]*tmp;
    A[119] = A[119] - A[89]*tmp;
    tmp = A[125];
    A[126] = A[126] - A[81]*tmp;
    A[127] = A[127] - A[82]*tmp;
    A[128] = A[128] - A[83]*tmp;
    A[129] = A[129] - A[84]*tmp;
    A[130] = A[130] - A[85]*tmp;
    A[131] = A[131] - A[86]*tmp;
    A[132] = A[132] - A[87]*tmp;
    A[133] = A[133] - A[88]*tmp;
    A[134] = A[134] - A[89]*tmp;
    tmp = A[140];
    A[141] = A[141] - A[81]*tmp;
    A[142] = A[142] - A[82]*tmp;
    A[143] = A[143] - A[83]*tmp;
    A[144] = A[144] - A[84]*tmp;
    A[145] = A[145] - A[85]*tmp;
    A[146] = A[146] - A[86]*tmp;
    A[147] = A[147] - A[87]*tmp;
    A[148] = A[148] - A[88]*tmp;
    A[149] = A[149] - A[89]*tmp;
    tmp = A[155];
    A[156] = A[156] - A[81]*tmp;
    A[157] = A[157] - A[82]*tmp;
    A[158] = A[158] - A[83]*tmp;
    A[159] = A[159] - A[84]*tmp;
    A[160] = A[160] - A[85]*tmp;
    A[161] = A[161] - A[86]*tmp;
    A[162] = A[162] - A[87]*tmp;
    A[163] = A[163] - A[88]*tmp;
    A[164] = A[164] - A[89]*tmp;
    tmp = A[170];
    A[171] = A[171] - A[81]*tmp;
    A[172] = A[172] - A[82]*tmp;
    A[173] = A[173] - A[83]*tmp;
    A[174] = A[174] - A[84]*tmp;
    A[175] = A[175] - A[85]*tmp;
    A[176] = A[176] - A[86]*tmp;
    A[177] = A[177] - A[87]*tmp;
    A[178] = A[178] - A[88]*tmp;
    A[179] = A[179] - A[89]*tmp;
    tmp = A[185];
    A[186] = A[186] - A[81]*tmp;
    A[187] = A[187] - A[82]*tmp;
    A[188] = A[188] - A[83]*tmp;
    A[189] = A[189] - A[84]*tmp;
    A[190] = A[190] - A[85]*tmp;
    A[191] = A[191] - A[86]*tmp;
    A[192] = A[192] - A[87]*tmp;
    A[193] = A[193] - A[88]*tmp;
    A[194] = A[194] - A[89]*tmp;
    tmp = A[200];
    A[201] = A[201] - A[81]*tmp;
    A[202] = A[202] - A[82]*tmp;
    A[203] = A[203] - A[83]*tmp;
    A[204] = A[204] - A[84]*tmp;
    A[205] = A[205] - A[85]*tmp;
    A[206] = A[206] - A[86]*tmp;
    A[207] = A[207] - A[87]*tmp;
    A[208] = A[208] - A[88]*tmp;
    A[209] = A[209] - A[89]*tmp;
    tmp = A[215];
    A[216] = A[216] - A[81]*tmp;
    A[217] = A[217] - A[82]*tmp;
    A[218] = A[218] - A[83]*tmp;
    A[219] = A[219] - A[84]*tmp;
    A[220] = A[220] - A[85]*tmp;
    A[221] = A[221] - A[86]*tmp;
    A[222] = A[222] - A[87]*tmp;
    A[223] = A[223] - A[88]*tmp;
    A[224] = A[224] - A[89]*tmp;
    i_max = 6;
    a_max = abs(A[96]);
    if ( a_max < abs( A[97] ) ) { a_max = abs(A[97]); i_max = 7; }
    if ( a_max < abs( A[98] ) ) { a_max = abs(A[98]); i_max = 8; }
    if ( a_max < abs( A[99] ) ) { a_max = abs(A[99]); i_max = 9; }
    if ( a_max < abs( A[100] ) ) { a_max = abs(A[100]); i_max = 10; }
    if ( a_max < abs( A[101] ) ) { a_max = abs(A[101]); i_max = 11; }
    if ( a_max < abs( A[102] ) ) { a_max = abs(A[102]); i_max = 12; }
    if ( a_max < abs( A[103] ) ) { a_max = abs(A[103]); i_max = 13; }
    if ( a_max < abs( A[104] ) ) { a_max = abs(A[104]); i_max = 14; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[21], A[i_max+15] );
    std::swap( A[36], A[i_max+30] );
    std::swap( A[51], A[i_max+45] );
    std::swap( A[66], A[i_max+60] );
    std::swap( A[81], A[i_max+75] );
    std::swap( A[96], A[i_max+90] );
    std::swap( A[111], A[i_max+105] );
    std::swap( A[126], A[i_max+120] );
    std::swap( A[141], A[i_max+135] );
    std::swap( A[156], A[i_max+150] );
    std::swap( A[171], A[i_max+165] );
    std::swap( A[186], A[i_max+180] );
    std::swap( A[201], A[i_max+195] );
    std::swap( A[216], A[i_max+210] );
    P[6] = i_max + 1;
    tmp = A[96];
    A[97] = A[97] / tmp;
    A[98] = A[98] / tmp;
    A[99] = A[99] / tmp;
    A[100] = A[100] / tmp;
    A[101] = A[101] / tmp;
    A[102] = A[102] / tmp;
    A[103] = A[103] / tmp;
    A[104] = A[104] / tmp;
    tmp = A[111];
    A[112] = A[112] - A[97]*tmp;
    A[113] = A[113] - A[98]*tmp;
    A[114] = A[114] - A[99]*tmp;
    A[115] = A[115] - A[100]*tmp;
    A[116] = A[116] - A[101]*tmp;
    A[117] = A[117] - A[102]*tmp;
    A[118] = A[118] - A[103]*tmp;
    A[119] = A[119] - A[104]*tmp;
    tmp = A[126];
    A[127] = A[127] - A[97]*tmp;
    A[128] = A[128] - A[98]*tmp;
    A[129] = A[129] - A[99]*tmp;
    A[130] = A[130] - A[100]*tmp;
    A[131] = A[131] - A[101]*tmp;
    A[132] = A[132] - A[102]*tmp;
    A[133] = A[133] - A[103]*tmp;
    A[134] = A[134] - A[104]*tmp;
    tmp = A[141];
    A[142] = A[142] - A[97]*tmp;
    A[143] = A[143] - A[98]*tmp;
    A[144] = A[144] - A[99]*tmp;
    A[145] = A[145] - A[100]*tmp;
    A[146] = A[146] - A[101]*tmp;
    A[147] = A[147] - A[102]*tmp;
    A[148] = A[148] - A[103]*tmp;
    A[149] = A[149] - A[104]*tmp;
    tmp = A[156];
    A[157] = A[157] - A[97]*tmp;
    A[158] = A[158] - A[98]*tmp;
    A[159] = A[159] - A[99]*tmp;
    A[160] = A[160] - A[100]*tmp;
    A[161] = A[161] - A[101]*tmp;
    A[162] = A[162] - A[102]*tmp;
    A[163] = A[163] - A[103]*tmp;
    A[164] = A[164] - A[104]*tmp;
    tmp = A[171];
    A[172] = A[172] - A[97]*tmp;
    A[173] = A[173] - A[98]*tmp;
    A[174] = A[174] - A[99]*tmp;
    A[175] = A[175] - A[100]*tmp;
    A[176] = A[176] - A[101]*tmp;
    A[177] = A[177] - A[102]*tmp;
    A[178] = A[178] - A[103]*tmp;
    A[179] = A[179] - A[104]*tmp;
    tmp = A[186];
    A[187] = A[187] - A[97]*tmp;
    A[188] = A[188] - A[98]*tmp;
    A[189] = A[189] - A[99]*tmp;
    A[190] = A[190] - A[100]*tmp;
    A[191] = A[191] - A[101]*tmp;
    A[192] = A[192] - A[102]*tmp;
    A[193] = A[193] - A[103]*tmp;
    A[194] = A[194] - A[104]*tmp;
    tmp = A[201];
    A[202] = A[202] - A[97]*tmp;
    A[203] = A[203] - A[98]*tmp;
    A[204] = A[204] - A[99]*tmp;
    A[205] = A[205] - A[100]*tmp;
    A[206] = A[206] - A[101]*tmp;
    A[207] = A[207] - A[102]*tmp;
    A[208] = A[208] - A[103]*tmp;
    A[209] = A[209] - A[104]*tmp;
    tmp = A[216];
    A[217] = A[217] - A[97]*tmp;
    A[218] = A[218] - A[98]*tmp;
    A[219] = A[219] - A[99]*tmp;
    A[220] = A[220] - A[100]*tmp;
    A[221] = A[221] - A[101]*tmp;
    A[222] = A[222] - A[102]*tmp;
    A[223] = A[223] - A[103]*tmp;
    A[224] = A[224] - A[104]*tmp;
    i_max = 7;
    a_max = abs(A[112]);
    if ( a_max < abs( A[113] ) ) { a_max = abs(A[113]); i_max = 8; }
    if ( a_max < abs( A[114] ) ) { a_max = abs(A[114]); i_max = 9; }
    if ( a_max < abs( A[115] ) ) { a_max = abs(A[115]); i_max = 10; }
    if ( a_max < abs( A[116] ) ) { a_max = abs(A[116]); i_max = 11; }
    if ( a_max < abs( A[117] ) ) { a_max = abs(A[117]); i_max = 12; }
    if ( a_max < abs( A[118] ) ) { a_max = abs(A[118]); i_max = 13; }
    if ( a_max < abs( A[119] ) ) { a_max = abs(A[119]); i_max = 14; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[22], A[i_max+15] );
    std::swap( A[37], A[i_max+30] );
    std::swap( A[52], A[i_max+45] );
    std::swap( A[67], A[i_max+60] );
    std::swap( A[82], A[i_max+75] );
    std::swap( A[97], A[i_max+90] );
    std::swap( A[112], A[i_max+105] );
    std::swap( A[127], A[i_max+120] );
    std::swap( A[142], A[i_max+135] );
    std::swap( A[157], A[i_max+150] );
    std::swap( A[172], A[i_max+165] );
    std::swap( A[187], A[i_max+180] );
    std::swap( A[202], A[i_max+195] );
    std::swap( A[217], A[i_max+210] );
    P[7] = i_max + 1;
    tmp = A[112];
    A[113] = A[113] / tmp;
    A[114] = A[114] / tmp;
    A[115] = A[115] / tmp;
    A[116] = A[116] / tmp;
    A[117] = A[117] / tmp;
    A[118] = A[118] / tmp;
    A[119] = A[119] / tmp;
    tmp = A[127];
    A[128] = A[128] - A[113]*tmp;
    A[129] = A[129] - A[114]*tmp;
    A[130] = A[130] - A[115]*tmp;
    A[131] = A[131] - A[116]*tmp;
    A[132] = A[132] - A[117]*tmp;
    A[133] = A[133] - A[118]*tmp;
    A[134] = A[134] - A[119]*tmp;
    tmp = A[142];
    A[143] = A[143] - A[113]*tmp;
    A[144] = A[144] - A[114]*tmp;
    A[145] = A[145] - A[115]*tmp;
    A[146] = A[146] - A[116]*tmp;
    A[147] = A[147] - A[117]*tmp;
    A[148] = A[148] - A[118]*tmp;
    A[149] = A[149] - A[119]*tmp;
    tmp = A[157];
    A[158] = A[158] - A[113]*tmp;
    A[159] = A[159] - A[114]*tmp;
    A[160] = A[160] - A[115]*tmp;
    A[161] = A[161] - A[116]*tmp;
    A[162] = A[162] - A[117]*tmp;
    A[163] = A[163] - A[118]*tmp;
    A[164] = A[164] - A[119]*tmp;
    tmp = A[172];
    A[173] = A[173] - A[113]*tmp;
    A[174] = A[174] - A[114]*tmp;
    A[175] = A[175] - A[115]*tmp;
    A[176] = A[176] - A[116]*tmp;
    A[177] = A[177] - A[117]*tmp;
    A[178] = A[178] - A[118]*tmp;
    A[179] = A[179] - A[119]*tmp;
    tmp = A[187];
    A[188] = A[188] - A[113]*tmp;
    A[189] = A[189] - A[114]*tmp;
    A[190] = A[190] - A[115]*tmp;
    A[191] = A[191] - A[116]*tmp;
    A[192] = A[192] - A[117]*tmp;
    A[193] = A[193] - A[118]*tmp;
    A[194] = A[194] - A[119]*tmp;
    tmp = A[202];
    A[203] = A[203] - A[113]*tmp;
    A[204] = A[204] - A[114]*tmp;
    A[205] = A[205] - A[115]*tmp;
    A[206] = A[206] - A[116]*tmp;
    A[207] = A[207] - A[117]*tmp;
    A[208] = A[208] - A[118]*tmp;
    A[209] = A[209] - A[119]*tmp;
    tmp = A[217];
    A[218] = A[218] - A[113]*tmp;
    A[219] = A[219] - A[114]*tmp;
    A[220] = A[220] - A[115]*tmp;
    A[221] = A[221] - A[116]*tmp;
    A[222] = A[222] - A[117]*tmp;
    A[223] = A[223] - A[118]*tmp;
    A[224] = A[224] - A[119]*tmp;
    i_max = 8;
    a_max = abs(A[128]);
    if ( a_max < abs( A[129] ) ) { a_max = abs(A[129]); i_max = 9; }
    if ( a_max < abs( A[130] ) ) { a_max = abs(A[130]); i_max = 10; }
    if ( a_max < abs( A[131] ) ) { a_max = abs(A[131]); i_max = 11; }
    if ( a_max < abs( A[132] ) ) { a_max = abs(A[132]); i_max = 12; }
    if ( a_max < abs( A[133] ) ) { a_max = abs(A[133]); i_max = 13; }
    if ( a_max < abs( A[134] ) ) { a_max = abs(A[134]); i_max = 14; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[23], A[i_max+15] );
    std::swap( A[38], A[i_max+30] );
    std::swap( A[53], A[i_max+45] );
    std::swap( A[68], A[i_max+60] );
    std::swap( A[83], A[i_max+75] );
    std::swap( A[98], A[i_max+90] );
    std::swap( A[113], A[i_max+105] );
    std::swap( A[128], A[i_max+120] );
    std::swap( A[143], A[i_max+135] );
    std::swap( A[158], A[i_max+150] );
    std::swap( A[173], A[i_max+165] );
    std::swap( A[188], A[i_max+180] );
    std::swap( A[203], A[i_max+195] );
    std::swap( A[218], A[i_max+210] );
    P[8] = i_max + 1;
    tmp = A[128];
    A[129] = A[129] / tmp;
    A[130] = A[130] / tmp;
    A[131] = A[131] / tmp;
    A[132] = A[132] / tmp;
    A[133] = A[133] / tmp;
    A[134] = A[134] / tmp;
    tmp = A[143];
    A[144] = A[144] - A[129]*tmp;
    A[145] = A[145] - A[130]*tmp;
    A[146] = A[146] - A[131]*tmp;
    A[147] = A[147] - A[132]*tmp;
    A[148] = A[148] - A[133]*tmp;
    A[149] = A[149] - A[134]*tmp;
    tmp = A[158];
    A[159] = A[159] - A[129]*tmp;
    A[160] = A[160] - A[130]*tmp;
    A[161] = A[161] - A[131]*tmp;
    A[162] = A[162] - A[132]*tmp;
    A[163] = A[163] - A[133]*tmp;
    A[164] = A[164] - A[134]*tmp;
    tmp = A[173];
    A[174] = A[174] - A[129]*tmp;
    A[175] = A[175] - A[130]*tmp;
    A[176] = A[176] - A[131]*tmp;
    A[177] = A[177] - A[132]*tmp;
    A[178] = A[178] - A[133]*tmp;
    A[179] = A[179] - A[134]*tmp;
    tmp = A[188];
    A[189] = A[189] - A[129]*tmp;
    A[190] = A[190] - A[130]*tmp;
    A[191] = A[191] - A[131]*tmp;
    A[192] = A[192] - A[132]*tmp;
    A[193] = A[193] - A[133]*tmp;
    A[194] = A[194] - A[134]*tmp;
    tmp = A[203];
    A[204] = A[204] - A[129]*tmp;
    A[205] = A[205] - A[130]*tmp;
    A[206] = A[206] - A[131]*tmp;
    A[207] = A[207] - A[132]*tmp;
    A[208] = A[208] - A[133]*tmp;
    A[209] = A[209] - A[134]*tmp;
    tmp = A[218];
    A[219] = A[219] - A[129]*tmp;
    A[220] = A[220] - A[130]*tmp;
    A[221] = A[221] - A[131]*tmp;
    A[222] = A[222] - A[132]*tmp;
    A[223] = A[223] - A[133]*tmp;
    A[224] = A[224] - A[134]*tmp;
    i_max = 9;
    a_max = abs(A[144]);
    if ( a_max < abs( A[145] ) ) { a_max = abs(A[145]); i_max = 10; }
    if ( a_max < abs( A[146] ) ) { a_max = abs(A[146]); i_max = 11; }
    if ( a_max < abs( A[147] ) ) { a_max = abs(A[147]); i_max = 12; }
    if ( a_max < abs( A[148] ) ) { a_max = abs(A[148]); i_max = 13; }
    if ( a_max < abs( A[149] ) ) { a_max = abs(A[149]); i_max = 14; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[24], A[i_max+15] );
    std::swap( A[39], A[i_max+30] );
    std::swap( A[54], A[i_max+45] );
    std::swap( A[69], A[i_max+60] );
    std::swap( A[84], A[i_max+75] );
    std::swap( A[99], A[i_max+90] );
    std::swap( A[114], A[i_max+105] );
    std::swap( A[129], A[i_max+120] );
    std::swap( A[144], A[i_max+135] );
    std::swap( A[159], A[i_max+150] );
    std::swap( A[174], A[i_max+165] );
    std::swap( A[189], A[i_max+180] );
    std::swap( A[204], A[i_max+195] );
    std::swap( A[219], A[i_max+210] );
    P[9] = i_max + 1;
    tmp = A[144];
    A[145] = A[145] / tmp;
    A[146] = A[146] / tmp;
    A[147] = A[147] / tmp;
    A[148] = A[148] / tmp;
    A[149] = A[149] / tmp;
    tmp = A[159];
    A[160] = A[160] - A[145]*tmp;
    A[161] = A[161] - A[146]*tmp;
    A[162] = A[162] - A[147]*tmp;
    A[163] = A[163] - A[148]*tmp;
    A[164] = A[164] - A[149]*tmp;
    tmp = A[174];
    A[175] = A[175] - A[145]*tmp;
    A[176] = A[176] - A[146]*tmp;
    A[177] = A[177] - A[147]*tmp;
    A[178] = A[178] - A[148]*tmp;
    A[179] = A[179] - A[149]*tmp;
    tmp = A[189];
    A[190] = A[190] - A[145]*tmp;
    A[191] = A[191] - A[146]*tmp;
    A[192] = A[192] - A[147]*tmp;
    A[193] = A[193] - A[148]*tmp;
    A[194] = A[194] - A[149]*tmp;
    tmp = A[204];
    A[205] = A[205] - A[145]*tmp;
    A[206] = A[206] - A[146]*tmp;
    A[207] = A[207] - A[147]*tmp;
    A[208] = A[208] - A[148]*tmp;
    A[209] = A[209] - A[149]*tmp;
    tmp = A[219];
    A[220] = A[220] - A[145]*tmp;
    A[221] = A[221] - A[146]*tmp;
    A[222] = A[222] - A[147]*tmp;
    A[223] = A[223] - A[148]*tmp;
    A[224] = A[224] - A[149]*tmp;
    i_max = 10;
    a_max = abs(A[160]);
    if ( a_max < abs( A[161] ) ) { a_max = abs(A[161]); i_max = 11; }
    if ( a_max < abs( A[162] ) ) { a_max = abs(A[162]); i_max = 12; }
    if ( a_max < abs( A[163] ) ) { a_max = abs(A[163]); i_max = 13; }
    if ( a_max < abs( A[164] ) ) { a_max = abs(A[164]); i_max = 14; }
    std::swap( A[10], A[i_max+0] );
    std::swap( A[25], A[i_max+15] );
    std::swap( A[40], A[i_max+30] );
    std::swap( A[55], A[i_max+45] );
    std::swap( A[70], A[i_max+60] );
    std::swap( A[85], A[i_max+75] );
    std::swap( A[100], A[i_max+90] );
    std::swap( A[115], A[i_max+105] );
    std::swap( A[130], A[i_max+120] );
    std::swap( A[145], A[i_max+135] );
    std::swap( A[160], A[i_max+150] );
    std::swap( A[175], A[i_max+165] );
    std::swap( A[190], A[i_max+180] );
    std::swap( A[205], A[i_max+195] );
    std::swap( A[220], A[i_max+210] );
    P[10] = i_max + 1;
    tmp = A[160];
    A[161] = A[161] / tmp;
    A[162] = A[162] / tmp;
    A[163] = A[163] / tmp;
    A[164] = A[164] / tmp;
    tmp = A[175];
    A[176] = A[176] - A[161]*tmp;
    A[177] = A[177] - A[162]*tmp;
    A[178] = A[178] - A[163]*tmp;
    A[179] = A[179] - A[164]*tmp;
    tmp = A[190];
    A[191] = A[191] - A[161]*tmp;
    A[192] = A[192] - A[162]*tmp;
    A[193] = A[193] - A[163]*tmp;
    A[194] = A[194] - A[164]*tmp;
    tmp = A[205];
    A[206] = A[206] - A[161]*tmp;
    A[207] = A[207] - A[162]*tmp;
    A[208] = A[208] - A[163]*tmp;
    A[209] = A[209] - A[164]*tmp;
    tmp = A[220];
    A[221] = A[221] - A[161]*tmp;
    A[222] = A[222] - A[162]*tmp;
    A[223] = A[223] - A[163]*tmp;
    A[224] = A[224] - A[164]*tmp;
    i_max = 11;
    a_max = abs(A[176]);
    if ( a_max < abs( A[177] ) ) { a_max = abs(A[177]); i_max = 12; }
    if ( a_max < abs( A[178] ) ) { a_max = abs(A[178]); i_max = 13; }
    if ( a_max < abs( A[179] ) ) { a_max = abs(A[179]); i_max = 14; }
    std::swap( A[11], A[i_max+0] );
    std::swap( A[26], A[i_max+15] );
    std::swap( A[41], A[i_max+30] );
    std::swap( A[56], A[i_max+45] );
    std::swap( A[71], A[i_max+60] );
    std::swap( A[86], A[i_max+75] );
    std::swap( A[101], A[i_max+90] );
    std::swap( A[116], A[i_max+105] );
    std::swap( A[131], A[i_max+120] );
    std::swap( A[146], A[i_max+135] );
    std::swap( A[161], A[i_max+150] );
    std::swap( A[176], A[i_max+165] );
    std::swap( A[191], A[i_max+180] );
    std::swap( A[206], A[i_max+195] );
    std::swap( A[221], A[i_max+210] );
    P[11] = i_max + 1;
    tmp = A[176];
    A[177] = A[177] / tmp;
    A[178] = A[178] / tmp;
    A[179] = A[179] / tmp;
    tmp = A[191];
    A[192] = A[192] - A[177]*tmp;
    A[193] = A[193] - A[178]*tmp;
    A[194] = A[194] - A[179]*tmp;
    tmp = A[206];
    A[207] = A[207] - A[177]*tmp;
    A[208] = A[208] - A[178]*tmp;
    A[209] = A[209] - A[179]*tmp;
    tmp = A[221];
    A[222] = A[222] - A[177]*tmp;
    A[223] = A[223] - A[178]*tmp;
    A[224] = A[224] - A[179]*tmp;
    i_max = 12;
    a_max = abs(A[192]);
    if ( a_max < abs( A[193] ) ) { a_max = abs(A[193]); i_max = 13; }
    if ( a_max < abs( A[194] ) ) { a_max = abs(A[194]); i_max = 14; }
    std::swap( A[12], A[i_max+0] );
    std::swap( A[27], A[i_max+15] );
    std::swap( A[42], A[i_max+30] );
    std::swap( A[57], A[i_max+45] );
    std::swap( A[72], A[i_max+60] );
    std::swap( A[87], A[i_max+75] );
    std::swap( A[102], A[i_max+90] );
    std::swap( A[117], A[i_max+105] );
    std::swap( A[132], A[i_max+120] );
    std::swap( A[147], A[i_max+135] );
    std::swap( A[162], A[i_max+150] );
    std::swap( A[177], A[i_max+165] );
    std::swap( A[192], A[i_max+180] );
    std::swap( A[207], A[i_max+195] );
    std::swap( A[222], A[i_max+210] );
    P[12] = i_max + 1;
    tmp = A[192];
    A[193] = A[193] / tmp;
    A[194] = A[194] / tmp;
    tmp = A[207];
    A[208] = A[208] - A[193]*tmp;
    A[209] = A[209] - A[194]*tmp;
    tmp = A[222];
    A[223] = A[223] - A[193]*tmp;
    A[224] = A[224] - A[194]*tmp;
    i_max = 13;
    a_max = abs(A[208]);
    if ( a_max < abs( A[209] ) ) { a_max = abs(A[209]); i_max = 14; }
    std::swap( A[13], A[i_max+0] );
    std::swap( A[28], A[i_max+15] );
    std::swap( A[43], A[i_max+30] );
    std::swap( A[58], A[i_max+45] );
    std::swap( A[73], A[i_max+60] );
    std::swap( A[88], A[i_max+75] );
    std::swap( A[103], A[i_max+90] );
    std::swap( A[118], A[i_max+105] );
    std::swap( A[133], A[i_max+120] );
    std::swap( A[148], A[i_max+135] );
    std::swap( A[163], A[i_max+150] );
    std::swap( A[178], A[i_max+165] );
    std::swap( A[193], A[i_max+180] );
    std::swap( A[208], A[i_max+195] );
    std::swap( A[223], A[i_max+210] );
    P[13] = i_max + 1;
    tmp = A[208];
    A[209] = A[209] / tmp;
    tmp = A[223];
    A[224] = A[224] - A[209]*tmp;
    P[14] = 15;
}

void lu_16( double *A, lapack_int *P )
{
    using std::abs;
    lapack_int i_max;
    double     a_max, tmp;

    i_max = 0;
    a_max = abs(A[0]);
    if ( a_max < abs( A[1] ) ) { a_max = abs(A[1]); i_max = 1; }
    if ( a_max < abs( A[2] ) ) { a_max = abs(A[2]); i_max = 2; }
    if ( a_max < abs( A[3] ) ) { a_max = abs(A[3]); i_max = 3; }
    if ( a_max < abs( A[4] ) ) { a_max = abs(A[4]); i_max = 4; }
    if ( a_max < abs( A[5] ) ) { a_max = abs(A[5]); i_max = 5; }
    if ( a_max < abs( A[6] ) ) { a_max = abs(A[6]); i_max = 6; }
    if ( a_max < abs( A[7] ) ) { a_max = abs(A[7]); i_max = 7; }
    if ( a_max < abs( A[8] ) ) { a_max = abs(A[8]); i_max = 8; }
    if ( a_max < abs( A[9] ) ) { a_max = abs(A[9]); i_max = 9; }
    if ( a_max < abs( A[10] ) ) { a_max = abs(A[10]); i_max = 10; }
    if ( a_max < abs( A[11] ) ) { a_max = abs(A[11]); i_max = 11; }
    if ( a_max < abs( A[12] ) ) { a_max = abs(A[12]); i_max = 12; }
    if ( a_max < abs( A[13] ) ) { a_max = abs(A[13]); i_max = 13; }
    if ( a_max < abs( A[14] ) ) { a_max = abs(A[14]); i_max = 14; }
    if ( a_max < abs( A[15] ) ) { a_max = abs(A[15]); i_max = 15; }
    std::swap( A[0], A[i_max+0] );
    std::swap( A[16], A[i_max+16] );
    std::swap( A[32], A[i_max+32] );
    std::swap( A[48], A[i_max+48] );
    std::swap( A[64], A[i_max+64] );
    std::swap( A[80], A[i_max+80] );
    std::swap( A[96], A[i_max+96] );
    std::swap( A[112], A[i_max+112] );
    std::swap( A[128], A[i_max+128] );
    std::swap( A[144], A[i_max+144] );
    std::swap( A[160], A[i_max+160] );
    std::swap( A[176], A[i_max+176] );
    std::swap( A[192], A[i_max+192] );
    std::swap( A[208], A[i_max+208] );
    std::swap( A[224], A[i_max+224] );
    std::swap( A[240], A[i_max+240] );
    P[0] = i_max + 1;
    tmp = A[0];
    A[1] = A[1] / tmp;
    A[2] = A[2] / tmp;
    A[3] = A[3] / tmp;
    A[4] = A[4] / tmp;
    A[5] = A[5] / tmp;
    A[6] = A[6] / tmp;
    A[7] = A[7] / tmp;
    A[8] = A[8] / tmp;
    A[9] = A[9] / tmp;
    A[10] = A[10] / tmp;
    A[11] = A[11] / tmp;
    A[12] = A[12] / tmp;
    A[13] = A[13] / tmp;
    A[14] = A[14] / tmp;
    A[15] = A[15] / tmp;
    tmp = A[16];
    A[17] = A[17] - A[1]*tmp;
    A[18] = A[18] - A[2]*tmp;
    A[19] = A[19] - A[3]*tmp;
    A[20] = A[20] - A[4]*tmp;
    A[21] = A[21] - A[5]*tmp;
    A[22] = A[22] - A[6]*tmp;
    A[23] = A[23] - A[7]*tmp;
    A[24] = A[24] - A[8]*tmp;
    A[25] = A[25] - A[9]*tmp;
    A[26] = A[26] - A[10]*tmp;
    A[27] = A[27] - A[11]*tmp;
    A[28] = A[28] - A[12]*tmp;
    A[29] = A[29] - A[13]*tmp;
    A[30] = A[30] - A[14]*tmp;
    A[31] = A[31] - A[15]*tmp;
    tmp = A[32];
    A[33] = A[33] - A[1]*tmp;
    A[34] = A[34] - A[2]*tmp;
    A[35] = A[35] - A[3]*tmp;
    A[36] = A[36] - A[4]*tmp;
    A[37] = A[37] - A[5]*tmp;
    A[38] = A[38] - A[6]*tmp;
    A[39] = A[39] - A[7]*tmp;
    A[40] = A[40] - A[8]*tmp;
    A[41] = A[41] - A[9]*tmp;
    A[42] = A[42] - A[10]*tmp;
    A[43] = A[43] - A[11]*tmp;
    A[44] = A[44] - A[12]*tmp;
    A[45] = A[45] - A[13]*tmp;
    A[46] = A[46] - A[14]*tmp;
    A[47] = A[47] - A[15]*tmp;
    tmp = A[48];
    A[49] = A[49] - A[1]*tmp;
    A[50] = A[50] - A[2]*tmp;
    A[51] = A[51] - A[3]*tmp;
    A[52] = A[52] - A[4]*tmp;
    A[53] = A[53] - A[5]*tmp;
    A[54] = A[54] - A[6]*tmp;
    A[55] = A[55] - A[7]*tmp;
    A[56] = A[56] - A[8]*tmp;
    A[57] = A[57] - A[9]*tmp;
    A[58] = A[58] - A[10]*tmp;
    A[59] = A[59] - A[11]*tmp;
    A[60] = A[60] - A[12]*tmp;
    A[61] = A[61] - A[13]*tmp;
    A[62] = A[62] - A[14]*tmp;
    A[63] = A[63] - A[15]*tmp;
    tmp = A[64];
    A[65] = A[65] - A[1]*tmp;
    A[66] = A[66] - A[2]*tmp;
    A[67] = A[67] - A[3]*tmp;
    A[68] = A[68] - A[4]*tmp;
    A[69] = A[69] - A[5]*tmp;
    A[70] = A[70] - A[6]*tmp;
    A[71] = A[71] - A[7]*tmp;
    A[72] = A[72] - A[8]*tmp;
    A[73] = A[73] - A[9]*tmp;
    A[74] = A[74] - A[10]*tmp;
    A[75] = A[75] - A[11]*tmp;
    A[76] = A[76] - A[12]*tmp;
    A[77] = A[77] - A[13]*tmp;
    A[78] = A[78] - A[14]*tmp;
    A[79] = A[79] - A[15]*tmp;
    tmp = A[80];
    A[81] = A[81] - A[1]*tmp;
    A[82] = A[82] - A[2]*tmp;
    A[83] = A[83] - A[3]*tmp;
    A[84] = A[84] - A[4]*tmp;
    A[85] = A[85] - A[5]*tmp;
    A[86] = A[86] - A[6]*tmp;
    A[87] = A[87] - A[7]*tmp;
    A[88] = A[88] - A[8]*tmp;
    A[89] = A[89] - A[9]*tmp;
    A[90] = A[90] - A[10]*tmp;
    A[91] = A[91] - A[11]*tmp;
    A[92] = A[92] - A[12]*tmp;
    A[93] = A[93] - A[13]*tmp;
    A[94] = A[94] - A[14]*tmp;
    A[95] = A[95] - A[15]*tmp;
    tmp = A[96];
    A[97] = A[97] - A[1]*tmp;
    A[98] = A[98] - A[2]*tmp;
    A[99] = A[99] - A[3]*tmp;
    A[100] = A[100] - A[4]*tmp;
    A[101] = A[101] - A[5]*tmp;
    A[102] = A[102] - A[6]*tmp;
    A[103] = A[103] - A[7]*tmp;
    A[104] = A[104] - A[8]*tmp;
    A[105] = A[105] - A[9]*tmp;
    A[106] = A[106] - A[10]*tmp;
    A[107] = A[107] - A[11]*tmp;
    A[108] = A[108] - A[12]*tmp;
    A[109] = A[109] - A[13]*tmp;
    A[110] = A[110] - A[14]*tmp;
    A[111] = A[111] - A[15]*tmp;
    tmp = A[112];
    A[113] = A[113] - A[1]*tmp;
    A[114] = A[114] - A[2]*tmp;
    A[115] = A[115] - A[3]*tmp;
    A[116] = A[116] - A[4]*tmp;
    A[117] = A[117] - A[5]*tmp;
    A[118] = A[118] - A[6]*tmp;
    A[119] = A[119] - A[7]*tmp;
    A[120] = A[120] - A[8]*tmp;
    A[121] = A[121] - A[9]*tmp;
    A[122] = A[122] - A[10]*tmp;
    A[123] = A[123] - A[11]*tmp;
    A[124] = A[124] - A[12]*tmp;
    A[125] = A[125] - A[13]*tmp;
    A[126] = A[126] - A[14]*tmp;
    A[127] = A[127] - A[15]*tmp;
    tmp = A[128];
    A[129] = A[129] - A[1]*tmp;
    A[130] = A[130] - A[2]*tmp;
    A[131] = A[131] - A[3]*tmp;
    A[132] = A[132] - A[4]*tmp;
    A[133] = A[133] - A[5]*tmp;
    A[134] = A[134] - A[6]*tmp;
    A[135] = A[135] - A[7]*tmp;
    A[136] = A[136] - A[8]*tmp;
    A[137] = A[137] - A[9]*tmp;
    A[138] = A[138] - A[10]*tmp;
    A[139] = A[139] - A[11]*tmp;
    A[140] = A[140] - A[12]*tmp;
    A[141] = A[141] - A[13]*tmp;
    A[142] = A[142] - A[14]*tmp;
    A[143] = A[143] - A[15]*tmp;
    tmp = A[144];
    A[145] = A[145] - A[1]*tmp;
    A[146] = A[146] - A[2]*tmp;
    A[147] = A[147] - A[3]*tmp;
    A[148] = A[148] - A[4]*tmp;
    A[149] = A[149] - A[5]*tmp;
    A[150] = A[150] - A[6]*tmp;
    A[151] = A[151] - A[7]*tmp;
    A[152] = A[152] - A[8]*tmp;
    A[153] = A[153] - A[9]*tmp;
    A[154] = A[154] - A[10]*tmp;
    A[155] = A[155] - A[11]*tmp;
    A[156] = A[156] - A[12]*tmp;
    A[157] = A[157] - A[13]*tmp;
    A[158] = A[158] - A[14]*tmp;
    A[159] = A[159] - A[15]*tmp;
    tmp = A[160];
    A[161] = A[161] - A[1]*tmp;
    A[162] = A[162] - A[2]*tmp;
    A[163] = A[163] - A[3]*tmp;
    A[164] = A[164] - A[4]*tmp;
    A[165] = A[165] - A[5]*tmp;
    A[166] = A[166] - A[6]*tmp;
    A[167] = A[167] - A[7]*tmp;
    A[168] = A[168] - A[8]*tmp;
    A[169] = A[169] - A[9]*tmp;
    A[170] = A[170] - A[10]*tmp;
    A[171] = A[171] - A[11]*tmp;
    A[172] = A[172] - A[12]*tmp;
    A[173] = A[173] - A[13]*tmp;
    A[174] = A[174] - A[14]*tmp;
    A[175] = A[175] - A[15]*tmp;
    tmp = A[176];
    A[177] = A[177] - A[1]*tmp;
    A[178] = A[178] - A[2]*tmp;
    A[179] = A[179] - A[3]*tmp;
    A[180] = A[180] - A[4]*tmp;
    A[181] = A[181] - A[5]*tmp;
    A[182] = A[182] - A[6]*tmp;
    A[183] = A[183] - A[7]*tmp;
    A[184] = A[184] - A[8]*tmp;
    A[185] = A[185] - A[9]*tmp;
    A[186] = A[186] - A[10]*tmp;
    A[187] = A[187] - A[11]*tmp;
    A[188] = A[188] - A[12]*tmp;
    A[189] = A[189] - A[13]*tmp;
    A[190] = A[190] - A[14]*tmp;
    A[191] = A[191] - A[15]*tmp;
    tmp = A[192];
    A[193] = A[193] - A[1]*tmp;
    A[194] = A[194] - A[2]*tmp;
    A[195] = A[195] - A[3]*tmp;
    A[196] = A[196] - A[4]*tmp;
    A[197] = A[197] - A[5]*tmp;
    A[198] = A[198] - A[6]*tmp;
    A[199] = A[199] - A[7]*tmp;
    A[200] = A[200] - A[8]*tmp;
    A[201] = A[201] - A[9]*tmp;
    A[202] = A[202] - A[10]*tmp;
    A[203] = A[203] - A[11]*tmp;
    A[204] = A[204] - A[12]*tmp;
    A[205] = A[205] - A[13]*tmp;
    A[206] = A[206] - A[14]*tmp;
    A[207] = A[207] - A[15]*tmp;
    tmp = A[208];
    A[209] = A[209] - A[1]*tmp;
    A[210] = A[210] - A[2]*tmp;
    A[211] = A[211] - A[3]*tmp;
    A[212] = A[212] - A[4]*tmp;
    A[213] = A[213] - A[5]*tmp;
    A[214] = A[214] - A[6]*tmp;
    A[215] = A[215] - A[7]*tmp;
    A[216] = A[216] - A[8]*tmp;
    A[217] = A[217] - A[9]*tmp;
    A[218] = A[218] - A[10]*tmp;
    A[219] = A[219] - A[11]*tmp;
    A[220] = A[220] - A[12]*tmp;
    A[221] = A[221] - A[13]*tmp;
    A[222] = A[222] - A[14]*tmp;
    A[223] = A[223] - A[15]*tmp;
    tmp = A[224];
    A[225] = A[225] - A[1]*tmp;
    A[226] = A[226] - A[2]*tmp;
    A[227] = A[227] - A[3]*tmp;
    A[228] = A[228] - A[4]*tmp;
    A[229] = A[229] - A[5]*tmp;
    A[230] = A[230] - A[6]*tmp;
    A[231] = A[231] - A[7]*tmp;
    A[232] = A[232] - A[8]*tmp;
    A[233] = A[233] - A[9]*tmp;
    A[234] = A[234] - A[10]*tmp;
    A[235] = A[235] - A[11]*tmp;
    A[236] = A[236] - A[12]*tmp;
    A[237] = A[237] - A[13]*tmp;
    A[238] = A[238] - A[14]*tmp;
    A[239] = A[239] - A[15]*tmp;
    tmp = A[240];
    A[241] = A[241] - A[1]*tmp;
    A[242] = A[242] - A[2]*tmp;
    A[243] = A[243] - A[3]*tmp;
    A[244] = A[244] - A[4]*tmp;
    A[245] = A[245] - A[5]*tmp;
    A[246] = A[246] - A[6]*tmp;
    A[247] = A[247] - A[7]*tmp;
    A[248] = A[248] - A[8]*tmp;
    A[249] = A[249] - A[9]*tmp;
    A[250] = A[250] - A[10]*tmp;
    A[251] = A[251] - A[11]*tmp;
    A[252] = A[252] - A[12]*tmp;
    A[253] = A[253] - A[13]*tmp;
    A[254] = A[254] - A[14]*tmp;
    A[255] = A[255] - A[15]*tmp;
    i_max = 1;
    a_max = abs(A[17]);
    if ( a_max < abs( A[18] ) ) { a_max = abs(A[18]); i_max = 2; }
    if ( a_max < abs( A[19] ) ) { a_max = abs(A[19]); i_max = 3; }
    if ( a_max < abs( A[20] ) ) { a_max = abs(A[20]); i_max = 4; }
    if ( a_max < abs( A[21] ) ) { a_max = abs(A[21]); i_max = 5; }
    if ( a_max < abs( A[22] ) ) { a_max = abs(A[22]); i_max = 6; }
    if ( a_max < abs( A[23] ) ) { a_max = abs(A[23]); i_max = 7; }
    if ( a_max < abs( A[24] ) ) { a_max = abs(A[24]); i_max = 8; }
    if ( a_max < abs( A[25] ) ) { a_max = abs(A[25]); i_max = 9; }
    if ( a_max < abs( A[26] ) ) { a_max = abs(A[26]); i_max = 10; }
    if ( a_max < abs( A[27] ) ) { a_max = abs(A[27]); i_max = 11; }
    if ( a_max < abs( A[28] ) ) { a_max = abs(A[28]); i_max = 12; }
    if ( a_max < abs( A[29] ) ) { a_max = abs(A[29]); i_max = 13; }
    if ( a_max < abs( A[30] ) ) { a_max = abs(A[30]); i_max = 14; }
    if ( a_max < abs( A[31] ) ) { a_max = abs(A[31]); i_max = 15; }
    std::swap( A[1], A[i_max+0] );
    std::swap( A[17], A[i_max+16] );
    std::swap( A[33], A[i_max+32] );
    std::swap( A[49], A[i_max+48] );
    std::swap( A[65], A[i_max+64] );
    std::swap( A[81], A[i_max+80] );
    std::swap( A[97], A[i_max+96] );
    std::swap( A[113], A[i_max+112] );
    std::swap( A[129], A[i_max+128] );
    std::swap( A[145], A[i_max+144] );
    std::swap( A[161], A[i_max+160] );
    std::swap( A[177], A[i_max+176] );
    std::swap( A[193], A[i_max+192] );
    std::swap( A[209], A[i_max+208] );
    std::swap( A[225], A[i_max+224] );
    std::swap( A[241], A[i_max+240] );
    P[1] = i_max + 1;
    tmp = A[17];
    A[18] = A[18] / tmp;
    A[19] = A[19] / tmp;
    A[20] = A[20] / tmp;
    A[21] = A[21] / tmp;
    A[22] = A[22] / tmp;
    A[23] = A[23] / tmp;
    A[24] = A[24] / tmp;
    A[25] = A[25] / tmp;
    A[26] = A[26] / tmp;
    A[27] = A[27] / tmp;
    A[28] = A[28] / tmp;
    A[29] = A[29] / tmp;
    A[30] = A[30] / tmp;
    A[31] = A[31] / tmp;
    tmp = A[33];
    A[34] = A[34] - A[18]*tmp;
    A[35] = A[35] - A[19]*tmp;
    A[36] = A[36] - A[20]*tmp;
    A[37] = A[37] - A[21]*tmp;
    A[38] = A[38] - A[22]*tmp;
    A[39] = A[39] - A[23]*tmp;
    A[40] = A[40] - A[24]*tmp;
    A[41] = A[41] - A[25]*tmp;
    A[42] = A[42] - A[26]*tmp;
    A[43] = A[43] - A[27]*tmp;
    A[44] = A[44] - A[28]*tmp;
    A[45] = A[45] - A[29]*tmp;
    A[46] = A[46] - A[30]*tmp;
    A[47] = A[47] - A[31]*tmp;
    tmp = A[49];
    A[50] = A[50] - A[18]*tmp;
    A[51] = A[51] - A[19]*tmp;
    A[52] = A[52] - A[20]*tmp;
    A[53] = A[53] - A[21]*tmp;
    A[54] = A[54] - A[22]*tmp;
    A[55] = A[55] - A[23]*tmp;
    A[56] = A[56] - A[24]*tmp;
    A[57] = A[57] - A[25]*tmp;
    A[58] = A[58] - A[26]*tmp;
    A[59] = A[59] - A[27]*tmp;
    A[60] = A[60] - A[28]*tmp;
    A[61] = A[61] - A[29]*tmp;
    A[62] = A[62] - A[30]*tmp;
    A[63] = A[63] - A[31]*tmp;
    tmp = A[65];
    A[66] = A[66] - A[18]*tmp;
    A[67] = A[67] - A[19]*tmp;
    A[68] = A[68] - A[20]*tmp;
    A[69] = A[69] - A[21]*tmp;
    A[70] = A[70] - A[22]*tmp;
    A[71] = A[71] - A[23]*tmp;
    A[72] = A[72] - A[24]*tmp;
    A[73] = A[73] - A[25]*tmp;
    A[74] = A[74] - A[26]*tmp;
    A[75] = A[75] - A[27]*tmp;
    A[76] = A[76] - A[28]*tmp;
    A[77] = A[77] - A[29]*tmp;
    A[78] = A[78] - A[30]*tmp;
    A[79] = A[79] - A[31]*tmp;
    tmp = A[81];
    A[82] = A[82] - A[18]*tmp;
    A[83] = A[83] - A[19]*tmp;
    A[84] = A[84] - A[20]*tmp;
    A[85] = A[85] - A[21]*tmp;
    A[86] = A[86] - A[22]*tmp;
    A[87] = A[87] - A[23]*tmp;
    A[88] = A[88] - A[24]*tmp;
    A[89] = A[89] - A[25]*tmp;
    A[90] = A[90] - A[26]*tmp;
    A[91] = A[91] - A[27]*tmp;
    A[92] = A[92] - A[28]*tmp;
    A[93] = A[93] - A[29]*tmp;
    A[94] = A[94] - A[30]*tmp;
    A[95] = A[95] - A[31]*tmp;
    tmp = A[97];
    A[98] = A[98] - A[18]*tmp;
    A[99] = A[99] - A[19]*tmp;
    A[100] = A[100] - A[20]*tmp;
    A[101] = A[101] - A[21]*tmp;
    A[102] = A[102] - A[22]*tmp;
    A[103] = A[103] - A[23]*tmp;
    A[104] = A[104] - A[24]*tmp;
    A[105] = A[105] - A[25]*tmp;
    A[106] = A[106] - A[26]*tmp;
    A[107] = A[107] - A[27]*tmp;
    A[108] = A[108] - A[28]*tmp;
    A[109] = A[109] - A[29]*tmp;
    A[110] = A[110] - A[30]*tmp;
    A[111] = A[111] - A[31]*tmp;
    tmp = A[113];
    A[114] = A[114] - A[18]*tmp;
    A[115] = A[115] - A[19]*tmp;
    A[116] = A[116] - A[20]*tmp;
    A[117] = A[117] - A[21]*tmp;
    A[118] = A[118] - A[22]*tmp;
    A[119] = A[119] - A[23]*tmp;
    A[120] = A[120] - A[24]*tmp;
    A[121] = A[121] - A[25]*tmp;
    A[122] = A[122] - A[26]*tmp;
    A[123] = A[123] - A[27]*tmp;
    A[124] = A[124] - A[28]*tmp;
    A[125] = A[125] - A[29]*tmp;
    A[126] = A[126] - A[30]*tmp;
    A[127] = A[127] - A[31]*tmp;
    tmp = A[129];
    A[130] = A[130] - A[18]*tmp;
    A[131] = A[131] - A[19]*tmp;
    A[132] = A[132] - A[20]*tmp;
    A[133] = A[133] - A[21]*tmp;
    A[134] = A[134] - A[22]*tmp;
    A[135] = A[135] - A[23]*tmp;
    A[136] = A[136] - A[24]*tmp;
    A[137] = A[137] - A[25]*tmp;
    A[138] = A[138] - A[26]*tmp;
    A[139] = A[139] - A[27]*tmp;
    A[140] = A[140] - A[28]*tmp;
    A[141] = A[141] - A[29]*tmp;
    A[142] = A[142] - A[30]*tmp;
    A[143] = A[143] - A[31]*tmp;
    tmp = A[145];
    A[146] = A[146] - A[18]*tmp;
    A[147] = A[147] - A[19]*tmp;
    A[148] = A[148] - A[20]*tmp;
    A[149] = A[149] - A[21]*tmp;
    A[150] = A[150] - A[22]*tmp;
    A[151] = A[151] - A[23]*tmp;
    A[152] = A[152] - A[24]*tmp;
    A[153] = A[153] - A[25]*tmp;
    A[154] = A[154] - A[26]*tmp;
    A[155] = A[155] - A[27]*tmp;
    A[156] = A[156] - A[28]*tmp;
    A[157] = A[157] - A[29]*tmp;
    A[158] = A[158] - A[30]*tmp;
    A[159] = A[159] - A[31]*tmp;
    tmp = A[161];
    A[162] = A[162] - A[18]*tmp;
    A[163] = A[163] - A[19]*tmp;
    A[164] = A[164] - A[20]*tmp;
    A[165] = A[165] - A[21]*tmp;
    A[166] = A[166] - A[22]*tmp;
    A[167] = A[167] - A[23]*tmp;
    A[168] = A[168] - A[24]*tmp;
    A[169] = A[169] - A[25]*tmp;
    A[170] = A[170] - A[26]*tmp;
    A[171] = A[171] - A[27]*tmp;
    A[172] = A[172] - A[28]*tmp;
    A[173] = A[173] - A[29]*tmp;
    A[174] = A[174] - A[30]*tmp;
    A[175] = A[175] - A[31]*tmp;
    tmp = A[177];
    A[178] = A[178] - A[18]*tmp;
    A[179] = A[179] - A[19]*tmp;
    A[180] = A[180] - A[20]*tmp;
    A[181] = A[181] - A[21]*tmp;
    A[182] = A[182] - A[22]*tmp;
    A[183] = A[183] - A[23]*tmp;
    A[184] = A[184] - A[24]*tmp;
    A[185] = A[185] - A[25]*tmp;
    A[186] = A[186] - A[26]*tmp;
    A[187] = A[187] - A[27]*tmp;
    A[188] = A[188] - A[28]*tmp;
    A[189] = A[189] - A[29]*tmp;
    A[190] = A[190] - A[30]*tmp;
    A[191] = A[191] - A[31]*tmp;
    tmp = A[193];
    A[194] = A[194] - A[18]*tmp;
    A[195] = A[195] - A[19]*tmp;
    A[196] = A[196] - A[20]*tmp;
    A[197] = A[197] - A[21]*tmp;
    A[198] = A[198] - A[22]*tmp;
    A[199] = A[199] - A[23]*tmp;
    A[200] = A[200] - A[24]*tmp;
    A[201] = A[201] - A[25]*tmp;
    A[202] = A[202] - A[26]*tmp;
    A[203] = A[203] - A[27]*tmp;
    A[204] = A[204] - A[28]*tmp;
    A[205] = A[205] - A[29]*tmp;
    A[206] = A[206] - A[30]*tmp;
    A[207] = A[207] - A[31]*tmp;
    tmp = A[209];
    A[210] = A[210] - A[18]*tmp;
    A[211] = A[211] - A[19]*tmp;
    A[212] = A[212] - A[20]*tmp;
    A[213] = A[213] - A[21]*tmp;
    A[214] = A[214] - A[22]*tmp;
    A[215] = A[215] - A[23]*tmp;
    A[216] = A[216] - A[24]*tmp;
    A[217] = A[217] - A[25]*tmp;
    A[218] = A[218] - A[26]*tmp;
    A[219] = A[219] - A[27]*tmp;
    A[220] = A[220] - A[28]*tmp;
    A[221] = A[221] - A[29]*tmp;
    A[222] = A[222] - A[30]*tmp;
    A[223] = A[223] - A[31]*tmp;
    tmp = A[225];
    A[226] = A[226] - A[18]*tmp;
    A[227] = A[227] - A[19]*tmp;
    A[228] = A[228] - A[20]*tmp;
    A[229] = A[229] - A[21]*tmp;
    A[230] = A[230] - A[22]*tmp;
    A[231] = A[231] - A[23]*tmp;
    A[232] = A[232] - A[24]*tmp;
    A[233] = A[233] - A[25]*tmp;
    A[234] = A[234] - A[26]*tmp;
    A[235] = A[235] - A[27]*tmp;
    A[236] = A[236] - A[28]*tmp;
    A[237] = A[237] - A[29]*tmp;
    A[238] = A[238] - A[30]*tmp;
    A[239] = A[239] - A[31]*tmp;
    tmp = A[241];
    A[242] = A[242] - A[18]*tmp;
    A[243] = A[243] - A[19]*tmp;
    A[244] = A[244] - A[20]*tmp;
    A[245] = A[245] - A[21]*tmp;
    A[246] = A[246] - A[22]*tmp;
    A[247] = A[247] - A[23]*tmp;
    A[248] = A[248] - A[24]*tmp;
    A[249] = A[249] - A[25]*tmp;
    A[250] = A[250] - A[26]*tmp;
    A[251] = A[251] - A[27]*tmp;
    A[252] = A[252] - A[28]*tmp;
    A[253] = A[253] - A[29]*tmp;
    A[254] = A[254] - A[30]*tmp;
    A[255] = A[255] - A[31]*tmp;
    i_max = 2;
    a_max = abs(A[34]);
    if ( a_max < abs( A[35] ) ) { a_max = abs(A[35]); i_max = 3; }
    if ( a_max < abs( A[36] ) ) { a_max = abs(A[36]); i_max = 4; }
    if ( a_max < abs( A[37] ) ) { a_max = abs(A[37]); i_max = 5; }
    if ( a_max < abs( A[38] ) ) { a_max = abs(A[38]); i_max = 6; }
    if ( a_max < abs( A[39] ) ) { a_max = abs(A[39]); i_max = 7; }
    if ( a_max < abs( A[40] ) ) { a_max = abs(A[40]); i_max = 8; }
    if ( a_max < abs( A[41] ) ) { a_max = abs(A[41]); i_max = 9; }
    if ( a_max < abs( A[42] ) ) { a_max = abs(A[42]); i_max = 10; }
    if ( a_max < abs( A[43] ) ) { a_max = abs(A[43]); i_max = 11; }
    if ( a_max < abs( A[44] ) ) { a_max = abs(A[44]); i_max = 12; }
    if ( a_max < abs( A[45] ) ) { a_max = abs(A[45]); i_max = 13; }
    if ( a_max < abs( A[46] ) ) { a_max = abs(A[46]); i_max = 14; }
    if ( a_max < abs( A[47] ) ) { a_max = abs(A[47]); i_max = 15; }
    std::swap( A[2], A[i_max+0] );
    std::swap( A[18], A[i_max+16] );
    std::swap( A[34], A[i_max+32] );
    std::swap( A[50], A[i_max+48] );
    std::swap( A[66], A[i_max+64] );
    std::swap( A[82], A[i_max+80] );
    std::swap( A[98], A[i_max+96] );
    std::swap( A[114], A[i_max+112] );
    std::swap( A[130], A[i_max+128] );
    std::swap( A[146], A[i_max+144] );
    std::swap( A[162], A[i_max+160] );
    std::swap( A[178], A[i_max+176] );
    std::swap( A[194], A[i_max+192] );
    std::swap( A[210], A[i_max+208] );
    std::swap( A[226], A[i_max+224] );
    std::swap( A[242], A[i_max+240] );
    P[2] = i_max + 1;
    tmp = A[34];
    A[35] = A[35] / tmp;
    A[36] = A[36] / tmp;
    A[37] = A[37] / tmp;
    A[38] = A[38] / tmp;
    A[39] = A[39] / tmp;
    A[40] = A[40] / tmp;
    A[41] = A[41] / tmp;
    A[42] = A[42] / tmp;
    A[43] = A[43] / tmp;
    A[44] = A[44] / tmp;
    A[45] = A[45] / tmp;
    A[46] = A[46] / tmp;
    A[47] = A[47] / tmp;
    tmp = A[50];
    A[51] = A[51] - A[35]*tmp;
    A[52] = A[52] - A[36]*tmp;
    A[53] = A[53] - A[37]*tmp;
    A[54] = A[54] - A[38]*tmp;
    A[55] = A[55] - A[39]*tmp;
    A[56] = A[56] - A[40]*tmp;
    A[57] = A[57] - A[41]*tmp;
    A[58] = A[58] - A[42]*tmp;
    A[59] = A[59] - A[43]*tmp;
    A[60] = A[60] - A[44]*tmp;
    A[61] = A[61] - A[45]*tmp;
    A[62] = A[62] - A[46]*tmp;
    A[63] = A[63] - A[47]*tmp;
    tmp = A[66];
    A[67] = A[67] - A[35]*tmp;
    A[68] = A[68] - A[36]*tmp;
    A[69] = A[69] - A[37]*tmp;
    A[70] = A[70] - A[38]*tmp;
    A[71] = A[71] - A[39]*tmp;
    A[72] = A[72] - A[40]*tmp;
    A[73] = A[73] - A[41]*tmp;
    A[74] = A[74] - A[42]*tmp;
    A[75] = A[75] - A[43]*tmp;
    A[76] = A[76] - A[44]*tmp;
    A[77] = A[77] - A[45]*tmp;
    A[78] = A[78] - A[46]*tmp;
    A[79] = A[79] - A[47]*tmp;
    tmp = A[82];
    A[83] = A[83] - A[35]*tmp;
    A[84] = A[84] - A[36]*tmp;
    A[85] = A[85] - A[37]*tmp;
    A[86] = A[86] - A[38]*tmp;
    A[87] = A[87] - A[39]*tmp;
    A[88] = A[88] - A[40]*tmp;
    A[89] = A[89] - A[41]*tmp;
    A[90] = A[90] - A[42]*tmp;
    A[91] = A[91] - A[43]*tmp;
    A[92] = A[92] - A[44]*tmp;
    A[93] = A[93] - A[45]*tmp;
    A[94] = A[94] - A[46]*tmp;
    A[95] = A[95] - A[47]*tmp;
    tmp = A[98];
    A[99] = A[99] - A[35]*tmp;
    A[100] = A[100] - A[36]*tmp;
    A[101] = A[101] - A[37]*tmp;
    A[102] = A[102] - A[38]*tmp;
    A[103] = A[103] - A[39]*tmp;
    A[104] = A[104] - A[40]*tmp;
    A[105] = A[105] - A[41]*tmp;
    A[106] = A[106] - A[42]*tmp;
    A[107] = A[107] - A[43]*tmp;
    A[108] = A[108] - A[44]*tmp;
    A[109] = A[109] - A[45]*tmp;
    A[110] = A[110] - A[46]*tmp;
    A[111] = A[111] - A[47]*tmp;
    tmp = A[114];
    A[115] = A[115] - A[35]*tmp;
    A[116] = A[116] - A[36]*tmp;
    A[117] = A[117] - A[37]*tmp;
    A[118] = A[118] - A[38]*tmp;
    A[119] = A[119] - A[39]*tmp;
    A[120] = A[120] - A[40]*tmp;
    A[121] = A[121] - A[41]*tmp;
    A[122] = A[122] - A[42]*tmp;
    A[123] = A[123] - A[43]*tmp;
    A[124] = A[124] - A[44]*tmp;
    A[125] = A[125] - A[45]*tmp;
    A[126] = A[126] - A[46]*tmp;
    A[127] = A[127] - A[47]*tmp;
    tmp = A[130];
    A[131] = A[131] - A[35]*tmp;
    A[132] = A[132] - A[36]*tmp;
    A[133] = A[133] - A[37]*tmp;
    A[134] = A[134] - A[38]*tmp;
    A[135] = A[135] - A[39]*tmp;
    A[136] = A[136] - A[40]*tmp;
    A[137] = A[137] - A[41]*tmp;
    A[138] = A[138] - A[42]*tmp;
    A[139] = A[139] - A[43]*tmp;
    A[140] = A[140] - A[44]*tmp;
    A[141] = A[141] - A[45]*tmp;
    A[142] = A[142] - A[46]*tmp;
    A[143] = A[143] - A[47]*tmp;
    tmp = A[146];
    A[147] = A[147] - A[35]*tmp;
    A[148] = A[148] - A[36]*tmp;
    A[149] = A[149] - A[37]*tmp;
    A[150] = A[150] - A[38]*tmp;
    A[151] = A[151] - A[39]*tmp;
    A[152] = A[152] - A[40]*tmp;
    A[153] = A[153] - A[41]*tmp;
    A[154] = A[154] - A[42]*tmp;
    A[155] = A[155] - A[43]*tmp;
    A[156] = A[156] - A[44]*tmp;
    A[157] = A[157] - A[45]*tmp;
    A[158] = A[158] - A[46]*tmp;
    A[159] = A[159] - A[47]*tmp;
    tmp = A[162];
    A[163] = A[163] - A[35]*tmp;
    A[164] = A[164] - A[36]*tmp;
    A[165] = A[165] - A[37]*tmp;
    A[166] = A[166] - A[38]*tmp;
    A[167] = A[167] - A[39]*tmp;
    A[168] = A[168] - A[40]*tmp;
    A[169] = A[169] - A[41]*tmp;
    A[170] = A[170] - A[42]*tmp;
    A[171] = A[171] - A[43]*tmp;
    A[172] = A[172] - A[44]*tmp;
    A[173] = A[173] - A[45]*tmp;
    A[174] = A[174] - A[46]*tmp;
    A[175] = A[175] - A[47]*tmp;
    tmp = A[178];
    A[179] = A[179] - A[35]*tmp;
    A[180] = A[180] - A[36]*tmp;
    A[181] = A[181] - A[37]*tmp;
    A[182] = A[182] - A[38]*tmp;
    A[183] = A[183] - A[39]*tmp;
    A[184] = A[184] - A[40]*tmp;
    A[185] = A[185] - A[41]*tmp;
    A[186] = A[186] - A[42]*tmp;
    A[187] = A[187] - A[43]*tmp;
    A[188] = A[188] - A[44]*tmp;
    A[189] = A[189] - A[45]*tmp;
    A[190] = A[190] - A[46]*tmp;
    A[191] = A[191] - A[47]*tmp;
    tmp = A[194];
    A[195] = A[195] - A[35]*tmp;
    A[196] = A[196] - A[36]*tmp;
    A[197] = A[197] - A[37]*tmp;
    A[198] = A[198] - A[38]*tmp;
    A[199] = A[199] - A[39]*tmp;
    A[200] = A[200] - A[40]*tmp;
    A[201] = A[201] - A[41]*tmp;
    A[202] = A[202] - A[42]*tmp;
    A[203] = A[203] - A[43]*tmp;
    A[204] = A[204] - A[44]*tmp;
    A[205] = A[205] - A[45]*tmp;
    A[206] = A[206] - A[46]*tmp;
    A[207] = A[207] - A[47]*tmp;
    tmp = A[210];
    A[211] = A[211] - A[35]*tmp;
    A[212] = A[212] - A[36]*tmp;
    A[213] = A[213] - A[37]*tmp;
    A[214] = A[214] - A[38]*tmp;
    A[215] = A[215] - A[39]*tmp;
    A[216] = A[216] - A[40]*tmp;
    A[217] = A[217] - A[41]*tmp;
    A[218] = A[218] - A[42]*tmp;
    A[219] = A[219] - A[43]*tmp;
    A[220] = A[220] - A[44]*tmp;
    A[221] = A[221] - A[45]*tmp;
    A[222] = A[222] - A[46]*tmp;
    A[223] = A[223] - A[47]*tmp;
    tmp = A[226];
    A[227] = A[227] - A[35]*tmp;
    A[228] = A[228] - A[36]*tmp;
    A[229] = A[229] - A[37]*tmp;
    A[230] = A[230] - A[38]*tmp;
    A[231] = A[231] - A[39]*tmp;
    A[232] = A[232] - A[40]*tmp;
    A[233] = A[233] - A[41]*tmp;
    A[234] = A[234] - A[42]*tmp;
    A[235] = A[235] - A[43]*tmp;
    A[236] = A[236] - A[44]*tmp;
    A[237] = A[237] - A[45]*tmp;
    A[238] = A[238] - A[46]*tmp;
    A[239] = A[239] - A[47]*tmp;
    tmp = A[242];
    A[243] = A[243] - A[35]*tmp;
    A[244] = A[244] - A[36]*tmp;
    A[245] = A[245] - A[37]*tmp;
    A[246] = A[246] - A[38]*tmp;
    A[247] = A[247] - A[39]*tmp;
    A[248] = A[248] - A[40]*tmp;
    A[249] = A[249] - A[41]*tmp;
    A[250] = A[250] - A[42]*tmp;
    A[251] = A[251] - A[43]*tmp;
    A[252] = A[252] - A[44]*tmp;
    A[253] = A[253] - A[45]*tmp;
    A[254] = A[254] - A[46]*tmp;
    A[255] = A[255] - A[47]*tmp;
    i_max = 3;
    a_max = abs(A[51]);
    if ( a_max < abs( A[52] ) ) { a_max = abs(A[52]); i_max = 4; }
    if ( a_max < abs( A[53] ) ) { a_max = abs(A[53]); i_max = 5; }
    if ( a_max < abs( A[54] ) ) { a_max = abs(A[54]); i_max = 6; }
    if ( a_max < abs( A[55] ) ) { a_max = abs(A[55]); i_max = 7; }
    if ( a_max < abs( A[56] ) ) { a_max = abs(A[56]); i_max = 8; }
    if ( a_max < abs( A[57] ) ) { a_max = abs(A[57]); i_max = 9; }
    if ( a_max < abs( A[58] ) ) { a_max = abs(A[58]); i_max = 10; }
    if ( a_max < abs( A[59] ) ) { a_max = abs(A[59]); i_max = 11; }
    if ( a_max < abs( A[60] ) ) { a_max = abs(A[60]); i_max = 12; }
    if ( a_max < abs( A[61] ) ) { a_max = abs(A[61]); i_max = 13; }
    if ( a_max < abs( A[62] ) ) { a_max = abs(A[62]); i_max = 14; }
    if ( a_max < abs( A[63] ) ) { a_max = abs(A[63]); i_max = 15; }
    std::swap( A[3], A[i_max+0] );
    std::swap( A[19], A[i_max+16] );
    std::swap( A[35], A[i_max+32] );
    std::swap( A[51], A[i_max+48] );
    std::swap( A[67], A[i_max+64] );
    std::swap( A[83], A[i_max+80] );
    std::swap( A[99], A[i_max+96] );
    std::swap( A[115], A[i_max+112] );
    std::swap( A[131], A[i_max+128] );
    std::swap( A[147], A[i_max+144] );
    std::swap( A[163], A[i_max+160] );
    std::swap( A[179], A[i_max+176] );
    std::swap( A[195], A[i_max+192] );
    std::swap( A[211], A[i_max+208] );
    std::swap( A[227], A[i_max+224] );
    std::swap( A[243], A[i_max+240] );
    P[3] = i_max + 1;
    tmp = A[51];
    A[52] = A[52] / tmp;
    A[53] = A[53] / tmp;
    A[54] = A[54] / tmp;
    A[55] = A[55] / tmp;
    A[56] = A[56] / tmp;
    A[57] = A[57] / tmp;
    A[58] = A[58] / tmp;
    A[59] = A[59] / tmp;
    A[60] = A[60] / tmp;
    A[61] = A[61] / tmp;
    A[62] = A[62] / tmp;
    A[63] = A[63] / tmp;
    tmp = A[67];
    A[68] = A[68] - A[52]*tmp;
    A[69] = A[69] - A[53]*tmp;
    A[70] = A[70] - A[54]*tmp;
    A[71] = A[71] - A[55]*tmp;
    A[72] = A[72] - A[56]*tmp;
    A[73] = A[73] - A[57]*tmp;
    A[74] = A[74] - A[58]*tmp;
    A[75] = A[75] - A[59]*tmp;
    A[76] = A[76] - A[60]*tmp;
    A[77] = A[77] - A[61]*tmp;
    A[78] = A[78] - A[62]*tmp;
    A[79] = A[79] - A[63]*tmp;
    tmp = A[83];
    A[84] = A[84] - A[52]*tmp;
    A[85] = A[85] - A[53]*tmp;
    A[86] = A[86] - A[54]*tmp;
    A[87] = A[87] - A[55]*tmp;
    A[88] = A[88] - A[56]*tmp;
    A[89] = A[89] - A[57]*tmp;
    A[90] = A[90] - A[58]*tmp;
    A[91] = A[91] - A[59]*tmp;
    A[92] = A[92] - A[60]*tmp;
    A[93] = A[93] - A[61]*tmp;
    A[94] = A[94] - A[62]*tmp;
    A[95] = A[95] - A[63]*tmp;
    tmp = A[99];
    A[100] = A[100] - A[52]*tmp;
    A[101] = A[101] - A[53]*tmp;
    A[102] = A[102] - A[54]*tmp;
    A[103] = A[103] - A[55]*tmp;
    A[104] = A[104] - A[56]*tmp;
    A[105] = A[105] - A[57]*tmp;
    A[106] = A[106] - A[58]*tmp;
    A[107] = A[107] - A[59]*tmp;
    A[108] = A[108] - A[60]*tmp;
    A[109] = A[109] - A[61]*tmp;
    A[110] = A[110] - A[62]*tmp;
    A[111] = A[111] - A[63]*tmp;
    tmp = A[115];
    A[116] = A[116] - A[52]*tmp;
    A[117] = A[117] - A[53]*tmp;
    A[118] = A[118] - A[54]*tmp;
    A[119] = A[119] - A[55]*tmp;
    A[120] = A[120] - A[56]*tmp;
    A[121] = A[121] - A[57]*tmp;
    A[122] = A[122] - A[58]*tmp;
    A[123] = A[123] - A[59]*tmp;
    A[124] = A[124] - A[60]*tmp;
    A[125] = A[125] - A[61]*tmp;
    A[126] = A[126] - A[62]*tmp;
    A[127] = A[127] - A[63]*tmp;
    tmp = A[131];
    A[132] = A[132] - A[52]*tmp;
    A[133] = A[133] - A[53]*tmp;
    A[134] = A[134] - A[54]*tmp;
    A[135] = A[135] - A[55]*tmp;
    A[136] = A[136] - A[56]*tmp;
    A[137] = A[137] - A[57]*tmp;
    A[138] = A[138] - A[58]*tmp;
    A[139] = A[139] - A[59]*tmp;
    A[140] = A[140] - A[60]*tmp;
    A[141] = A[141] - A[61]*tmp;
    A[142] = A[142] - A[62]*tmp;
    A[143] = A[143] - A[63]*tmp;
    tmp = A[147];
    A[148] = A[148] - A[52]*tmp;
    A[149] = A[149] - A[53]*tmp;
    A[150] = A[150] - A[54]*tmp;
    A[151] = A[151] - A[55]*tmp;
    A[152] = A[152] - A[56]*tmp;
    A[153] = A[153] - A[57]*tmp;
    A[154] = A[154] - A[58]*tmp;
    A[155] = A[155] - A[59]*tmp;
    A[156] = A[156] - A[60]*tmp;
    A[157] = A[157] - A[61]*tmp;
    A[158] = A[158] - A[62]*tmp;
    A[159] = A[159] - A[63]*tmp;
    tmp = A[163];
    A[164] = A[164] - A[52]*tmp;
    A[165] = A[165] - A[53]*tmp;
    A[166] = A[166] - A[54]*tmp;
    A[167] = A[167] - A[55]*tmp;
    A[168] = A[168] - A[56]*tmp;
    A[169] = A[169] - A[57]*tmp;
    A[170] = A[170] - A[58]*tmp;
    A[171] = A[171] - A[59]*tmp;
    A[172] = A[172] - A[60]*tmp;
    A[173] = A[173] - A[61]*tmp;
    A[174] = A[174] - A[62]*tmp;
    A[175] = A[175] - A[63]*tmp;
    tmp = A[179];
    A[180] = A[180] - A[52]*tmp;
    A[181] = A[181] - A[53]*tmp;
    A[182] = A[182] - A[54]*tmp;
    A[183] = A[183] - A[55]*tmp;
    A[184] = A[184] - A[56]*tmp;
    A[185] = A[185] - A[57]*tmp;
    A[186] = A[186] - A[58]*tmp;
    A[187] = A[187] - A[59]*tmp;
    A[188] = A[188] - A[60]*tmp;
    A[189] = A[189] - A[61]*tmp;
    A[190] = A[190] - A[62]*tmp;
    A[191] = A[191] - A[63]*tmp;
    tmp = A[195];
    A[196] = A[196] - A[52]*tmp;
    A[197] = A[197] - A[53]*tmp;
    A[198] = A[198] - A[54]*tmp;
    A[199] = A[199] - A[55]*tmp;
    A[200] = A[200] - A[56]*tmp;
    A[201] = A[201] - A[57]*tmp;
    A[202] = A[202] - A[58]*tmp;
    A[203] = A[203] - A[59]*tmp;
    A[204] = A[204] - A[60]*tmp;
    A[205] = A[205] - A[61]*tmp;
    A[206] = A[206] - A[62]*tmp;
    A[207] = A[207] - A[63]*tmp;
    tmp = A[211];
    A[212] = A[212] - A[52]*tmp;
    A[213] = A[213] - A[53]*tmp;
    A[214] = A[214] - A[54]*tmp;
    A[215] = A[215] - A[55]*tmp;
    A[216] = A[216] - A[56]*tmp;
    A[217] = A[217] - A[57]*tmp;
    A[218] = A[218] - A[58]*tmp;
    A[219] = A[219] - A[59]*tmp;
    A[220] = A[220] - A[60]*tmp;
    A[221] = A[221] - A[61]*tmp;
    A[222] = A[222] - A[62]*tmp;
    A[223] = A[223] - A[63]*tmp;
    tmp = A[227];
    A[228] = A[228] - A[52]*tmp;
    A[229] = A[229] - A[53]*tmp;
    A[230] = A[230] - A[54]*tmp;
    A[231] = A[231] - A[55]*tmp;
    A[232] = A[232] - A[56]*tmp;
    A[233] = A[233] - A[57]*tmp;
    A[234] = A[234] - A[58]*tmp;
    A[235] = A[235] - A[59]*tmp;
    A[236] = A[236] - A[60]*tmp;
    A[237] = A[237] - A[61]*tmp;
    A[238] = A[238] - A[62]*tmp;
    A[239] = A[239] - A[63]*tmp;
    tmp = A[243];
    A[244] = A[244] - A[52]*tmp;
    A[245] = A[245] - A[53]*tmp;
    A[246] = A[246] - A[54]*tmp;
    A[247] = A[247] - A[55]*tmp;
    A[248] = A[248] - A[56]*tmp;
    A[249] = A[249] - A[57]*tmp;
    A[250] = A[250] - A[58]*tmp;
    A[251] = A[251] - A[59]*tmp;
    A[252] = A[252] - A[60]*tmp;
    A[253] = A[253] - A[61]*tmp;
    A[254] = A[254] - A[62]*tmp;
    A[255] = A[255] - A[63]*tmp;
    i_max = 4;
    a_max = abs(A[68]);
    if ( a_max < abs( A[69] ) ) { a_max = abs(A[69]); i_max = 5; }
    if ( a_max < abs( A[70] ) ) { a_max = abs(A[70]); i_max = 6; }
    if ( a_max < abs( A[71] ) ) { a_max = abs(A[71]); i_max = 7; }
    if ( a_max < abs( A[72] ) ) { a_max = abs(A[72]); i_max = 8; }
    if ( a_max < abs( A[73] ) ) { a_max = abs(A[73]); i_max = 9; }
    if ( a_max < abs( A[74] ) ) { a_max = abs(A[74]); i_max = 10; }
    if ( a_max < abs( A[75] ) ) { a_max = abs(A[75]); i_max = 11; }
    if ( a_max < abs( A[76] ) ) { a_max = abs(A[76]); i_max = 12; }
    if ( a_max < abs( A[77] ) ) { a_max = abs(A[77]); i_max = 13; }
    if ( a_max < abs( A[78] ) ) { a_max = abs(A[78]); i_max = 14; }
    if ( a_max < abs( A[79] ) ) { a_max = abs(A[79]); i_max = 15; }
    std::swap( A[4], A[i_max+0] );
    std::swap( A[20], A[i_max+16] );
    std::swap( A[36], A[i_max+32] );
    std::swap( A[52], A[i_max+48] );
    std::swap( A[68], A[i_max+64] );
    std::swap( A[84], A[i_max+80] );
    std::swap( A[100], A[i_max+96] );
    std::swap( A[116], A[i_max+112] );
    std::swap( A[132], A[i_max+128] );
    std::swap( A[148], A[i_max+144] );
    std::swap( A[164], A[i_max+160] );
    std::swap( A[180], A[i_max+176] );
    std::swap( A[196], A[i_max+192] );
    std::swap( A[212], A[i_max+208] );
    std::swap( A[228], A[i_max+224] );
    std::swap( A[244], A[i_max+240] );
    P[4] = i_max + 1;
    tmp = A[68];
    A[69] = A[69] / tmp;
    A[70] = A[70] / tmp;
    A[71] = A[71] / tmp;
    A[72] = A[72] / tmp;
    A[73] = A[73] / tmp;
    A[74] = A[74] / tmp;
    A[75] = A[75] / tmp;
    A[76] = A[76] / tmp;
    A[77] = A[77] / tmp;
    A[78] = A[78] / tmp;
    A[79] = A[79] / tmp;
    tmp = A[84];
    A[85] = A[85] - A[69]*tmp;
    A[86] = A[86] - A[70]*tmp;
    A[87] = A[87] - A[71]*tmp;
    A[88] = A[88] - A[72]*tmp;
    A[89] = A[89] - A[73]*tmp;
    A[90] = A[90] - A[74]*tmp;
    A[91] = A[91] - A[75]*tmp;
    A[92] = A[92] - A[76]*tmp;
    A[93] = A[93] - A[77]*tmp;
    A[94] = A[94] - A[78]*tmp;
    A[95] = A[95] - A[79]*tmp;
    tmp = A[100];
    A[101] = A[101] - A[69]*tmp;
    A[102] = A[102] - A[70]*tmp;
    A[103] = A[103] - A[71]*tmp;
    A[104] = A[104] - A[72]*tmp;
    A[105] = A[105] - A[73]*tmp;
    A[106] = A[106] - A[74]*tmp;
    A[107] = A[107] - A[75]*tmp;
    A[108] = A[108] - A[76]*tmp;
    A[109] = A[109] - A[77]*tmp;
    A[110] = A[110] - A[78]*tmp;
    A[111] = A[111] - A[79]*tmp;
    tmp = A[116];
    A[117] = A[117] - A[69]*tmp;
    A[118] = A[118] - A[70]*tmp;
    A[119] = A[119] - A[71]*tmp;
    A[120] = A[120] - A[72]*tmp;
    A[121] = A[121] - A[73]*tmp;
    A[122] = A[122] - A[74]*tmp;
    A[123] = A[123] - A[75]*tmp;
    A[124] = A[124] - A[76]*tmp;
    A[125] = A[125] - A[77]*tmp;
    A[126] = A[126] - A[78]*tmp;
    A[127] = A[127] - A[79]*tmp;
    tmp = A[132];
    A[133] = A[133] - A[69]*tmp;
    A[134] = A[134] - A[70]*tmp;
    A[135] = A[135] - A[71]*tmp;
    A[136] = A[136] - A[72]*tmp;
    A[137] = A[137] - A[73]*tmp;
    A[138] = A[138] - A[74]*tmp;
    A[139] = A[139] - A[75]*tmp;
    A[140] = A[140] - A[76]*tmp;
    A[141] = A[141] - A[77]*tmp;
    A[142] = A[142] - A[78]*tmp;
    A[143] = A[143] - A[79]*tmp;
    tmp = A[148];
    A[149] = A[149] - A[69]*tmp;
    A[150] = A[150] - A[70]*tmp;
    A[151] = A[151] - A[71]*tmp;
    A[152] = A[152] - A[72]*tmp;
    A[153] = A[153] - A[73]*tmp;
    A[154] = A[154] - A[74]*tmp;
    A[155] = A[155] - A[75]*tmp;
    A[156] = A[156] - A[76]*tmp;
    A[157] = A[157] - A[77]*tmp;
    A[158] = A[158] - A[78]*tmp;
    A[159] = A[159] - A[79]*tmp;
    tmp = A[164];
    A[165] = A[165] - A[69]*tmp;
    A[166] = A[166] - A[70]*tmp;
    A[167] = A[167] - A[71]*tmp;
    A[168] = A[168] - A[72]*tmp;
    A[169] = A[169] - A[73]*tmp;
    A[170] = A[170] - A[74]*tmp;
    A[171] = A[171] - A[75]*tmp;
    A[172] = A[172] - A[76]*tmp;
    A[173] = A[173] - A[77]*tmp;
    A[174] = A[174] - A[78]*tmp;
    A[175] = A[175] - A[79]*tmp;
    tmp = A[180];
    A[181] = A[181] - A[69]*tmp;
    A[182] = A[182] - A[70]*tmp;
    A[183] = A[183] - A[71]*tmp;
    A[184] = A[184] - A[72]*tmp;
    A[185] = A[185] - A[73]*tmp;
    A[186] = A[186] - A[74]*tmp;
    A[187] = A[187] - A[75]*tmp;
    A[188] = A[188] - A[76]*tmp;
    A[189] = A[189] - A[77]*tmp;
    A[190] = A[190] - A[78]*tmp;
    A[191] = A[191] - A[79]*tmp;
    tmp = A[196];
    A[197] = A[197] - A[69]*tmp;
    A[198] = A[198] - A[70]*tmp;
    A[199] = A[199] - A[71]*tmp;
    A[200] = A[200] - A[72]*tmp;
    A[201] = A[201] - A[73]*tmp;
    A[202] = A[202] - A[74]*tmp;
    A[203] = A[203] - A[75]*tmp;
    A[204] = A[204] - A[76]*tmp;
    A[205] = A[205] - A[77]*tmp;
    A[206] = A[206] - A[78]*tmp;
    A[207] = A[207] - A[79]*tmp;
    tmp = A[212];
    A[213] = A[213] - A[69]*tmp;
    A[214] = A[214] - A[70]*tmp;
    A[215] = A[215] - A[71]*tmp;
    A[216] = A[216] - A[72]*tmp;
    A[217] = A[217] - A[73]*tmp;
    A[218] = A[218] - A[74]*tmp;
    A[219] = A[219] - A[75]*tmp;
    A[220] = A[220] - A[76]*tmp;
    A[221] = A[221] - A[77]*tmp;
    A[222] = A[222] - A[78]*tmp;
    A[223] = A[223] - A[79]*tmp;
    tmp = A[228];
    A[229] = A[229] - A[69]*tmp;
    A[230] = A[230] - A[70]*tmp;
    A[231] = A[231] - A[71]*tmp;
    A[232] = A[232] - A[72]*tmp;
    A[233] = A[233] - A[73]*tmp;
    A[234] = A[234] - A[74]*tmp;
    A[235] = A[235] - A[75]*tmp;
    A[236] = A[236] - A[76]*tmp;
    A[237] = A[237] - A[77]*tmp;
    A[238] = A[238] - A[78]*tmp;
    A[239] = A[239] - A[79]*tmp;
    tmp = A[244];
    A[245] = A[245] - A[69]*tmp;
    A[246] = A[246] - A[70]*tmp;
    A[247] = A[247] - A[71]*tmp;
    A[248] = A[248] - A[72]*tmp;
    A[249] = A[249] - A[73]*tmp;
    A[250] = A[250] - A[74]*tmp;
    A[251] = A[251] - A[75]*tmp;
    A[252] = A[252] - A[76]*tmp;
    A[253] = A[253] - A[77]*tmp;
    A[254] = A[254] - A[78]*tmp;
    A[255] = A[255] - A[79]*tmp;
    i_max = 5;
    a_max = abs(A[85]);
    if ( a_max < abs( A[86] ) ) { a_max = abs(A[86]); i_max = 6; }
    if ( a_max < abs( A[87] ) ) { a_max = abs(A[87]); i_max = 7; }
    if ( a_max < abs( A[88] ) ) { a_max = abs(A[88]); i_max = 8; }
    if ( a_max < abs( A[89] ) ) { a_max = abs(A[89]); i_max = 9; }
    if ( a_max < abs( A[90] ) ) { a_max = abs(A[90]); i_max = 10; }
    if ( a_max < abs( A[91] ) ) { a_max = abs(A[91]); i_max = 11; }
    if ( a_max < abs( A[92] ) ) { a_max = abs(A[92]); i_max = 12; }
    if ( a_max < abs( A[93] ) ) { a_max = abs(A[93]); i_max = 13; }
    if ( a_max < abs( A[94] ) ) { a_max = abs(A[94]); i_max = 14; }
    if ( a_max < abs( A[95] ) ) { a_max = abs(A[95]); i_max = 15; }
    std::swap( A[5], A[i_max+0] );
    std::swap( A[21], A[i_max+16] );
    std::swap( A[37], A[i_max+32] );
    std::swap( A[53], A[i_max+48] );
    std::swap( A[69], A[i_max+64] );
    std::swap( A[85], A[i_max+80] );
    std::swap( A[101], A[i_max+96] );
    std::swap( A[117], A[i_max+112] );
    std::swap( A[133], A[i_max+128] );
    std::swap( A[149], A[i_max+144] );
    std::swap( A[165], A[i_max+160] );
    std::swap( A[181], A[i_max+176] );
    std::swap( A[197], A[i_max+192] );
    std::swap( A[213], A[i_max+208] );
    std::swap( A[229], A[i_max+224] );
    std::swap( A[245], A[i_max+240] );
    P[5] = i_max + 1;
    tmp = A[85];
    A[86] = A[86] / tmp;
    A[87] = A[87] / tmp;
    A[88] = A[88] / tmp;
    A[89] = A[89] / tmp;
    A[90] = A[90] / tmp;
    A[91] = A[91] / tmp;
    A[92] = A[92] / tmp;
    A[93] = A[93] / tmp;
    A[94] = A[94] / tmp;
    A[95] = A[95] / tmp;
    tmp = A[101];
    A[102] = A[102] - A[86]*tmp;
    A[103] = A[103] - A[87]*tmp;
    A[104] = A[104] - A[88]*tmp;
    A[105] = A[105] - A[89]*tmp;
    A[106] = A[106] - A[90]*tmp;
    A[107] = A[107] - A[91]*tmp;
    A[108] = A[108] - A[92]*tmp;
    A[109] = A[109] - A[93]*tmp;
    A[110] = A[110] - A[94]*tmp;
    A[111] = A[111] - A[95]*tmp;
    tmp = A[117];
    A[118] = A[118] - A[86]*tmp;
    A[119] = A[119] - A[87]*tmp;
    A[120] = A[120] - A[88]*tmp;
    A[121] = A[121] - A[89]*tmp;
    A[122] = A[122] - A[90]*tmp;
    A[123] = A[123] - A[91]*tmp;
    A[124] = A[124] - A[92]*tmp;
    A[125] = A[125] - A[93]*tmp;
    A[126] = A[126] - A[94]*tmp;
    A[127] = A[127] - A[95]*tmp;
    tmp = A[133];
    A[134] = A[134] - A[86]*tmp;
    A[135] = A[135] - A[87]*tmp;
    A[136] = A[136] - A[88]*tmp;
    A[137] = A[137] - A[89]*tmp;
    A[138] = A[138] - A[90]*tmp;
    A[139] = A[139] - A[91]*tmp;
    A[140] = A[140] - A[92]*tmp;
    A[141] = A[141] - A[93]*tmp;
    A[142] = A[142] - A[94]*tmp;
    A[143] = A[143] - A[95]*tmp;
    tmp = A[149];
    A[150] = A[150] - A[86]*tmp;
    A[151] = A[151] - A[87]*tmp;
    A[152] = A[152] - A[88]*tmp;
    A[153] = A[153] - A[89]*tmp;
    A[154] = A[154] - A[90]*tmp;
    A[155] = A[155] - A[91]*tmp;
    A[156] = A[156] - A[92]*tmp;
    A[157] = A[157] - A[93]*tmp;
    A[158] = A[158] - A[94]*tmp;
    A[159] = A[159] - A[95]*tmp;
    tmp = A[165];
    A[166] = A[166] - A[86]*tmp;
    A[167] = A[167] - A[87]*tmp;
    A[168] = A[168] - A[88]*tmp;
    A[169] = A[169] - A[89]*tmp;
    A[170] = A[170] - A[90]*tmp;
    A[171] = A[171] - A[91]*tmp;
    A[172] = A[172] - A[92]*tmp;
    A[173] = A[173] - A[93]*tmp;
    A[174] = A[174] - A[94]*tmp;
    A[175] = A[175] - A[95]*tmp;
    tmp = A[181];
    A[182] = A[182] - A[86]*tmp;
    A[183] = A[183] - A[87]*tmp;
    A[184] = A[184] - A[88]*tmp;
    A[185] = A[185] - A[89]*tmp;
    A[186] = A[186] - A[90]*tmp;
    A[187] = A[187] - A[91]*tmp;
    A[188] = A[188] - A[92]*tmp;
    A[189] = A[189] - A[93]*tmp;
    A[190] = A[190] - A[94]*tmp;
    A[191] = A[191] - A[95]*tmp;
    tmp = A[197];
    A[198] = A[198] - A[86]*tmp;
    A[199] = A[199] - A[87]*tmp;
    A[200] = A[200] - A[88]*tmp;
    A[201] = A[201] - A[89]*tmp;
    A[202] = A[202] - A[90]*tmp;
    A[203] = A[203] - A[91]*tmp;
    A[204] = A[204] - A[92]*tmp;
    A[205] = A[205] - A[93]*tmp;
    A[206] = A[206] - A[94]*tmp;
    A[207] = A[207] - A[95]*tmp;
    tmp = A[213];
    A[214] = A[214] - A[86]*tmp;
    A[215] = A[215] - A[87]*tmp;
    A[216] = A[216] - A[88]*tmp;
    A[217] = A[217] - A[89]*tmp;
    A[218] = A[218] - A[90]*tmp;
    A[219] = A[219] - A[91]*tmp;
    A[220] = A[220] - A[92]*tmp;
    A[221] = A[221] - A[93]*tmp;
    A[222] = A[222] - A[94]*tmp;
    A[223] = A[223] - A[95]*tmp;
    tmp = A[229];
    A[230] = A[230] - A[86]*tmp;
    A[231] = A[231] - A[87]*tmp;
    A[232] = A[232] - A[88]*tmp;
    A[233] = A[233] - A[89]*tmp;
    A[234] = A[234] - A[90]*tmp;
    A[235] = A[235] - A[91]*tmp;
    A[236] = A[236] - A[92]*tmp;
    A[237] = A[237] - A[93]*tmp;
    A[238] = A[238] - A[94]*tmp;
    A[239] = A[239] - A[95]*tmp;
    tmp = A[245];
    A[246] = A[246] - A[86]*tmp;
    A[247] = A[247] - A[87]*tmp;
    A[248] = A[248] - A[88]*tmp;
    A[249] = A[249] - A[89]*tmp;
    A[250] = A[250] - A[90]*tmp;
    A[251] = A[251] - A[91]*tmp;
    A[252] = A[252] - A[92]*tmp;
    A[253] = A[253] - A[93]*tmp;
    A[254] = A[254] - A[94]*tmp;
    A[255] = A[255] - A[95]*tmp;
    i_max = 6;
    a_max = abs(A[102]);
    if ( a_max < abs( A[103] ) ) { a_max = abs(A[103]); i_max = 7; }
    if ( a_max < abs( A[104] ) ) { a_max = abs(A[104]); i_max = 8; }
    if ( a_max < abs( A[105] ) ) { a_max = abs(A[105]); i_max = 9; }
    if ( a_max < abs( A[106] ) ) { a_max = abs(A[106]); i_max = 10; }
    if ( a_max < abs( A[107] ) ) { a_max = abs(A[107]); i_max = 11; }
    if ( a_max < abs( A[108] ) ) { a_max = abs(A[108]); i_max = 12; }
    if ( a_max < abs( A[109] ) ) { a_max = abs(A[109]); i_max = 13; }
    if ( a_max < abs( A[110] ) ) { a_max = abs(A[110]); i_max = 14; }
    if ( a_max < abs( A[111] ) ) { a_max = abs(A[111]); i_max = 15; }
    std::swap( A[6], A[i_max+0] );
    std::swap( A[22], A[i_max+16] );
    std::swap( A[38], A[i_max+32] );
    std::swap( A[54], A[i_max+48] );
    std::swap( A[70], A[i_max+64] );
    std::swap( A[86], A[i_max+80] );
    std::swap( A[102], A[i_max+96] );
    std::swap( A[118], A[i_max+112] );
    std::swap( A[134], A[i_max+128] );
    std::swap( A[150], A[i_max+144] );
    std::swap( A[166], A[i_max+160] );
    std::swap( A[182], A[i_max+176] );
    std::swap( A[198], A[i_max+192] );
    std::swap( A[214], A[i_max+208] );
    std::swap( A[230], A[i_max+224] );
    std::swap( A[246], A[i_max+240] );
    P[6] = i_max + 1;
    tmp = A[102];
    A[103] = A[103] / tmp;
    A[104] = A[104] / tmp;
    A[105] = A[105] / tmp;
    A[106] = A[106] / tmp;
    A[107] = A[107] / tmp;
    A[108] = A[108] / tmp;
    A[109] = A[109] / tmp;
    A[110] = A[110] / tmp;
    A[111] = A[111] / tmp;
    tmp = A[118];
    A[119] = A[119] - A[103]*tmp;
    A[120] = A[120] - A[104]*tmp;
    A[121] = A[121] - A[105]*tmp;
    A[122] = A[122] - A[106]*tmp;
    A[123] = A[123] - A[107]*tmp;
    A[124] = A[124] - A[108]*tmp;
    A[125] = A[125] - A[109]*tmp;
    A[126] = A[126] - A[110]*tmp;
    A[127] = A[127] - A[111]*tmp;
    tmp = A[134];
    A[135] = A[135] - A[103]*tmp;
    A[136] = A[136] - A[104]*tmp;
    A[137] = A[137] - A[105]*tmp;
    A[138] = A[138] - A[106]*tmp;
    A[139] = A[139] - A[107]*tmp;
    A[140] = A[140] - A[108]*tmp;
    A[141] = A[141] - A[109]*tmp;
    A[142] = A[142] - A[110]*tmp;
    A[143] = A[143] - A[111]*tmp;
    tmp = A[150];
    A[151] = A[151] - A[103]*tmp;
    A[152] = A[152] - A[104]*tmp;
    A[153] = A[153] - A[105]*tmp;
    A[154] = A[154] - A[106]*tmp;
    A[155] = A[155] - A[107]*tmp;
    A[156] = A[156] - A[108]*tmp;
    A[157] = A[157] - A[109]*tmp;
    A[158] = A[158] - A[110]*tmp;
    A[159] = A[159] - A[111]*tmp;
    tmp = A[166];
    A[167] = A[167] - A[103]*tmp;
    A[168] = A[168] - A[104]*tmp;
    A[169] = A[169] - A[105]*tmp;
    A[170] = A[170] - A[106]*tmp;
    A[171] = A[171] - A[107]*tmp;
    A[172] = A[172] - A[108]*tmp;
    A[173] = A[173] - A[109]*tmp;
    A[174] = A[174] - A[110]*tmp;
    A[175] = A[175] - A[111]*tmp;
    tmp = A[182];
    A[183] = A[183] - A[103]*tmp;
    A[184] = A[184] - A[104]*tmp;
    A[185] = A[185] - A[105]*tmp;
    A[186] = A[186] - A[106]*tmp;
    A[187] = A[187] - A[107]*tmp;
    A[188] = A[188] - A[108]*tmp;
    A[189] = A[189] - A[109]*tmp;
    A[190] = A[190] - A[110]*tmp;
    A[191] = A[191] - A[111]*tmp;
    tmp = A[198];
    A[199] = A[199] - A[103]*tmp;
    A[200] = A[200] - A[104]*tmp;
    A[201] = A[201] - A[105]*tmp;
    A[202] = A[202] - A[106]*tmp;
    A[203] = A[203] - A[107]*tmp;
    A[204] = A[204] - A[108]*tmp;
    A[205] = A[205] - A[109]*tmp;
    A[206] = A[206] - A[110]*tmp;
    A[207] = A[207] - A[111]*tmp;
    tmp = A[214];
    A[215] = A[215] - A[103]*tmp;
    A[216] = A[216] - A[104]*tmp;
    A[217] = A[217] - A[105]*tmp;
    A[218] = A[218] - A[106]*tmp;
    A[219] = A[219] - A[107]*tmp;
    A[220] = A[220] - A[108]*tmp;
    A[221] = A[221] - A[109]*tmp;
    A[222] = A[222] - A[110]*tmp;
    A[223] = A[223] - A[111]*tmp;
    tmp = A[230];
    A[231] = A[231] - A[103]*tmp;
    A[232] = A[232] - A[104]*tmp;
    A[233] = A[233] - A[105]*tmp;
    A[234] = A[234] - A[106]*tmp;
    A[235] = A[235] - A[107]*tmp;
    A[236] = A[236] - A[108]*tmp;
    A[237] = A[237] - A[109]*tmp;
    A[238] = A[238] - A[110]*tmp;
    A[239] = A[239] - A[111]*tmp;
    tmp = A[246];
    A[247] = A[247] - A[103]*tmp;
    A[248] = A[248] - A[104]*tmp;
    A[249] = A[249] - A[105]*tmp;
    A[250] = A[250] - A[106]*tmp;
    A[251] = A[251] - A[107]*tmp;
    A[252] = A[252] - A[108]*tmp;
    A[253] = A[253] - A[109]*tmp;
    A[254] = A[254] - A[110]*tmp;
    A[255] = A[255] - A[111]*tmp;
    i_max = 7;
    a_max = abs(A[119]);
    if ( a_max < abs( A[120] ) ) { a_max = abs(A[120]); i_max = 8; }
    if ( a_max < abs( A[121] ) ) { a_max = abs(A[121]); i_max = 9; }
    if ( a_max < abs( A[122] ) ) { a_max = abs(A[122]); i_max = 10; }
    if ( a_max < abs( A[123] ) ) { a_max = abs(A[123]); i_max = 11; }
    if ( a_max < abs( A[124] ) ) { a_max = abs(A[124]); i_max = 12; }
    if ( a_max < abs( A[125] ) ) { a_max = abs(A[125]); i_max = 13; }
    if ( a_max < abs( A[126] ) ) { a_max = abs(A[126]); i_max = 14; }
    if ( a_max < abs( A[127] ) ) { a_max = abs(A[127]); i_max = 15; }
    std::swap( A[7], A[i_max+0] );
    std::swap( A[23], A[i_max+16] );
    std::swap( A[39], A[i_max+32] );
    std::swap( A[55], A[i_max+48] );
    std::swap( A[71], A[i_max+64] );
    std::swap( A[87], A[i_max+80] );
    std::swap( A[103], A[i_max+96] );
    std::swap( A[119], A[i_max+112] );
    std::swap( A[135], A[i_max+128] );
    std::swap( A[151], A[i_max+144] );
    std::swap( A[167], A[i_max+160] );
    std::swap( A[183], A[i_max+176] );
    std::swap( A[199], A[i_max+192] );
    std::swap( A[215], A[i_max+208] );
    std::swap( A[231], A[i_max+224] );
    std::swap( A[247], A[i_max+240] );
    P[7] = i_max + 1;
    tmp = A[119];
    A[120] = A[120] / tmp;
    A[121] = A[121] / tmp;
    A[122] = A[122] / tmp;
    A[123] = A[123] / tmp;
    A[124] = A[124] / tmp;
    A[125] = A[125] / tmp;
    A[126] = A[126] / tmp;
    A[127] = A[127] / tmp;
    tmp = A[135];
    A[136] = A[136] - A[120]*tmp;
    A[137] = A[137] - A[121]*tmp;
    A[138] = A[138] - A[122]*tmp;
    A[139] = A[139] - A[123]*tmp;
    A[140] = A[140] - A[124]*tmp;
    A[141] = A[141] - A[125]*tmp;
    A[142] = A[142] - A[126]*tmp;
    A[143] = A[143] - A[127]*tmp;
    tmp = A[151];
    A[152] = A[152] - A[120]*tmp;
    A[153] = A[153] - A[121]*tmp;
    A[154] = A[154] - A[122]*tmp;
    A[155] = A[155] - A[123]*tmp;
    A[156] = A[156] - A[124]*tmp;
    A[157] = A[157] - A[125]*tmp;
    A[158] = A[158] - A[126]*tmp;
    A[159] = A[159] - A[127]*tmp;
    tmp = A[167];
    A[168] = A[168] - A[120]*tmp;
    A[169] = A[169] - A[121]*tmp;
    A[170] = A[170] - A[122]*tmp;
    A[171] = A[171] - A[123]*tmp;
    A[172] = A[172] - A[124]*tmp;
    A[173] = A[173] - A[125]*tmp;
    A[174] = A[174] - A[126]*tmp;
    A[175] = A[175] - A[127]*tmp;
    tmp = A[183];
    A[184] = A[184] - A[120]*tmp;
    A[185] = A[185] - A[121]*tmp;
    A[186] = A[186] - A[122]*tmp;
    A[187] = A[187] - A[123]*tmp;
    A[188] = A[188] - A[124]*tmp;
    A[189] = A[189] - A[125]*tmp;
    A[190] = A[190] - A[126]*tmp;
    A[191] = A[191] - A[127]*tmp;
    tmp = A[199];
    A[200] = A[200] - A[120]*tmp;
    A[201] = A[201] - A[121]*tmp;
    A[202] = A[202] - A[122]*tmp;
    A[203] = A[203] - A[123]*tmp;
    A[204] = A[204] - A[124]*tmp;
    A[205] = A[205] - A[125]*tmp;
    A[206] = A[206] - A[126]*tmp;
    A[207] = A[207] - A[127]*tmp;
    tmp = A[215];
    A[216] = A[216] - A[120]*tmp;
    A[217] = A[217] - A[121]*tmp;
    A[218] = A[218] - A[122]*tmp;
    A[219] = A[219] - A[123]*tmp;
    A[220] = A[220] - A[124]*tmp;
    A[221] = A[221] - A[125]*tmp;
    A[222] = A[222] - A[126]*tmp;
    A[223] = A[223] - A[127]*tmp;
    tmp = A[231];
    A[232] = A[232] - A[120]*tmp;
    A[233] = A[233] - A[121]*tmp;
    A[234] = A[234] - A[122]*tmp;
    A[235] = A[235] - A[123]*tmp;
    A[236] = A[236] - A[124]*tmp;
    A[237] = A[237] - A[125]*tmp;
    A[238] = A[238] - A[126]*tmp;
    A[239] = A[239] - A[127]*tmp;
    tmp = A[247];
    A[248] = A[248] - A[120]*tmp;
    A[249] = A[249] - A[121]*tmp;
    A[250] = A[250] - A[122]*tmp;
    A[251] = A[251] - A[123]*tmp;
    A[252] = A[252] - A[124]*tmp;
    A[253] = A[253] - A[125]*tmp;
    A[254] = A[254] - A[126]*tmp;
    A[255] = A[255] - A[127]*tmp;
    i_max = 8;
    a_max = abs(A[136]);
    if ( a_max < abs( A[137] ) ) { a_max = abs(A[137]); i_max = 9; }
    if ( a_max < abs( A[138] ) ) { a_max = abs(A[138]); i_max = 10; }
    if ( a_max < abs( A[139] ) ) { a_max = abs(A[139]); i_max = 11; }
    if ( a_max < abs( A[140] ) ) { a_max = abs(A[140]); i_max = 12; }
    if ( a_max < abs( A[141] ) ) { a_max = abs(A[141]); i_max = 13; }
    if ( a_max < abs( A[142] ) ) { a_max = abs(A[142]); i_max = 14; }
    if ( a_max < abs( A[143] ) ) { a_max = abs(A[143]); i_max = 15; }
    std::swap( A[8], A[i_max+0] );
    std::swap( A[24], A[i_max+16] );
    std::swap( A[40], A[i_max+32] );
    std::swap( A[56], A[i_max+48] );
    std::swap( A[72], A[i_max+64] );
    std::swap( A[88], A[i_max+80] );
    std::swap( A[104], A[i_max+96] );
    std::swap( A[120], A[i_max+112] );
    std::swap( A[136], A[i_max+128] );
    std::swap( A[152], A[i_max+144] );
    std::swap( A[168], A[i_max+160] );
    std::swap( A[184], A[i_max+176] );
    std::swap( A[200], A[i_max+192] );
    std::swap( A[216], A[i_max+208] );
    std::swap( A[232], A[i_max+224] );
    std::swap( A[248], A[i_max+240] );
    P[8] = i_max + 1;
    tmp = A[136];
    A[137] = A[137] / tmp;
    A[138] = A[138] / tmp;
    A[139] = A[139] / tmp;
    A[140] = A[140] / tmp;
    A[141] = A[141] / tmp;
    A[142] = A[142] / tmp;
    A[143] = A[143] / tmp;
    tmp = A[152];
    A[153] = A[153] - A[137]*tmp;
    A[154] = A[154] - A[138]*tmp;
    A[155] = A[155] - A[139]*tmp;
    A[156] = A[156] - A[140]*tmp;
    A[157] = A[157] - A[141]*tmp;
    A[158] = A[158] - A[142]*tmp;
    A[159] = A[159] - A[143]*tmp;
    tmp = A[168];
    A[169] = A[169] - A[137]*tmp;
    A[170] = A[170] - A[138]*tmp;
    A[171] = A[171] - A[139]*tmp;
    A[172] = A[172] - A[140]*tmp;
    A[173] = A[173] - A[141]*tmp;
    A[174] = A[174] - A[142]*tmp;
    A[175] = A[175] - A[143]*tmp;
    tmp = A[184];
    A[185] = A[185] - A[137]*tmp;
    A[186] = A[186] - A[138]*tmp;
    A[187] = A[187] - A[139]*tmp;
    A[188] = A[188] - A[140]*tmp;
    A[189] = A[189] - A[141]*tmp;
    A[190] = A[190] - A[142]*tmp;
    A[191] = A[191] - A[143]*tmp;
    tmp = A[200];
    A[201] = A[201] - A[137]*tmp;
    A[202] = A[202] - A[138]*tmp;
    A[203] = A[203] - A[139]*tmp;
    A[204] = A[204] - A[140]*tmp;
    A[205] = A[205] - A[141]*tmp;
    A[206] = A[206] - A[142]*tmp;
    A[207] = A[207] - A[143]*tmp;
    tmp = A[216];
    A[217] = A[217] - A[137]*tmp;
    A[218] = A[218] - A[138]*tmp;
    A[219] = A[219] - A[139]*tmp;
    A[220] = A[220] - A[140]*tmp;
    A[221] = A[221] - A[141]*tmp;
    A[222] = A[222] - A[142]*tmp;
    A[223] = A[223] - A[143]*tmp;
    tmp = A[232];
    A[233] = A[233] - A[137]*tmp;
    A[234] = A[234] - A[138]*tmp;
    A[235] = A[235] - A[139]*tmp;
    A[236] = A[236] - A[140]*tmp;
    A[237] = A[237] - A[141]*tmp;
    A[238] = A[238] - A[142]*tmp;
    A[239] = A[239] - A[143]*tmp;
    tmp = A[248];
    A[249] = A[249] - A[137]*tmp;
    A[250] = A[250] - A[138]*tmp;
    A[251] = A[251] - A[139]*tmp;
    A[252] = A[252] - A[140]*tmp;
    A[253] = A[253] - A[141]*tmp;
    A[254] = A[254] - A[142]*tmp;
    A[255] = A[255] - A[143]*tmp;
    i_max = 9;
    a_max = abs(A[153]);
    if ( a_max < abs( A[154] ) ) { a_max = abs(A[154]); i_max = 10; }
    if ( a_max < abs( A[155] ) ) { a_max = abs(A[155]); i_max = 11; }
    if ( a_max < abs( A[156] ) ) { a_max = abs(A[156]); i_max = 12; }
    if ( a_max < abs( A[157] ) ) { a_max = abs(A[157]); i_max = 13; }
    if ( a_max < abs( A[158] ) ) { a_max = abs(A[158]); i_max = 14; }
    if ( a_max < abs( A[159] ) ) { a_max = abs(A[159]); i_max = 15; }
    std::swap( A[9], A[i_max+0] );
    std::swap( A[25], A[i_max+16] );
    std::swap( A[41], A[i_max+32] );
    std::swap( A[57], A[i_max+48] );
    std::swap( A[73], A[i_max+64] );
    std::swap( A[89], A[i_max+80] );
    std::swap( A[105], A[i_max+96] );
    std::swap( A[121], A[i_max+112] );
    std::swap( A[137], A[i_max+128] );
    std::swap( A[153], A[i_max+144] );
    std::swap( A[169], A[i_max+160] );
    std::swap( A[185], A[i_max+176] );
    std::swap( A[201], A[i_max+192] );
    std::swap( A[217], A[i_max+208] );
    std::swap( A[233], A[i_max+224] );
    std::swap( A[249], A[i_max+240] );
    P[9] = i_max + 1;
    tmp = A[153];
    A[154] = A[154] / tmp;
    A[155] = A[155] / tmp;
    A[156] = A[156] / tmp;
    A[157] = A[157] / tmp;
    A[158] = A[158] / tmp;
    A[159] = A[159] / tmp;
    tmp = A[169];
    A[170] = A[170] - A[154]*tmp;
    A[171] = A[171] - A[155]*tmp;
    A[172] = A[172] - A[156]*tmp;
    A[173] = A[173] - A[157]*tmp;
    A[174] = A[174] - A[158]*tmp;
    A[175] = A[175] - A[159]*tmp;
    tmp = A[185];
    A[186] = A[186] - A[154]*tmp;
    A[187] = A[187] - A[155]*tmp;
    A[188] = A[188] - A[156]*tmp;
    A[189] = A[189] - A[157]*tmp;
    A[190] = A[190] - A[158]*tmp;
    A[191] = A[191] - A[159]*tmp;
    tmp = A[201];
    A[202] = A[202] - A[154]*tmp;
    A[203] = A[203] - A[155]*tmp;
    A[204] = A[204] - A[156]*tmp;
    A[205] = A[205] - A[157]*tmp;
    A[206] = A[206] - A[158]*tmp;
    A[207] = A[207] - A[159]*tmp;
    tmp = A[217];
    A[218] = A[218] - A[154]*tmp;
    A[219] = A[219] - A[155]*tmp;
    A[220] = A[220] - A[156]*tmp;
    A[221] = A[221] - A[157]*tmp;
    A[222] = A[222] - A[158]*tmp;
    A[223] = A[223] - A[159]*tmp;
    tmp = A[233];
    A[234] = A[234] - A[154]*tmp;
    A[235] = A[235] - A[155]*tmp;
    A[236] = A[236] - A[156]*tmp;
    A[237] = A[237] - A[157]*tmp;
    A[238] = A[238] - A[158]*tmp;
    A[239] = A[239] - A[159]*tmp;
    tmp = A[249];
    A[250] = A[250] - A[154]*tmp;
    A[251] = A[251] - A[155]*tmp;
    A[252] = A[252] - A[156]*tmp;
    A[253] = A[253] - A[157]*tmp;
    A[254] = A[254] - A[158]*tmp;
    A[255] = A[255] - A[159]*tmp;
    i_max = 10;
    a_max = abs(A[170]);
    if ( a_max < abs( A[171] ) ) { a_max = abs(A[171]); i_max = 11; }
    if ( a_max < abs( A[172] ) ) { a_max = abs(A[172]); i_max = 12; }
    if ( a_max < abs( A[173] ) ) { a_max = abs(A[173]); i_max = 13; }
    if ( a_max < abs( A[174] ) ) { a_max = abs(A[174]); i_max = 14; }
    if ( a_max < abs( A[175] ) ) { a_max = abs(A[175]); i_max = 15; }
    std::swap( A[10], A[i_max+0] );
    std::swap( A[26], A[i_max+16] );
    std::swap( A[42], A[i_max+32] );
    std::swap( A[58], A[i_max+48] );
    std::swap( A[74], A[i_max+64] );
    std::swap( A[90], A[i_max+80] );
    std::swap( A[106], A[i_max+96] );
    std::swap( A[122], A[i_max+112] );
    std::swap( A[138], A[i_max+128] );
    std::swap( A[154], A[i_max+144] );
    std::swap( A[170], A[i_max+160] );
    std::swap( A[186], A[i_max+176] );
    std::swap( A[202], A[i_max+192] );
    std::swap( A[218], A[i_max+208] );
    std::swap( A[234], A[i_max+224] );
    std::swap( A[250], A[i_max+240] );
    P[10] = i_max + 1;
    tmp = A[170];
    A[171] = A[171] / tmp;
    A[172] = A[172] / tmp;
    A[173] = A[173] / tmp;
    A[174] = A[174] / tmp;
    A[175] = A[175] / tmp;
    tmp = A[186];
    A[187] = A[187] - A[171]*tmp;
    A[188] = A[188] - A[172]*tmp;
    A[189] = A[189] - A[173]*tmp;
    A[190] = A[190] - A[174]*tmp;
    A[191] = A[191] - A[175]*tmp;
    tmp = A[202];
    A[203] = A[203] - A[171]*tmp;
    A[204] = A[204] - A[172]*tmp;
    A[205] = A[205] - A[173]*tmp;
    A[206] = A[206] - A[174]*tmp;
    A[207] = A[207] - A[175]*tmp;
    tmp = A[218];
    A[219] = A[219] - A[171]*tmp;
    A[220] = A[220] - A[172]*tmp;
    A[221] = A[221] - A[173]*tmp;
    A[222] = A[222] - A[174]*tmp;
    A[223] = A[223] - A[175]*tmp;
    tmp = A[234];
    A[235] = A[235] - A[171]*tmp;
    A[236] = A[236] - A[172]*tmp;
    A[237] = A[237] - A[173]*tmp;
    A[238] = A[238] - A[174]*tmp;
    A[239] = A[239] - A[175]*tmp;
    tmp = A[250];
    A[251] = A[251] - A[171]*tmp;
    A[252] = A[252] - A[172]*tmp;
    A[253] = A[253] - A[173]*tmp;
    A[254] = A[254] - A[174]*tmp;
    A[255] = A[255] - A[175]*tmp;
    i_max = 11;
    a_max = abs(A[187]);
    if ( a_max < abs( A[188] ) ) { a_max = abs(A[188]); i_max = 12; }
    if ( a_max < abs( A[189] ) ) { a_max = abs(A[189]); i_max = 13; }
    if ( a_max < abs( A[190] ) ) { a_max = abs(A[190]); i_max = 14; }
    if ( a_max < abs( A[191] ) ) { a_max = abs(A[191]); i_max = 15; }
    std::swap( A[11], A[i_max+0] );
    std::swap( A[27], A[i_max+16] );
    std::swap( A[43], A[i_max+32] );
    std::swap( A[59], A[i_max+48] );
    std::swap( A[75], A[i_max+64] );
    std::swap( A[91], A[i_max+80] );
    std::swap( A[107], A[i_max+96] );
    std::swap( A[123], A[i_max+112] );
    std::swap( A[139], A[i_max+128] );
    std::swap( A[155], A[i_max+144] );
    std::swap( A[171], A[i_max+160] );
    std::swap( A[187], A[i_max+176] );
    std::swap( A[203], A[i_max+192] );
    std::swap( A[219], A[i_max+208] );
    std::swap( A[235], A[i_max+224] );
    std::swap( A[251], A[i_max+240] );
    P[11] = i_max + 1;
    tmp = A[187];
    A[188] = A[188] / tmp;
    A[189] = A[189] / tmp;
    A[190] = A[190] / tmp;
    A[191] = A[191] / tmp;
    tmp = A[203];
    A[204] = A[204] - A[188]*tmp;
    A[205] = A[205] - A[189]*tmp;
    A[206] = A[206] - A[190]*tmp;
    A[207] = A[207] - A[191]*tmp;
    tmp = A[219];
    A[220] = A[220] - A[188]*tmp;
    A[221] = A[221] - A[189]*tmp;
    A[222] = A[222] - A[190]*tmp;
    A[223] = A[223] - A[191]*tmp;
    tmp = A[235];
    A[236] = A[236] - A[188]*tmp;
    A[237] = A[237] - A[189]*tmp;
    A[238] = A[238] - A[190]*tmp;
    A[239] = A[239] - A[191]*tmp;
    tmp = A[251];
    A[252] = A[252] - A[188]*tmp;
    A[253] = A[253] - A[189]*tmp;
    A[254] = A[254] - A[190]*tmp;
    A[255] = A[255] - A[191]*tmp;
    i_max = 12;
    a_max = abs(A[204]);
    if ( a_max < abs( A[205] ) ) { a_max = abs(A[205]); i_max = 13; }
    if ( a_max < abs( A[206] ) ) { a_max = abs(A[206]); i_max = 14; }
    if ( a_max < abs( A[207] ) ) { a_max = abs(A[207]); i_max = 15; }
    std::swap( A[12], A[i_max+0] );
    std::swap( A[28], A[i_max+16] );
    std::swap( A[44], A[i_max+32] );
    std::swap( A[60], A[i_max+48] );
    std::swap( A[76], A[i_max+64] );
    std::swap( A[92], A[i_max+80] );
    std::swap( A[108], A[i_max+96] );
    std::swap( A[124], A[i_max+112] );
    std::swap( A[140], A[i_max+128] );
    std::swap( A[156], A[i_max+144] );
    std::swap( A[172], A[i_max+160] );
    std::swap( A[188], A[i_max+176] );
    std::swap( A[204], A[i_max+192] );
    std::swap( A[220], A[i_max+208] );
    std::swap( A[236], A[i_max+224] );
    std::swap( A[252], A[i_max+240] );
    P[12] = i_max + 1;
    tmp = A[204];
    A[205] = A[205] / tmp;
    A[206] = A[206] / tmp;
    A[207] = A[207] / tmp;
    tmp = A[220];
    A[221] = A[221] - A[205]*tmp;
    A[222] = A[222] - A[206]*tmp;
    A[223] = A[223] - A[207]*tmp;
    tmp = A[236];
    A[237] = A[237] - A[205]*tmp;
    A[238] = A[238] - A[206]*tmp;
    A[239] = A[239] - A[207]*tmp;
    tmp = A[252];
    A[253] = A[253] - A[205]*tmp;
    A[254] = A[254] - A[206]*tmp;
    A[255] = A[255] - A[207]*tmp;
    i_max = 13;
    a_max = abs(A[221]);
    if ( a_max < abs( A[222] ) ) { a_max = abs(A[222]); i_max = 14; }
    if ( a_max < abs( A[223] ) ) { a_max = abs(A[223]); i_max = 15; }
    std::swap( A[13], A[i_max+0] );
    std::swap( A[29], A[i_max+16] );
    std::swap( A[45], A[i_max+32] );
    std::swap( A[61], A[i_max+48] );
    std::swap( A[77], A[i_max+64] );
    std::swap( A[93], A[i_max+80] );
    std::swap( A[109], A[i_max+96] );
    std::swap( A[125], A[i_max+112] );
    std::swap( A[141], A[i_max+128] );
    std::swap( A[157], A[i_max+144] );
    std::swap( A[173], A[i_max+160] );
    std::swap( A[189], A[i_max+176] );
    std::swap( A[205], A[i_max+192] );
    std::swap( A[221], A[i_max+208] );
    std::swap( A[237], A[i_max+224] );
    std::swap( A[253], A[i_max+240] );
    P[13] = i_max + 1;
    tmp = A[221];
    A[222] = A[222] / tmp;
    A[223] = A[223] / tmp;
    tmp = A[237];
    A[238] = A[238] - A[222]*tmp;
    A[239] = A[239] - A[223]*tmp;
    tmp = A[253];
    A[254] = A[254] - A[222]*tmp;
    A[255] = A[255] - A[223]*tmp;
    i_max = 14;
    a_max = abs(A[238]);
    if ( a_max < abs( A[239] ) ) { a_max = abs(A[239]); i_max = 15; }
    std::swap( A[14], A[i_max+0] );
    std::swap( A[30], A[i_max+16] );
    std::swap( A[46], A[i_max+32] );
    std::swap( A[62], A[i_max+48] );
    std::swap( A[78], A[i_max+64] );
    std::swap( A[94], A[i_max+80] );
    std::swap( A[110], A[i_max+96] );
    std::swap( A[126], A[i_max+112] );
    std::swap( A[142], A[i_max+128] );
    std::swap( A[158], A[i_max+144] );
    std::swap( A[174], A[i_max+160] );
    std::swap( A[190], A[i_max+176] );
    std::swap( A[206], A[i_max+192] );
    std::swap( A[222], A[i_max+208] );
    std::swap( A[238], A[i_max+224] );
    std::swap( A[254], A[i_max+240] );
    P[14] = i_max + 1;
    tmp = A[238];
    A[239] = A[239] / tmp;
    tmp = A[254];
    A[255] = A[255] - A[239]*tmp;
    P[15] = 16;
}

void lu_solve_1 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    std::swap( b[0], b[P[0]-1] );
    b[0] = b[0] / LU[0];
}

void lu_solve_2 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[1] = b[1] / LU[3];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[2];
    b[0] = b[0] / LU[0];
}

void lu_solve_3 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[5];
    b[2] = b[2] / LU[8];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[6];
    b[1] = b[1] - tmp*LU[7];
    b[1] = b[1] / LU[4];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[3];
    b[0] = b[0] / LU[0];
}

void lu_solve_4 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[6];
    b[3] = b[3] - tmp*LU[7];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[11];
    b[3] = b[3] / LU[15];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[12];
    b[1] = b[1] - tmp*LU[13];
    b[2] = b[2] - tmp*LU[14];
    b[2] = b[2] / LU[10];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[8];
    b[1] = b[1] - tmp*LU[9];
    b[1] = b[1] / LU[5];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[4];
    b[0] = b[0] / LU[0];
}

void lu_solve_5 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[7];
    b[3] = b[3] - tmp*LU[8];
    b[4] = b[4] - tmp*LU[9];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[13];
    b[4] = b[4] - tmp*LU[14];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[19];
    b[4] = b[4] / LU[24];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[20];
    b[1] = b[1] - tmp*LU[21];
    b[2] = b[2] - tmp*LU[22];
    b[3] = b[3] - tmp*LU[23];
    b[3] = b[3] / LU[18];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[15];
    b[1] = b[1] - tmp*LU[16];
    b[2] = b[2] - tmp*LU[17];
    b[2] = b[2] / LU[12];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[10];
    b[1] = b[1] - tmp*LU[11];
    b[1] = b[1] / LU[6];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[5];
    b[0] = b[0] / LU[0];
}

void lu_solve_6 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[8];
    b[3] = b[3] - tmp*LU[9];
    b[4] = b[4] - tmp*LU[10];
    b[5] = b[5] - tmp*LU[11];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[15];
    b[4] = b[4] - tmp*LU[16];
    b[5] = b[5] - tmp*LU[17];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[22];
    b[5] = b[5] - tmp*LU[23];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[29];
    b[5] = b[5] / LU[35];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[30];
    b[1] = b[1] - tmp*LU[31];
    b[2] = b[2] - tmp*LU[32];
    b[3] = b[3] - tmp*LU[33];
    b[4] = b[4] - tmp*LU[34];
    b[4] = b[4] / LU[28];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[24];
    b[1] = b[1] - tmp*LU[25];
    b[2] = b[2] - tmp*LU[26];
    b[3] = b[3] - tmp*LU[27];
    b[3] = b[3] / LU[21];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[18];
    b[1] = b[1] - tmp*LU[19];
    b[2] = b[2] - tmp*LU[20];
    b[2] = b[2] / LU[14];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[12];
    b[1] = b[1] - tmp*LU[13];
    b[1] = b[1] / LU[7];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[6];
    b[0] = b[0] / LU[0];
}

void lu_solve_7 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[9];
    b[3] = b[3] - tmp*LU[10];
    b[4] = b[4] - tmp*LU[11];
    b[5] = b[5] - tmp*LU[12];
    b[6] = b[6] - tmp*LU[13];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[17];
    b[4] = b[4] - tmp*LU[18];
    b[5] = b[5] - tmp*LU[19];
    b[6] = b[6] - tmp*LU[20];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[25];
    b[5] = b[5] - tmp*LU[26];
    b[6] = b[6] - tmp*LU[27];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[33];
    b[6] = b[6] - tmp*LU[34];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[41];
    b[6] = b[6] / LU[48];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[42];
    b[1] = b[1] - tmp*LU[43];
    b[2] = b[2] - tmp*LU[44];
    b[3] = b[3] - tmp*LU[45];
    b[4] = b[4] - tmp*LU[46];
    b[5] = b[5] - tmp*LU[47];
    b[5] = b[5] / LU[40];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[35];
    b[1] = b[1] - tmp*LU[36];
    b[2] = b[2] - tmp*LU[37];
    b[3] = b[3] - tmp*LU[38];
    b[4] = b[4] - tmp*LU[39];
    b[4] = b[4] / LU[32];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[28];
    b[1] = b[1] - tmp*LU[29];
    b[2] = b[2] - tmp*LU[30];
    b[3] = b[3] - tmp*LU[31];
    b[3] = b[3] / LU[24];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[21];
    b[1] = b[1] - tmp*LU[22];
    b[2] = b[2] - tmp*LU[23];
    b[2] = b[2] / LU[16];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[14];
    b[1] = b[1] - tmp*LU[15];
    b[1] = b[1] / LU[8];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[7];
    b[0] = b[0] / LU[0];
}

void lu_solve_8 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[10];
    b[3] = b[3] - tmp*LU[11];
    b[4] = b[4] - tmp*LU[12];
    b[5] = b[5] - tmp*LU[13];
    b[6] = b[6] - tmp*LU[14];
    b[7] = b[7] - tmp*LU[15];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[19];
    b[4] = b[4] - tmp*LU[20];
    b[5] = b[5] - tmp*LU[21];
    b[6] = b[6] - tmp*LU[22];
    b[7] = b[7] - tmp*LU[23];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[28];
    b[5] = b[5] - tmp*LU[29];
    b[6] = b[6] - tmp*LU[30];
    b[7] = b[7] - tmp*LU[31];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[37];
    b[6] = b[6] - tmp*LU[38];
    b[7] = b[7] - tmp*LU[39];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[46];
    b[7] = b[7] - tmp*LU[47];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[55];
    b[7] = b[7] / LU[63];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[56];
    b[1] = b[1] - tmp*LU[57];
    b[2] = b[2] - tmp*LU[58];
    b[3] = b[3] - tmp*LU[59];
    b[4] = b[4] - tmp*LU[60];
    b[5] = b[5] - tmp*LU[61];
    b[6] = b[6] - tmp*LU[62];
    b[6] = b[6] / LU[54];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[48];
    b[1] = b[1] - tmp*LU[49];
    b[2] = b[2] - tmp*LU[50];
    b[3] = b[3] - tmp*LU[51];
    b[4] = b[4] - tmp*LU[52];
    b[5] = b[5] - tmp*LU[53];
    b[5] = b[5] / LU[45];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[40];
    b[1] = b[1] - tmp*LU[41];
    b[2] = b[2] - tmp*LU[42];
    b[3] = b[3] - tmp*LU[43];
    b[4] = b[4] - tmp*LU[44];
    b[4] = b[4] / LU[36];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[32];
    b[1] = b[1] - tmp*LU[33];
    b[2] = b[2] - tmp*LU[34];
    b[3] = b[3] - tmp*LU[35];
    b[3] = b[3] / LU[27];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[24];
    b[1] = b[1] - tmp*LU[25];
    b[2] = b[2] - tmp*LU[26];
    b[2] = b[2] / LU[18];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[16];
    b[1] = b[1] - tmp*LU[17];
    b[1] = b[1] / LU[9];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[8];
    b[0] = b[0] / LU[0];
}

void lu_solve_9 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[11];
    b[3] = b[3] - tmp*LU[12];
    b[4] = b[4] - tmp*LU[13];
    b[5] = b[5] - tmp*LU[14];
    b[6] = b[6] - tmp*LU[15];
    b[7] = b[7] - tmp*LU[16];
    b[8] = b[8] - tmp*LU[17];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[21];
    b[4] = b[4] - tmp*LU[22];
    b[5] = b[5] - tmp*LU[23];
    b[6] = b[6] - tmp*LU[24];
    b[7] = b[7] - tmp*LU[25];
    b[8] = b[8] - tmp*LU[26];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[31];
    b[5] = b[5] - tmp*LU[32];
    b[6] = b[6] - tmp*LU[33];
    b[7] = b[7] - tmp*LU[34];
    b[8] = b[8] - tmp*LU[35];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[41];
    b[6] = b[6] - tmp*LU[42];
    b[7] = b[7] - tmp*LU[43];
    b[8] = b[8] - tmp*LU[44];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[51];
    b[7] = b[7] - tmp*LU[52];
    b[8] = b[8] - tmp*LU[53];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[61];
    b[8] = b[8] - tmp*LU[62];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[71];
    b[8] = b[8] / LU[80];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[72];
    b[1] = b[1] - tmp*LU[73];
    b[2] = b[2] - tmp*LU[74];
    b[3] = b[3] - tmp*LU[75];
    b[4] = b[4] - tmp*LU[76];
    b[5] = b[5] - tmp*LU[77];
    b[6] = b[6] - tmp*LU[78];
    b[7] = b[7] - tmp*LU[79];
    b[7] = b[7] / LU[70];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[63];
    b[1] = b[1] - tmp*LU[64];
    b[2] = b[2] - tmp*LU[65];
    b[3] = b[3] - tmp*LU[66];
    b[4] = b[4] - tmp*LU[67];
    b[5] = b[5] - tmp*LU[68];
    b[6] = b[6] - tmp*LU[69];
    b[6] = b[6] / LU[60];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[54];
    b[1] = b[1] - tmp*LU[55];
    b[2] = b[2] - tmp*LU[56];
    b[3] = b[3] - tmp*LU[57];
    b[4] = b[4] - tmp*LU[58];
    b[5] = b[5] - tmp*LU[59];
    b[5] = b[5] / LU[50];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[45];
    b[1] = b[1] - tmp*LU[46];
    b[2] = b[2] - tmp*LU[47];
    b[3] = b[3] - tmp*LU[48];
    b[4] = b[4] - tmp*LU[49];
    b[4] = b[4] / LU[40];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[36];
    b[1] = b[1] - tmp*LU[37];
    b[2] = b[2] - tmp*LU[38];
    b[3] = b[3] - tmp*LU[39];
    b[3] = b[3] / LU[30];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[27];
    b[1] = b[1] - tmp*LU[28];
    b[2] = b[2] - tmp*LU[29];
    b[2] = b[2] / LU[20];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[18];
    b[1] = b[1] - tmp*LU[19];
    b[1] = b[1] / LU[10];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[9];
    b[0] = b[0] / LU[0];
}

void lu_solve_10( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[12];
    b[3] = b[3] - tmp*LU[13];
    b[4] = b[4] - tmp*LU[14];
    b[5] = b[5] - tmp*LU[15];
    b[6] = b[6] - tmp*LU[16];
    b[7] = b[7] - tmp*LU[17];
    b[8] = b[8] - tmp*LU[18];
    b[9] = b[9] - tmp*LU[19];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[23];
    b[4] = b[4] - tmp*LU[24];
    b[5] = b[5] - tmp*LU[25];
    b[6] = b[6] - tmp*LU[26];
    b[7] = b[7] - tmp*LU[27];
    b[8] = b[8] - tmp*LU[28];
    b[9] = b[9] - tmp*LU[29];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[34];
    b[5] = b[5] - tmp*LU[35];
    b[6] = b[6] - tmp*LU[36];
    b[7] = b[7] - tmp*LU[37];
    b[8] = b[8] - tmp*LU[38];
    b[9] = b[9] - tmp*LU[39];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[45];
    b[6] = b[6] - tmp*LU[46];
    b[7] = b[7] - tmp*LU[47];
    b[8] = b[8] - tmp*LU[48];
    b[9] = b[9] - tmp*LU[49];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[56];
    b[7] = b[7] - tmp*LU[57];
    b[8] = b[8] - tmp*LU[58];
    b[9] = b[9] - tmp*LU[59];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[67];
    b[8] = b[8] - tmp*LU[68];
    b[9] = b[9] - tmp*LU[69];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[78];
    b[9] = b[9] - tmp*LU[79];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[89];
    b[9] = b[9] / LU[99];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[90];
    b[1] = b[1] - tmp*LU[91];
    b[2] = b[2] - tmp*LU[92];
    b[3] = b[3] - tmp*LU[93];
    b[4] = b[4] - tmp*LU[94];
    b[5] = b[5] - tmp*LU[95];
    b[6] = b[6] - tmp*LU[96];
    b[7] = b[7] - tmp*LU[97];
    b[8] = b[8] - tmp*LU[98];
    b[8] = b[8] / LU[88];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[80];
    b[1] = b[1] - tmp*LU[81];
    b[2] = b[2] - tmp*LU[82];
    b[3] = b[3] - tmp*LU[83];
    b[4] = b[4] - tmp*LU[84];
    b[5] = b[5] - tmp*LU[85];
    b[6] = b[6] - tmp*LU[86];
    b[7] = b[7] - tmp*LU[87];
    b[7] = b[7] / LU[77];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[70];
    b[1] = b[1] - tmp*LU[71];
    b[2] = b[2] - tmp*LU[72];
    b[3] = b[3] - tmp*LU[73];
    b[4] = b[4] - tmp*LU[74];
    b[5] = b[5] - tmp*LU[75];
    b[6] = b[6] - tmp*LU[76];
    b[6] = b[6] / LU[66];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[60];
    b[1] = b[1] - tmp*LU[61];
    b[2] = b[2] - tmp*LU[62];
    b[3] = b[3] - tmp*LU[63];
    b[4] = b[4] - tmp*LU[64];
    b[5] = b[5] - tmp*LU[65];
    b[5] = b[5] / LU[55];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[50];
    b[1] = b[1] - tmp*LU[51];
    b[2] = b[2] - tmp*LU[52];
    b[3] = b[3] - tmp*LU[53];
    b[4] = b[4] - tmp*LU[54];
    b[4] = b[4] / LU[44];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[40];
    b[1] = b[1] - tmp*LU[41];
    b[2] = b[2] - tmp*LU[42];
    b[3] = b[3] - tmp*LU[43];
    b[3] = b[3] / LU[33];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[30];
    b[1] = b[1] - tmp*LU[31];
    b[2] = b[2] - tmp*LU[32];
    b[2] = b[2] / LU[22];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[20];
    b[1] = b[1] - tmp*LU[21];
    b[1] = b[1] / LU[11];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[10];
    b[0] = b[0] / LU[0];
}

void lu_solve_11( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[13];
    b[3] = b[3] - tmp*LU[14];
    b[4] = b[4] - tmp*LU[15];
    b[5] = b[5] - tmp*LU[16];
    b[6] = b[6] - tmp*LU[17];
    b[7] = b[7] - tmp*LU[18];
    b[8] = b[8] - tmp*LU[19];
    b[9] = b[9] - tmp*LU[20];
    b[10] = b[10] - tmp*LU[21];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[25];
    b[4] = b[4] - tmp*LU[26];
    b[5] = b[5] - tmp*LU[27];
    b[6] = b[6] - tmp*LU[28];
    b[7] = b[7] - tmp*LU[29];
    b[8] = b[8] - tmp*LU[30];
    b[9] = b[9] - tmp*LU[31];
    b[10] = b[10] - tmp*LU[32];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[37];
    b[5] = b[5] - tmp*LU[38];
    b[6] = b[6] - tmp*LU[39];
    b[7] = b[7] - tmp*LU[40];
    b[8] = b[8] - tmp*LU[41];
    b[9] = b[9] - tmp*LU[42];
    b[10] = b[10] - tmp*LU[43];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[49];
    b[6] = b[6] - tmp*LU[50];
    b[7] = b[7] - tmp*LU[51];
    b[8] = b[8] - tmp*LU[52];
    b[9] = b[9] - tmp*LU[53];
    b[10] = b[10] - tmp*LU[54];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[61];
    b[7] = b[7] - tmp*LU[62];
    b[8] = b[8] - tmp*LU[63];
    b[9] = b[9] - tmp*LU[64];
    b[10] = b[10] - tmp*LU[65];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[73];
    b[8] = b[8] - tmp*LU[74];
    b[9] = b[9] - tmp*LU[75];
    b[10] = b[10] - tmp*LU[76];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[85];
    b[9] = b[9] - tmp*LU[86];
    b[10] = b[10] - tmp*LU[87];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[97];
    b[10] = b[10] - tmp*LU[98];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[109];
    b[10] = b[10] / LU[120];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[110];
    b[1] = b[1] - tmp*LU[111];
    b[2] = b[2] - tmp*LU[112];
    b[3] = b[3] - tmp*LU[113];
    b[4] = b[4] - tmp*LU[114];
    b[5] = b[5] - tmp*LU[115];
    b[6] = b[6] - tmp*LU[116];
    b[7] = b[7] - tmp*LU[117];
    b[8] = b[8] - tmp*LU[118];
    b[9] = b[9] - tmp*LU[119];
    b[9] = b[9] / LU[108];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[99];
    b[1] = b[1] - tmp*LU[100];
    b[2] = b[2] - tmp*LU[101];
    b[3] = b[3] - tmp*LU[102];
    b[4] = b[4] - tmp*LU[103];
    b[5] = b[5] - tmp*LU[104];
    b[6] = b[6] - tmp*LU[105];
    b[7] = b[7] - tmp*LU[106];
    b[8] = b[8] - tmp*LU[107];
    b[8] = b[8] / LU[96];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[88];
    b[1] = b[1] - tmp*LU[89];
    b[2] = b[2] - tmp*LU[90];
    b[3] = b[3] - tmp*LU[91];
    b[4] = b[4] - tmp*LU[92];
    b[5] = b[5] - tmp*LU[93];
    b[6] = b[6] - tmp*LU[94];
    b[7] = b[7] - tmp*LU[95];
    b[7] = b[7] / LU[84];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[77];
    b[1] = b[1] - tmp*LU[78];
    b[2] = b[2] - tmp*LU[79];
    b[3] = b[3] - tmp*LU[80];
    b[4] = b[4] - tmp*LU[81];
    b[5] = b[5] - tmp*LU[82];
    b[6] = b[6] - tmp*LU[83];
    b[6] = b[6] / LU[72];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[66];
    b[1] = b[1] - tmp*LU[67];
    b[2] = b[2] - tmp*LU[68];
    b[3] = b[3] - tmp*LU[69];
    b[4] = b[4] - tmp*LU[70];
    b[5] = b[5] - tmp*LU[71];
    b[5] = b[5] / LU[60];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[55];
    b[1] = b[1] - tmp*LU[56];
    b[2] = b[2] - tmp*LU[57];
    b[3] = b[3] - tmp*LU[58];
    b[4] = b[4] - tmp*LU[59];
    b[4] = b[4] / LU[48];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[44];
    b[1] = b[1] - tmp*LU[45];
    b[2] = b[2] - tmp*LU[46];
    b[3] = b[3] - tmp*LU[47];
    b[3] = b[3] / LU[36];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[33];
    b[1] = b[1] - tmp*LU[34];
    b[2] = b[2] - tmp*LU[35];
    b[2] = b[2] / LU[24];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[22];
    b[1] = b[1] - tmp*LU[23];
    b[1] = b[1] / LU[12];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[11];
    b[0] = b[0] / LU[0];
}

void lu_solve_12( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[11], b[P[11]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    b[11] = b[11] - tmp*LU[11];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[14];
    b[3] = b[3] - tmp*LU[15];
    b[4] = b[4] - tmp*LU[16];
    b[5] = b[5] - tmp*LU[17];
    b[6] = b[6] - tmp*LU[18];
    b[7] = b[7] - tmp*LU[19];
    b[8] = b[8] - tmp*LU[20];
    b[9] = b[9] - tmp*LU[21];
    b[10] = b[10] - tmp*LU[22];
    b[11] = b[11] - tmp*LU[23];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[27];
    b[4] = b[4] - tmp*LU[28];
    b[5] = b[5] - tmp*LU[29];
    b[6] = b[6] - tmp*LU[30];
    b[7] = b[7] - tmp*LU[31];
    b[8] = b[8] - tmp*LU[32];
    b[9] = b[9] - tmp*LU[33];
    b[10] = b[10] - tmp*LU[34];
    b[11] = b[11] - tmp*LU[35];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[40];
    b[5] = b[5] - tmp*LU[41];
    b[6] = b[6] - tmp*LU[42];
    b[7] = b[7] - tmp*LU[43];
    b[8] = b[8] - tmp*LU[44];
    b[9] = b[9] - tmp*LU[45];
    b[10] = b[10] - tmp*LU[46];
    b[11] = b[11] - tmp*LU[47];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[53];
    b[6] = b[6] - tmp*LU[54];
    b[7] = b[7] - tmp*LU[55];
    b[8] = b[8] - tmp*LU[56];
    b[9] = b[9] - tmp*LU[57];
    b[10] = b[10] - tmp*LU[58];
    b[11] = b[11] - tmp*LU[59];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[66];
    b[7] = b[7] - tmp*LU[67];
    b[8] = b[8] - tmp*LU[68];
    b[9] = b[9] - tmp*LU[69];
    b[10] = b[10] - tmp*LU[70];
    b[11] = b[11] - tmp*LU[71];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[79];
    b[8] = b[8] - tmp*LU[80];
    b[9] = b[9] - tmp*LU[81];
    b[10] = b[10] - tmp*LU[82];
    b[11] = b[11] - tmp*LU[83];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[92];
    b[9] = b[9] - tmp*LU[93];
    b[10] = b[10] - tmp*LU[94];
    b[11] = b[11] - tmp*LU[95];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[105];
    b[10] = b[10] - tmp*LU[106];
    b[11] = b[11] - tmp*LU[107];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[118];
    b[11] = b[11] - tmp*LU[119];
    tmp  = b[10];
    b[11] = b[11] - tmp*LU[131];
    b[11] = b[11] / LU[143];
    tmp  = b[11];
    b[0] = b[0] - tmp*LU[132];
    b[1] = b[1] - tmp*LU[133];
    b[2] = b[2] - tmp*LU[134];
    b[3] = b[3] - tmp*LU[135];
    b[4] = b[4] - tmp*LU[136];
    b[5] = b[5] - tmp*LU[137];
    b[6] = b[6] - tmp*LU[138];
    b[7] = b[7] - tmp*LU[139];
    b[8] = b[8] - tmp*LU[140];
    b[9] = b[9] - tmp*LU[141];
    b[10] = b[10] - tmp*LU[142];
    b[10] = b[10] / LU[130];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[120];
    b[1] = b[1] - tmp*LU[121];
    b[2] = b[2] - tmp*LU[122];
    b[3] = b[3] - tmp*LU[123];
    b[4] = b[4] - tmp*LU[124];
    b[5] = b[5] - tmp*LU[125];
    b[6] = b[6] - tmp*LU[126];
    b[7] = b[7] - tmp*LU[127];
    b[8] = b[8] - tmp*LU[128];
    b[9] = b[9] - tmp*LU[129];
    b[9] = b[9] / LU[117];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[108];
    b[1] = b[1] - tmp*LU[109];
    b[2] = b[2] - tmp*LU[110];
    b[3] = b[3] - tmp*LU[111];
    b[4] = b[4] - tmp*LU[112];
    b[5] = b[5] - tmp*LU[113];
    b[6] = b[6] - tmp*LU[114];
    b[7] = b[7] - tmp*LU[115];
    b[8] = b[8] - tmp*LU[116];
    b[8] = b[8] / LU[104];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[96];
    b[1] = b[1] - tmp*LU[97];
    b[2] = b[2] - tmp*LU[98];
    b[3] = b[3] - tmp*LU[99];
    b[4] = b[4] - tmp*LU[100];
    b[5] = b[5] - tmp*LU[101];
    b[6] = b[6] - tmp*LU[102];
    b[7] = b[7] - tmp*LU[103];
    b[7] = b[7] / LU[91];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[84];
    b[1] = b[1] - tmp*LU[85];
    b[2] = b[2] - tmp*LU[86];
    b[3] = b[3] - tmp*LU[87];
    b[4] = b[4] - tmp*LU[88];
    b[5] = b[5] - tmp*LU[89];
    b[6] = b[6] - tmp*LU[90];
    b[6] = b[6] / LU[78];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[72];
    b[1] = b[1] - tmp*LU[73];
    b[2] = b[2] - tmp*LU[74];
    b[3] = b[3] - tmp*LU[75];
    b[4] = b[4] - tmp*LU[76];
    b[5] = b[5] - tmp*LU[77];
    b[5] = b[5] / LU[65];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[60];
    b[1] = b[1] - tmp*LU[61];
    b[2] = b[2] - tmp*LU[62];
    b[3] = b[3] - tmp*LU[63];
    b[4] = b[4] - tmp*LU[64];
    b[4] = b[4] / LU[52];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[48];
    b[1] = b[1] - tmp*LU[49];
    b[2] = b[2] - tmp*LU[50];
    b[3] = b[3] - tmp*LU[51];
    b[3] = b[3] / LU[39];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[36];
    b[1] = b[1] - tmp*LU[37];
    b[2] = b[2] - tmp*LU[38];
    b[2] = b[2] / LU[26];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[24];
    b[1] = b[1] - tmp*LU[25];
    b[1] = b[1] / LU[13];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[12];
    b[0] = b[0] / LU[0];
}

void lu_solve_13( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[12], b[P[12]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    b[11] = b[11] - tmp*LU[11];
    b[12] = b[12] - tmp*LU[12];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[15];
    b[3] = b[3] - tmp*LU[16];
    b[4] = b[4] - tmp*LU[17];
    b[5] = b[5] - tmp*LU[18];
    b[6] = b[6] - tmp*LU[19];
    b[7] = b[7] - tmp*LU[20];
    b[8] = b[8] - tmp*LU[21];
    b[9] = b[9] - tmp*LU[22];
    b[10] = b[10] - tmp*LU[23];
    b[11] = b[11] - tmp*LU[24];
    b[12] = b[12] - tmp*LU[25];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[29];
    b[4] = b[4] - tmp*LU[30];
    b[5] = b[5] - tmp*LU[31];
    b[6] = b[6] - tmp*LU[32];
    b[7] = b[7] - tmp*LU[33];
    b[8] = b[8] - tmp*LU[34];
    b[9] = b[9] - tmp*LU[35];
    b[10] = b[10] - tmp*LU[36];
    b[11] = b[11] - tmp*LU[37];
    b[12] = b[12] - tmp*LU[38];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[43];
    b[5] = b[5] - tmp*LU[44];
    b[6] = b[6] - tmp*LU[45];
    b[7] = b[7] - tmp*LU[46];
    b[8] = b[8] - tmp*LU[47];
    b[9] = b[9] - tmp*LU[48];
    b[10] = b[10] - tmp*LU[49];
    b[11] = b[11] - tmp*LU[50];
    b[12] = b[12] - tmp*LU[51];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[57];
    b[6] = b[6] - tmp*LU[58];
    b[7] = b[7] - tmp*LU[59];
    b[8] = b[8] - tmp*LU[60];
    b[9] = b[9] - tmp*LU[61];
    b[10] = b[10] - tmp*LU[62];
    b[11] = b[11] - tmp*LU[63];
    b[12] = b[12] - tmp*LU[64];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[71];
    b[7] = b[7] - tmp*LU[72];
    b[8] = b[8] - tmp*LU[73];
    b[9] = b[9] - tmp*LU[74];
    b[10] = b[10] - tmp*LU[75];
    b[11] = b[11] - tmp*LU[76];
    b[12] = b[12] - tmp*LU[77];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[85];
    b[8] = b[8] - tmp*LU[86];
    b[9] = b[9] - tmp*LU[87];
    b[10] = b[10] - tmp*LU[88];
    b[11] = b[11] - tmp*LU[89];
    b[12] = b[12] - tmp*LU[90];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[99];
    b[9] = b[9] - tmp*LU[100];
    b[10] = b[10] - tmp*LU[101];
    b[11] = b[11] - tmp*LU[102];
    b[12] = b[12] - tmp*LU[103];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[113];
    b[10] = b[10] - tmp*LU[114];
    b[11] = b[11] - tmp*LU[115];
    b[12] = b[12] - tmp*LU[116];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[127];
    b[11] = b[11] - tmp*LU[128];
    b[12] = b[12] - tmp*LU[129];
    tmp  = b[10];
    b[11] = b[11] - tmp*LU[141];
    b[12] = b[12] - tmp*LU[142];
    tmp  = b[11];
    b[12] = b[12] - tmp*LU[155];
    b[12] = b[12] / LU[168];
    tmp  = b[12];
    b[0] = b[0] - tmp*LU[156];
    b[1] = b[1] - tmp*LU[157];
    b[2] = b[2] - tmp*LU[158];
    b[3] = b[3] - tmp*LU[159];
    b[4] = b[4] - tmp*LU[160];
    b[5] = b[5] - tmp*LU[161];
    b[6] = b[6] - tmp*LU[162];
    b[7] = b[7] - tmp*LU[163];
    b[8] = b[8] - tmp*LU[164];
    b[9] = b[9] - tmp*LU[165];
    b[10] = b[10] - tmp*LU[166];
    b[11] = b[11] - tmp*LU[167];
    b[11] = b[11] / LU[154];
    tmp  = b[11];
    b[0] = b[0] - tmp*LU[143];
    b[1] = b[1] - tmp*LU[144];
    b[2] = b[2] - tmp*LU[145];
    b[3] = b[3] - tmp*LU[146];
    b[4] = b[4] - tmp*LU[147];
    b[5] = b[5] - tmp*LU[148];
    b[6] = b[6] - tmp*LU[149];
    b[7] = b[7] - tmp*LU[150];
    b[8] = b[8] - tmp*LU[151];
    b[9] = b[9] - tmp*LU[152];
    b[10] = b[10] - tmp*LU[153];
    b[10] = b[10] / LU[140];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[130];
    b[1] = b[1] - tmp*LU[131];
    b[2] = b[2] - tmp*LU[132];
    b[3] = b[3] - tmp*LU[133];
    b[4] = b[4] - tmp*LU[134];
    b[5] = b[5] - tmp*LU[135];
    b[6] = b[6] - tmp*LU[136];
    b[7] = b[7] - tmp*LU[137];
    b[8] = b[8] - tmp*LU[138];
    b[9] = b[9] - tmp*LU[139];
    b[9] = b[9] / LU[126];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[117];
    b[1] = b[1] - tmp*LU[118];
    b[2] = b[2] - tmp*LU[119];
    b[3] = b[3] - tmp*LU[120];
    b[4] = b[4] - tmp*LU[121];
    b[5] = b[5] - tmp*LU[122];
    b[6] = b[6] - tmp*LU[123];
    b[7] = b[7] - tmp*LU[124];
    b[8] = b[8] - tmp*LU[125];
    b[8] = b[8] / LU[112];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[104];
    b[1] = b[1] - tmp*LU[105];
    b[2] = b[2] - tmp*LU[106];
    b[3] = b[3] - tmp*LU[107];
    b[4] = b[4] - tmp*LU[108];
    b[5] = b[5] - tmp*LU[109];
    b[6] = b[6] - tmp*LU[110];
    b[7] = b[7] - tmp*LU[111];
    b[7] = b[7] / LU[98];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[91];
    b[1] = b[1] - tmp*LU[92];
    b[2] = b[2] - tmp*LU[93];
    b[3] = b[3] - tmp*LU[94];
    b[4] = b[4] - tmp*LU[95];
    b[5] = b[5] - tmp*LU[96];
    b[6] = b[6] - tmp*LU[97];
    b[6] = b[6] / LU[84];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[78];
    b[1] = b[1] - tmp*LU[79];
    b[2] = b[2] - tmp*LU[80];
    b[3] = b[3] - tmp*LU[81];
    b[4] = b[4] - tmp*LU[82];
    b[5] = b[5] - tmp*LU[83];
    b[5] = b[5] / LU[70];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[65];
    b[1] = b[1] - tmp*LU[66];
    b[2] = b[2] - tmp*LU[67];
    b[3] = b[3] - tmp*LU[68];
    b[4] = b[4] - tmp*LU[69];
    b[4] = b[4] / LU[56];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[52];
    b[1] = b[1] - tmp*LU[53];
    b[2] = b[2] - tmp*LU[54];
    b[3] = b[3] - tmp*LU[55];
    b[3] = b[3] / LU[42];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[39];
    b[1] = b[1] - tmp*LU[40];
    b[2] = b[2] - tmp*LU[41];
    b[2] = b[2] / LU[28];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[26];
    b[1] = b[1] - tmp*LU[27];
    b[1] = b[1] / LU[14];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[13];
    b[0] = b[0] / LU[0];
}

void lu_solve_14( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[13], b[P[13]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    b[11] = b[11] - tmp*LU[11];
    b[12] = b[12] - tmp*LU[12];
    b[13] = b[13] - tmp*LU[13];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[16];
    b[3] = b[3] - tmp*LU[17];
    b[4] = b[4] - tmp*LU[18];
    b[5] = b[5] - tmp*LU[19];
    b[6] = b[6] - tmp*LU[20];
    b[7] = b[7] - tmp*LU[21];
    b[8] = b[8] - tmp*LU[22];
    b[9] = b[9] - tmp*LU[23];
    b[10] = b[10] - tmp*LU[24];
    b[11] = b[11] - tmp*LU[25];
    b[12] = b[12] - tmp*LU[26];
    b[13] = b[13] - tmp*LU[27];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[31];
    b[4] = b[4] - tmp*LU[32];
    b[5] = b[5] - tmp*LU[33];
    b[6] = b[6] - tmp*LU[34];
    b[7] = b[7] - tmp*LU[35];
    b[8] = b[8] - tmp*LU[36];
    b[9] = b[9] - tmp*LU[37];
    b[10] = b[10] - tmp*LU[38];
    b[11] = b[11] - tmp*LU[39];
    b[12] = b[12] - tmp*LU[40];
    b[13] = b[13] - tmp*LU[41];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[46];
    b[5] = b[5] - tmp*LU[47];
    b[6] = b[6] - tmp*LU[48];
    b[7] = b[7] - tmp*LU[49];
    b[8] = b[8] - tmp*LU[50];
    b[9] = b[9] - tmp*LU[51];
    b[10] = b[10] - tmp*LU[52];
    b[11] = b[11] - tmp*LU[53];
    b[12] = b[12] - tmp*LU[54];
    b[13] = b[13] - tmp*LU[55];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[61];
    b[6] = b[6] - tmp*LU[62];
    b[7] = b[7] - tmp*LU[63];
    b[8] = b[8] - tmp*LU[64];
    b[9] = b[9] - tmp*LU[65];
    b[10] = b[10] - tmp*LU[66];
    b[11] = b[11] - tmp*LU[67];
    b[12] = b[12] - tmp*LU[68];
    b[13] = b[13] - tmp*LU[69];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[76];
    b[7] = b[7] - tmp*LU[77];
    b[8] = b[8] - tmp*LU[78];
    b[9] = b[9] - tmp*LU[79];
    b[10] = b[10] - tmp*LU[80];
    b[11] = b[11] - tmp*LU[81];
    b[12] = b[12] - tmp*LU[82];
    b[13] = b[13] - tmp*LU[83];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[91];
    b[8] = b[8] - tmp*LU[92];
    b[9] = b[9] - tmp*LU[93];
    b[10] = b[10] - tmp*LU[94];
    b[11] = b[11] - tmp*LU[95];
    b[12] = b[12] - tmp*LU[96];
    b[13] = b[13] - tmp*LU[97];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[106];
    b[9] = b[9] - tmp*LU[107];
    b[10] = b[10] - tmp*LU[108];
    b[11] = b[11] - tmp*LU[109];
    b[12] = b[12] - tmp*LU[110];
    b[13] = b[13] - tmp*LU[111];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[121];
    b[10] = b[10] - tmp*LU[122];
    b[11] = b[11] - tmp*LU[123];
    b[12] = b[12] - tmp*LU[124];
    b[13] = b[13] - tmp*LU[125];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[136];
    b[11] = b[11] - tmp*LU[137];
    b[12] = b[12] - tmp*LU[138];
    b[13] = b[13] - tmp*LU[139];
    tmp  = b[10];
    b[11] = b[11] - tmp*LU[151];
    b[12] = b[12] - tmp*LU[152];
    b[13] = b[13] - tmp*LU[153];
    tmp  = b[11];
    b[12] = b[12] - tmp*LU[166];
    b[13] = b[13] - tmp*LU[167];
    tmp  = b[12];
    b[13] = b[13] - tmp*LU[181];
    b[13] = b[13] / LU[195];
    tmp  = b[13];
    b[0] = b[0] - tmp*LU[182];
    b[1] = b[1] - tmp*LU[183];
    b[2] = b[2] - tmp*LU[184];
    b[3] = b[3] - tmp*LU[185];
    b[4] = b[4] - tmp*LU[186];
    b[5] = b[5] - tmp*LU[187];
    b[6] = b[6] - tmp*LU[188];
    b[7] = b[7] - tmp*LU[189];
    b[8] = b[8] - tmp*LU[190];
    b[9] = b[9] - tmp*LU[191];
    b[10] = b[10] - tmp*LU[192];
    b[11] = b[11] - tmp*LU[193];
    b[12] = b[12] - tmp*LU[194];
    b[12] = b[12] / LU[180];
    tmp  = b[12];
    b[0] = b[0] - tmp*LU[168];
    b[1] = b[1] - tmp*LU[169];
    b[2] = b[2] - tmp*LU[170];
    b[3] = b[3] - tmp*LU[171];
    b[4] = b[4] - tmp*LU[172];
    b[5] = b[5] - tmp*LU[173];
    b[6] = b[6] - tmp*LU[174];
    b[7] = b[7] - tmp*LU[175];
    b[8] = b[8] - tmp*LU[176];
    b[9] = b[9] - tmp*LU[177];
    b[10] = b[10] - tmp*LU[178];
    b[11] = b[11] - tmp*LU[179];
    b[11] = b[11] / LU[165];
    tmp  = b[11];
    b[0] = b[0] - tmp*LU[154];
    b[1] = b[1] - tmp*LU[155];
    b[2] = b[2] - tmp*LU[156];
    b[3] = b[3] - tmp*LU[157];
    b[4] = b[4] - tmp*LU[158];
    b[5] = b[5] - tmp*LU[159];
    b[6] = b[6] - tmp*LU[160];
    b[7] = b[7] - tmp*LU[161];
    b[8] = b[8] - tmp*LU[162];
    b[9] = b[9] - tmp*LU[163];
    b[10] = b[10] - tmp*LU[164];
    b[10] = b[10] / LU[150];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[140];
    b[1] = b[1] - tmp*LU[141];
    b[2] = b[2] - tmp*LU[142];
    b[3] = b[3] - tmp*LU[143];
    b[4] = b[4] - tmp*LU[144];
    b[5] = b[5] - tmp*LU[145];
    b[6] = b[6] - tmp*LU[146];
    b[7] = b[7] - tmp*LU[147];
    b[8] = b[8] - tmp*LU[148];
    b[9] = b[9] - tmp*LU[149];
    b[9] = b[9] / LU[135];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[126];
    b[1] = b[1] - tmp*LU[127];
    b[2] = b[2] - tmp*LU[128];
    b[3] = b[3] - tmp*LU[129];
    b[4] = b[4] - tmp*LU[130];
    b[5] = b[5] - tmp*LU[131];
    b[6] = b[6] - tmp*LU[132];
    b[7] = b[7] - tmp*LU[133];
    b[8] = b[8] - tmp*LU[134];
    b[8] = b[8] / LU[120];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[112];
    b[1] = b[1] - tmp*LU[113];
    b[2] = b[2] - tmp*LU[114];
    b[3] = b[3] - tmp*LU[115];
    b[4] = b[4] - tmp*LU[116];
    b[5] = b[5] - tmp*LU[117];
    b[6] = b[6] - tmp*LU[118];
    b[7] = b[7] - tmp*LU[119];
    b[7] = b[7] / LU[105];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[98];
    b[1] = b[1] - tmp*LU[99];
    b[2] = b[2] - tmp*LU[100];
    b[3] = b[3] - tmp*LU[101];
    b[4] = b[4] - tmp*LU[102];
    b[5] = b[5] - tmp*LU[103];
    b[6] = b[6] - tmp*LU[104];
    b[6] = b[6] / LU[90];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[84];
    b[1] = b[1] - tmp*LU[85];
    b[2] = b[2] - tmp*LU[86];
    b[3] = b[3] - tmp*LU[87];
    b[4] = b[4] - tmp*LU[88];
    b[5] = b[5] - tmp*LU[89];
    b[5] = b[5] / LU[75];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[70];
    b[1] = b[1] - tmp*LU[71];
    b[2] = b[2] - tmp*LU[72];
    b[3] = b[3] - tmp*LU[73];
    b[4] = b[4] - tmp*LU[74];
    b[4] = b[4] / LU[60];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[56];
    b[1] = b[1] - tmp*LU[57];
    b[2] = b[2] - tmp*LU[58];
    b[3] = b[3] - tmp*LU[59];
    b[3] = b[3] / LU[45];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[42];
    b[1] = b[1] - tmp*LU[43];
    b[2] = b[2] - tmp*LU[44];
    b[2] = b[2] / LU[30];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[28];
    b[1] = b[1] - tmp*LU[29];
    b[1] = b[1] / LU[15];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[14];
    b[0] = b[0] / LU[0];
}

void lu_solve_15( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[13], b[P[13]-1] );
    std::swap( b[14], b[P[14]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    b[11] = b[11] - tmp*LU[11];
    b[12] = b[12] - tmp*LU[12];
    b[13] = b[13] - tmp*LU[13];
    b[14] = b[14] - tmp*LU[14];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[17];
    b[3] = b[3] - tmp*LU[18];
    b[4] = b[4] - tmp*LU[19];
    b[5] = b[5] - tmp*LU[20];
    b[6] = b[6] - tmp*LU[21];
    b[7] = b[7] - tmp*LU[22];
    b[8] = b[8] - tmp*LU[23];
    b[9] = b[9] - tmp*LU[24];
    b[10] = b[10] - tmp*LU[25];
    b[11] = b[11] - tmp*LU[26];
    b[12] = b[12] - tmp*LU[27];
    b[13] = b[13] - tmp*LU[28];
    b[14] = b[14] - tmp*LU[29];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[33];
    b[4] = b[4] - tmp*LU[34];
    b[5] = b[5] - tmp*LU[35];
    b[6] = b[6] - tmp*LU[36];
    b[7] = b[7] - tmp*LU[37];
    b[8] = b[8] - tmp*LU[38];
    b[9] = b[9] - tmp*LU[39];
    b[10] = b[10] - tmp*LU[40];
    b[11] = b[11] - tmp*LU[41];
    b[12] = b[12] - tmp*LU[42];
    b[13] = b[13] - tmp*LU[43];
    b[14] = b[14] - tmp*LU[44];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[49];
    b[5] = b[5] - tmp*LU[50];
    b[6] = b[6] - tmp*LU[51];
    b[7] = b[7] - tmp*LU[52];
    b[8] = b[8] - tmp*LU[53];
    b[9] = b[9] - tmp*LU[54];
    b[10] = b[10] - tmp*LU[55];
    b[11] = b[11] - tmp*LU[56];
    b[12] = b[12] - tmp*LU[57];
    b[13] = b[13] - tmp*LU[58];
    b[14] = b[14] - tmp*LU[59];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[65];
    b[6] = b[6] - tmp*LU[66];
    b[7] = b[7] - tmp*LU[67];
    b[8] = b[8] - tmp*LU[68];
    b[9] = b[9] - tmp*LU[69];
    b[10] = b[10] - tmp*LU[70];
    b[11] = b[11] - tmp*LU[71];
    b[12] = b[12] - tmp*LU[72];
    b[13] = b[13] - tmp*LU[73];
    b[14] = b[14] - tmp*LU[74];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[81];
    b[7] = b[7] - tmp*LU[82];
    b[8] = b[8] - tmp*LU[83];
    b[9] = b[9] - tmp*LU[84];
    b[10] = b[10] - tmp*LU[85];
    b[11] = b[11] - tmp*LU[86];
    b[12] = b[12] - tmp*LU[87];
    b[13] = b[13] - tmp*LU[88];
    b[14] = b[14] - tmp*LU[89];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[97];
    b[8] = b[8] - tmp*LU[98];
    b[9] = b[9] - tmp*LU[99];
    b[10] = b[10] - tmp*LU[100];
    b[11] = b[11] - tmp*LU[101];
    b[12] = b[12] - tmp*LU[102];
    b[13] = b[13] - tmp*LU[103];
    b[14] = b[14] - tmp*LU[104];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[113];
    b[9] = b[9] - tmp*LU[114];
    b[10] = b[10] - tmp*LU[115];
    b[11] = b[11] - tmp*LU[116];
    b[12] = b[12] - tmp*LU[117];
    b[13] = b[13] - tmp*LU[118];
    b[14] = b[14] - tmp*LU[119];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[129];
    b[10] = b[10] - tmp*LU[130];
    b[11] = b[11] - tmp*LU[131];
    b[12] = b[12] - tmp*LU[132];
    b[13] = b[13] - tmp*LU[133];
    b[14] = b[14] - tmp*LU[134];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[145];
    b[11] = b[11] - tmp*LU[146];
    b[12] = b[12] - tmp*LU[147];
    b[13] = b[13] - tmp*LU[148];
    b[14] = b[14] - tmp*LU[149];
    tmp  = b[10];
    b[11] = b[11] - tmp*LU[161];
    b[12] = b[12] - tmp*LU[162];
    b[13] = b[13] - tmp*LU[163];
    b[14] = b[14] - tmp*LU[164];
    tmp  = b[11];
    b[12] = b[12] - tmp*LU[177];
    b[13] = b[13] - tmp*LU[178];
    b[14] = b[14] - tmp*LU[179];
    tmp  = b[12];
    b[13] = b[13] - tmp*LU[193];
    b[14] = b[14] - tmp*LU[194];
    tmp  = b[13];
    b[14] = b[14] - tmp*LU[209];
    b[14] = b[14] / LU[224];
    tmp  = b[14];
    b[0] = b[0] - tmp*LU[210];
    b[1] = b[1] - tmp*LU[211];
    b[2] = b[2] - tmp*LU[212];
    b[3] = b[3] - tmp*LU[213];
    b[4] = b[4] - tmp*LU[214];
    b[5] = b[5] - tmp*LU[215];
    b[6] = b[6] - tmp*LU[216];
    b[7] = b[7] - tmp*LU[217];
    b[8] = b[8] - tmp*LU[218];
    b[9] = b[9] - tmp*LU[219];
    b[10] = b[10] - tmp*LU[220];
    b[11] = b[11] - tmp*LU[221];
    b[12] = b[12] - tmp*LU[222];
    b[13] = b[13] - tmp*LU[223];
    b[13] = b[13] / LU[208];
    tmp  = b[13];
    b[0] = b[0] - tmp*LU[195];
    b[1] = b[1] - tmp*LU[196];
    b[2] = b[2] - tmp*LU[197];
    b[3] = b[3] - tmp*LU[198];
    b[4] = b[4] - tmp*LU[199];
    b[5] = b[5] - tmp*LU[200];
    b[6] = b[6] - tmp*LU[201];
    b[7] = b[7] - tmp*LU[202];
    b[8] = b[8] - tmp*LU[203];
    b[9] = b[9] - tmp*LU[204];
    b[10] = b[10] - tmp*LU[205];
    b[11] = b[11] - tmp*LU[206];
    b[12] = b[12] - tmp*LU[207];
    b[12] = b[12] / LU[192];
    tmp  = b[12];
    b[0] = b[0] - tmp*LU[180];
    b[1] = b[1] - tmp*LU[181];
    b[2] = b[2] - tmp*LU[182];
    b[3] = b[3] - tmp*LU[183];
    b[4] = b[4] - tmp*LU[184];
    b[5] = b[5] - tmp*LU[185];
    b[6] = b[6] - tmp*LU[186];
    b[7] = b[7] - tmp*LU[187];
    b[8] = b[8] - tmp*LU[188];
    b[9] = b[9] - tmp*LU[189];
    b[10] = b[10] - tmp*LU[190];
    b[11] = b[11] - tmp*LU[191];
    b[11] = b[11] / LU[176];
    tmp  = b[11];
    b[0] = b[0] - tmp*LU[165];
    b[1] = b[1] - tmp*LU[166];
    b[2] = b[2] - tmp*LU[167];
    b[3] = b[3] - tmp*LU[168];
    b[4] = b[4] - tmp*LU[169];
    b[5] = b[5] - tmp*LU[170];
    b[6] = b[6] - tmp*LU[171];
    b[7] = b[7] - tmp*LU[172];
    b[8] = b[8] - tmp*LU[173];
    b[9] = b[9] - tmp*LU[174];
    b[10] = b[10] - tmp*LU[175];
    b[10] = b[10] / LU[160];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[150];
    b[1] = b[1] - tmp*LU[151];
    b[2] = b[2] - tmp*LU[152];
    b[3] = b[3] - tmp*LU[153];
    b[4] = b[4] - tmp*LU[154];
    b[5] = b[5] - tmp*LU[155];
    b[6] = b[6] - tmp*LU[156];
    b[7] = b[7] - tmp*LU[157];
    b[8] = b[8] - tmp*LU[158];
    b[9] = b[9] - tmp*LU[159];
    b[9] = b[9] / LU[144];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[135];
    b[1] = b[1] - tmp*LU[136];
    b[2] = b[2] - tmp*LU[137];
    b[3] = b[3] - tmp*LU[138];
    b[4] = b[4] - tmp*LU[139];
    b[5] = b[5] - tmp*LU[140];
    b[6] = b[6] - tmp*LU[141];
    b[7] = b[7] - tmp*LU[142];
    b[8] = b[8] - tmp*LU[143];
    b[8] = b[8] / LU[128];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[120];
    b[1] = b[1] - tmp*LU[121];
    b[2] = b[2] - tmp*LU[122];
    b[3] = b[3] - tmp*LU[123];
    b[4] = b[4] - tmp*LU[124];
    b[5] = b[5] - tmp*LU[125];
    b[6] = b[6] - tmp*LU[126];
    b[7] = b[7] - tmp*LU[127];
    b[7] = b[7] / LU[112];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[105];
    b[1] = b[1] - tmp*LU[106];
    b[2] = b[2] - tmp*LU[107];
    b[3] = b[3] - tmp*LU[108];
    b[4] = b[4] - tmp*LU[109];
    b[5] = b[5] - tmp*LU[110];
    b[6] = b[6] - tmp*LU[111];
    b[6] = b[6] / LU[96];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[90];
    b[1] = b[1] - tmp*LU[91];
    b[2] = b[2] - tmp*LU[92];
    b[3] = b[3] - tmp*LU[93];
    b[4] = b[4] - tmp*LU[94];
    b[5] = b[5] - tmp*LU[95];
    b[5] = b[5] / LU[80];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[75];
    b[1] = b[1] - tmp*LU[76];
    b[2] = b[2] - tmp*LU[77];
    b[3] = b[3] - tmp*LU[78];
    b[4] = b[4] - tmp*LU[79];
    b[4] = b[4] / LU[64];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[60];
    b[1] = b[1] - tmp*LU[61];
    b[2] = b[2] - tmp*LU[62];
    b[3] = b[3] - tmp*LU[63];
    b[3] = b[3] / LU[48];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[45];
    b[1] = b[1] - tmp*LU[46];
    b[2] = b[2] - tmp*LU[47];
    b[2] = b[2] / LU[32];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[30];
    b[1] = b[1] - tmp*LU[31];
    b[1] = b[1] / LU[16];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[15];
    b[0] = b[0] / LU[0];
}

void lu_solve_16( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    std::swap( b[0], b[P[0]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[13], b[P[13]-1] );
    std::swap( b[14], b[P[14]-1] );
    std::swap( b[15], b[P[15]-1] );
    tmp  = b[0];
    b[1] = b[1] - tmp*LU[1];
    b[2] = b[2] - tmp*LU[2];
    b[3] = b[3] - tmp*LU[3];
    b[4] = b[4] - tmp*LU[4];
    b[5] = b[5] - tmp*LU[5];
    b[6] = b[6] - tmp*LU[6];
    b[7] = b[7] - tmp*LU[7];
    b[8] = b[8] - tmp*LU[8];
    b[9] = b[9] - tmp*LU[9];
    b[10] = b[10] - tmp*LU[10];
    b[11] = b[11] - tmp*LU[11];
    b[12] = b[12] - tmp*LU[12];
    b[13] = b[13] - tmp*LU[13];
    b[14] = b[14] - tmp*LU[14];
    b[15] = b[15] - tmp*LU[15];
    tmp  = b[1];
    b[2] = b[2] - tmp*LU[18];
    b[3] = b[3] - tmp*LU[19];
    b[4] = b[4] - tmp*LU[20];
    b[5] = b[5] - tmp*LU[21];
    b[6] = b[6] - tmp*LU[22];
    b[7] = b[7] - tmp*LU[23];
    b[8] = b[8] - tmp*LU[24];
    b[9] = b[9] - tmp*LU[25];
    b[10] = b[10] - tmp*LU[26];
    b[11] = b[11] - tmp*LU[27];
    b[12] = b[12] - tmp*LU[28];
    b[13] = b[13] - tmp*LU[29];
    b[14] = b[14] - tmp*LU[30];
    b[15] = b[15] - tmp*LU[31];
    tmp  = b[2];
    b[3] = b[3] - tmp*LU[35];
    b[4] = b[4] - tmp*LU[36];
    b[5] = b[5] - tmp*LU[37];
    b[6] = b[6] - tmp*LU[38];
    b[7] = b[7] - tmp*LU[39];
    b[8] = b[8] - tmp*LU[40];
    b[9] = b[9] - tmp*LU[41];
    b[10] = b[10] - tmp*LU[42];
    b[11] = b[11] - tmp*LU[43];
    b[12] = b[12] - tmp*LU[44];
    b[13] = b[13] - tmp*LU[45];
    b[14] = b[14] - tmp*LU[46];
    b[15] = b[15] - tmp*LU[47];
    tmp  = b[3];
    b[4] = b[4] - tmp*LU[52];
    b[5] = b[5] - tmp*LU[53];
    b[6] = b[6] - tmp*LU[54];
    b[7] = b[7] - tmp*LU[55];
    b[8] = b[8] - tmp*LU[56];
    b[9] = b[9] - tmp*LU[57];
    b[10] = b[10] - tmp*LU[58];
    b[11] = b[11] - tmp*LU[59];
    b[12] = b[12] - tmp*LU[60];
    b[13] = b[13] - tmp*LU[61];
    b[14] = b[14] - tmp*LU[62];
    b[15] = b[15] - tmp*LU[63];
    tmp  = b[4];
    b[5] = b[5] - tmp*LU[69];
    b[6] = b[6] - tmp*LU[70];
    b[7] = b[7] - tmp*LU[71];
    b[8] = b[8] - tmp*LU[72];
    b[9] = b[9] - tmp*LU[73];
    b[10] = b[10] - tmp*LU[74];
    b[11] = b[11] - tmp*LU[75];
    b[12] = b[12] - tmp*LU[76];
    b[13] = b[13] - tmp*LU[77];
    b[14] = b[14] - tmp*LU[78];
    b[15] = b[15] - tmp*LU[79];
    tmp  = b[5];
    b[6] = b[6] - tmp*LU[86];
    b[7] = b[7] - tmp*LU[87];
    b[8] = b[8] - tmp*LU[88];
    b[9] = b[9] - tmp*LU[89];
    b[10] = b[10] - tmp*LU[90];
    b[11] = b[11] - tmp*LU[91];
    b[12] = b[12] - tmp*LU[92];
    b[13] = b[13] - tmp*LU[93];
    b[14] = b[14] - tmp*LU[94];
    b[15] = b[15] - tmp*LU[95];
    tmp  = b[6];
    b[7] = b[7] - tmp*LU[103];
    b[8] = b[8] - tmp*LU[104];
    b[9] = b[9] - tmp*LU[105];
    b[10] = b[10] - tmp*LU[106];
    b[11] = b[11] - tmp*LU[107];
    b[12] = b[12] - tmp*LU[108];
    b[13] = b[13] - tmp*LU[109];
    b[14] = b[14] - tmp*LU[110];
    b[15] = b[15] - tmp*LU[111];
    tmp  = b[7];
    b[8] = b[8] - tmp*LU[120];
    b[9] = b[9] - tmp*LU[121];
    b[10] = b[10] - tmp*LU[122];
    b[11] = b[11] - tmp*LU[123];
    b[12] = b[12] - tmp*LU[124];
    b[13] = b[13] - tmp*LU[125];
    b[14] = b[14] - tmp*LU[126];
    b[15] = b[15] - tmp*LU[127];
    tmp  = b[8];
    b[9] = b[9] - tmp*LU[137];
    b[10] = b[10] - tmp*LU[138];
    b[11] = b[11] - tmp*LU[139];
    b[12] = b[12] - tmp*LU[140];
    b[13] = b[13] - tmp*LU[141];
    b[14] = b[14] - tmp*LU[142];
    b[15] = b[15] - tmp*LU[143];
    tmp  = b[9];
    b[10] = b[10] - tmp*LU[154];
    b[11] = b[11] - tmp*LU[155];
    b[12] = b[12] - tmp*LU[156];
    b[13] = b[13] - tmp*LU[157];
    b[14] = b[14] - tmp*LU[158];
    b[15] = b[15] - tmp*LU[159];
    tmp  = b[10];
    b[11] = b[11] - tmp*LU[171];
    b[12] = b[12] - tmp*LU[172];
    b[13] = b[13] - tmp*LU[173];
    b[14] = b[14] - tmp*LU[174];
    b[15] = b[15] - tmp*LU[175];
    tmp  = b[11];
    b[12] = b[12] - tmp*LU[188];
    b[13] = b[13] - tmp*LU[189];
    b[14] = b[14] - tmp*LU[190];
    b[15] = b[15] - tmp*LU[191];
    tmp  = b[12];
    b[13] = b[13] - tmp*LU[205];
    b[14] = b[14] - tmp*LU[206];
    b[15] = b[15] - tmp*LU[207];
    tmp  = b[13];
    b[14] = b[14] - tmp*LU[222];
    b[15] = b[15] - tmp*LU[223];
    tmp  = b[14];
    b[15] = b[15] - tmp*LU[239];
    b[15] = b[15] / LU[255];
    tmp  = b[15];
    b[0] = b[0] - tmp*LU[240];
    b[1] = b[1] - tmp*LU[241];
    b[2] = b[2] - tmp*LU[242];
    b[3] = b[3] - tmp*LU[243];
    b[4] = b[4] - tmp*LU[244];
    b[5] = b[5] - tmp*LU[245];
    b[6] = b[6] - tmp*LU[246];
    b[7] = b[7] - tmp*LU[247];
    b[8] = b[8] - tmp*LU[248];
    b[9] = b[9] - tmp*LU[249];
    b[10] = b[10] - tmp*LU[250];
    b[11] = b[11] - tmp*LU[251];
    b[12] = b[12] - tmp*LU[252];
    b[13] = b[13] - tmp*LU[253];
    b[14] = b[14] - tmp*LU[254];
    b[14] = b[14] / LU[238];
    tmp  = b[14];
    b[0] = b[0] - tmp*LU[224];
    b[1] = b[1] - tmp*LU[225];
    b[2] = b[2] - tmp*LU[226];
    b[3] = b[3] - tmp*LU[227];
    b[4] = b[4] - tmp*LU[228];
    b[5] = b[5] - tmp*LU[229];
    b[6] = b[6] - tmp*LU[230];
    b[7] = b[7] - tmp*LU[231];
    b[8] = b[8] - tmp*LU[232];
    b[9] = b[9] - tmp*LU[233];
    b[10] = b[10] - tmp*LU[234];
    b[11] = b[11] - tmp*LU[235];
    b[12] = b[12] - tmp*LU[236];
    b[13] = b[13] - tmp*LU[237];
    b[13] = b[13] / LU[221];
    tmp  = b[13];
    b[0] = b[0] - tmp*LU[208];
    b[1] = b[1] - tmp*LU[209];
    b[2] = b[2] - tmp*LU[210];
    b[3] = b[3] - tmp*LU[211];
    b[4] = b[4] - tmp*LU[212];
    b[5] = b[5] - tmp*LU[213];
    b[6] = b[6] - tmp*LU[214];
    b[7] = b[7] - tmp*LU[215];
    b[8] = b[8] - tmp*LU[216];
    b[9] = b[9] - tmp*LU[217];
    b[10] = b[10] - tmp*LU[218];
    b[11] = b[11] - tmp*LU[219];
    b[12] = b[12] - tmp*LU[220];
    b[12] = b[12] / LU[204];
    tmp  = b[12];
    b[0] = b[0] - tmp*LU[192];
    b[1] = b[1] - tmp*LU[193];
    b[2] = b[2] - tmp*LU[194];
    b[3] = b[3] - tmp*LU[195];
    b[4] = b[4] - tmp*LU[196];
    b[5] = b[5] - tmp*LU[197];
    b[6] = b[6] - tmp*LU[198];
    b[7] = b[7] - tmp*LU[199];
    b[8] = b[8] - tmp*LU[200];
    b[9] = b[9] - tmp*LU[201];
    b[10] = b[10] - tmp*LU[202];
    b[11] = b[11] - tmp*LU[203];
    b[11] = b[11] / LU[187];
    tmp  = b[11];
    b[0] = b[0] - tmp*LU[176];
    b[1] = b[1] - tmp*LU[177];
    b[2] = b[2] - tmp*LU[178];
    b[3] = b[3] - tmp*LU[179];
    b[4] = b[4] - tmp*LU[180];
    b[5] = b[5] - tmp*LU[181];
    b[6] = b[6] - tmp*LU[182];
    b[7] = b[7] - tmp*LU[183];
    b[8] = b[8] - tmp*LU[184];
    b[9] = b[9] - tmp*LU[185];
    b[10] = b[10] - tmp*LU[186];
    b[10] = b[10] / LU[170];
    tmp  = b[10];
    b[0] = b[0] - tmp*LU[160];
    b[1] = b[1] - tmp*LU[161];
    b[2] = b[2] - tmp*LU[162];
    b[3] = b[3] - tmp*LU[163];
    b[4] = b[4] - tmp*LU[164];
    b[5] = b[5] - tmp*LU[165];
    b[6] = b[6] - tmp*LU[166];
    b[7] = b[7] - tmp*LU[167];
    b[8] = b[8] - tmp*LU[168];
    b[9] = b[9] - tmp*LU[169];
    b[9] = b[9] / LU[153];
    tmp  = b[9];
    b[0] = b[0] - tmp*LU[144];
    b[1] = b[1] - tmp*LU[145];
    b[2] = b[2] - tmp*LU[146];
    b[3] = b[3] - tmp*LU[147];
    b[4] = b[4] - tmp*LU[148];
    b[5] = b[5] - tmp*LU[149];
    b[6] = b[6] - tmp*LU[150];
    b[7] = b[7] - tmp*LU[151];
    b[8] = b[8] - tmp*LU[152];
    b[8] = b[8] / LU[136];
    tmp  = b[8];
    b[0] = b[0] - tmp*LU[128];
    b[1] = b[1] - tmp*LU[129];
    b[2] = b[2] - tmp*LU[130];
    b[3] = b[3] - tmp*LU[131];
    b[4] = b[4] - tmp*LU[132];
    b[5] = b[5] - tmp*LU[133];
    b[6] = b[6] - tmp*LU[134];
    b[7] = b[7] - tmp*LU[135];
    b[7] = b[7] / LU[119];
    tmp  = b[7];
    b[0] = b[0] - tmp*LU[112];
    b[1] = b[1] - tmp*LU[113];
    b[2] = b[2] - tmp*LU[114];
    b[3] = b[3] - tmp*LU[115];
    b[4] = b[4] - tmp*LU[116];
    b[5] = b[5] - tmp*LU[117];
    b[6] = b[6] - tmp*LU[118];
    b[6] = b[6] / LU[102];
    tmp  = b[6];
    b[0] = b[0] - tmp*LU[96];
    b[1] = b[1] - tmp*LU[97];
    b[2] = b[2] - tmp*LU[98];
    b[3] = b[3] - tmp*LU[99];
    b[4] = b[4] - tmp*LU[100];
    b[5] = b[5] - tmp*LU[101];
    b[5] = b[5] / LU[85];
    tmp  = b[5];
    b[0] = b[0] - tmp*LU[80];
    b[1] = b[1] - tmp*LU[81];
    b[2] = b[2] - tmp*LU[82];
    b[3] = b[3] - tmp*LU[83];
    b[4] = b[4] - tmp*LU[84];
    b[4] = b[4] / LU[68];
    tmp  = b[4];
    b[0] = b[0] - tmp*LU[64];
    b[1] = b[1] - tmp*LU[65];
    b[2] = b[2] - tmp*LU[66];
    b[3] = b[3] - tmp*LU[67];
    b[3] = b[3] / LU[51];
    tmp  = b[3];
    b[0] = b[0] - tmp*LU[48];
    b[1] = b[1] - tmp*LU[49];
    b[2] = b[2] - tmp*LU[50];
    b[2] = b[2] / LU[34];
    tmp  = b[2];
    b[0] = b[0] - tmp*LU[32];
    b[1] = b[1] - tmp*LU[33];
    b[1] = b[1] / LU[17];
    tmp  = b[1];
    b[0] = b[0] - tmp*LU[16];
    b[0] = b[0] / LU[0];
}

void lu_solve_t_1 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    b[0] = b[0] / LU[0];
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_2 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[2]*b[0];
    b[1] = tmp / LU[3];
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    b[0] = tmp;
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_3 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[3]*b[0];
    b[1] = tmp / LU[4];
    tmp = b[2];
    tmp = tmp - LU[6]*b[0];
    tmp = tmp - LU[7]*b[1];
    b[2] = tmp / LU[8];
    tmp = b[1];
    tmp = tmp - LU[5]*b[2];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    b[0] = tmp;
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_4 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[4]*b[0];
    b[1] = tmp / LU[5];
    tmp = b[2];
    tmp = tmp - LU[8]*b[0];
    tmp = tmp - LU[9]*b[1];
    b[2] = tmp / LU[10];
    tmp = b[3];
    tmp = tmp - LU[12]*b[0];
    tmp = tmp - LU[13]*b[1];
    tmp = tmp - LU[14]*b[2];
    b[3] = tmp / LU[15];
    tmp = b[2];
    tmp = tmp - LU[11]*b[3];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[6]*b[2];
    tmp = tmp - LU[7]*b[3];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    b[0] = tmp;
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_5 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[5]*b[0];
    b[1] = tmp / LU[6];
    tmp = b[2];
    tmp = tmp - LU[10]*b[0];
    tmp = tmp - LU[11]*b[1];
    b[2] = tmp / LU[12];
    tmp = b[3];
    tmp = tmp - LU[15]*b[0];
    tmp = tmp - LU[16]*b[1];
    tmp = tmp - LU[17]*b[2];
    b[3] = tmp / LU[18];
    tmp = b[4];
    tmp = tmp - LU[20]*b[0];
    tmp = tmp - LU[21]*b[1];
    tmp = tmp - LU[22]*b[2];
    tmp = tmp - LU[23]*b[3];
    b[4] = tmp / LU[24];
    tmp = b[3];
    tmp = tmp - LU[19]*b[4];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[13]*b[3];
    tmp = tmp - LU[14]*b[4];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[7]*b[2];
    tmp = tmp - LU[8]*b[3];
    tmp = tmp - LU[9]*b[4];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    b[0] = tmp;
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_6 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[6]*b[0];
    b[1] = tmp / LU[7];
    tmp = b[2];
    tmp = tmp - LU[12]*b[0];
    tmp = tmp - LU[13]*b[1];
    b[2] = tmp / LU[14];
    tmp = b[3];
    tmp = tmp - LU[18]*b[0];
    tmp = tmp - LU[19]*b[1];
    tmp = tmp - LU[20]*b[2];
    b[3] = tmp / LU[21];
    tmp = b[4];
    tmp = tmp - LU[24]*b[0];
    tmp = tmp - LU[25]*b[1];
    tmp = tmp - LU[26]*b[2];
    tmp = tmp - LU[27]*b[3];
    b[4] = tmp / LU[28];
    tmp = b[5];
    tmp = tmp - LU[30]*b[0];
    tmp = tmp - LU[31]*b[1];
    tmp = tmp - LU[32]*b[2];
    tmp = tmp - LU[33]*b[3];
    tmp = tmp - LU[34]*b[4];
    b[5] = tmp / LU[35];
    tmp = b[4];
    tmp = tmp - LU[29]*b[5];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[22]*b[4];
    tmp = tmp - LU[23]*b[5];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[15]*b[3];
    tmp = tmp - LU[16]*b[4];
    tmp = tmp - LU[17]*b[5];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[8]*b[2];
    tmp = tmp - LU[9]*b[3];
    tmp = tmp - LU[10]*b[4];
    tmp = tmp - LU[11]*b[5];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    b[0] = tmp;
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_7 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[7]*b[0];
    b[1] = tmp / LU[8];
    tmp = b[2];
    tmp = tmp - LU[14]*b[0];
    tmp = tmp - LU[15]*b[1];
    b[2] = tmp / LU[16];
    tmp = b[3];
    tmp = tmp - LU[21]*b[0];
    tmp = tmp - LU[22]*b[1];
    tmp = tmp - LU[23]*b[2];
    b[3] = tmp / LU[24];
    tmp = b[4];
    tmp = tmp - LU[28]*b[0];
    tmp = tmp - LU[29]*b[1];
    tmp = tmp - LU[30]*b[2];
    tmp = tmp - LU[31]*b[3];
    b[4] = tmp / LU[32];
    tmp = b[5];
    tmp = tmp - LU[35]*b[0];
    tmp = tmp - LU[36]*b[1];
    tmp = tmp - LU[37]*b[2];
    tmp = tmp - LU[38]*b[3];
    tmp = tmp - LU[39]*b[4];
    b[5] = tmp / LU[40];
    tmp = b[6];
    tmp = tmp - LU[42]*b[0];
    tmp = tmp - LU[43]*b[1];
    tmp = tmp - LU[44]*b[2];
    tmp = tmp - LU[45]*b[3];
    tmp = tmp - LU[46]*b[4];
    tmp = tmp - LU[47]*b[5];
    b[6] = tmp / LU[48];
    tmp = b[5];
    tmp = tmp - LU[41]*b[6];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[33]*b[5];
    tmp = tmp - LU[34]*b[6];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[25]*b[4];
    tmp = tmp - LU[26]*b[5];
    tmp = tmp - LU[27]*b[6];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[17]*b[3];
    tmp = tmp - LU[18]*b[4];
    tmp = tmp - LU[19]*b[5];
    tmp = tmp - LU[20]*b[6];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[9]*b[2];
    tmp = tmp - LU[10]*b[3];
    tmp = tmp - LU[11]*b[4];
    tmp = tmp - LU[12]*b[5];
    tmp = tmp - LU[13]*b[6];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    b[0] = tmp;
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_8 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[8]*b[0];
    b[1] = tmp / LU[9];
    tmp = b[2];
    tmp = tmp - LU[16]*b[0];
    tmp = tmp - LU[17]*b[1];
    b[2] = tmp / LU[18];
    tmp = b[3];
    tmp = tmp - LU[24]*b[0];
    tmp = tmp - LU[25]*b[1];
    tmp = tmp - LU[26]*b[2];
    b[3] = tmp / LU[27];
    tmp = b[4];
    tmp = tmp - LU[32]*b[0];
    tmp = tmp - LU[33]*b[1];
    tmp = tmp - LU[34]*b[2];
    tmp = tmp - LU[35]*b[3];
    b[4] = tmp / LU[36];
    tmp = b[5];
    tmp = tmp - LU[40]*b[0];
    tmp = tmp - LU[41]*b[1];
    tmp = tmp - LU[42]*b[2];
    tmp = tmp - LU[43]*b[3];
    tmp = tmp - LU[44]*b[4];
    b[5] = tmp / LU[45];
    tmp = b[6];
    tmp = tmp - LU[48]*b[0];
    tmp = tmp - LU[49]*b[1];
    tmp = tmp - LU[50]*b[2];
    tmp = tmp - LU[51]*b[3];
    tmp = tmp - LU[52]*b[4];
    tmp = tmp - LU[53]*b[5];
    b[6] = tmp / LU[54];
    tmp = b[7];
    tmp = tmp - LU[56]*b[0];
    tmp = tmp - LU[57]*b[1];
    tmp = tmp - LU[58]*b[2];
    tmp = tmp - LU[59]*b[3];
    tmp = tmp - LU[60]*b[4];
    tmp = tmp - LU[61]*b[5];
    tmp = tmp - LU[62]*b[6];
    b[7] = tmp / LU[63];
    tmp = b[6];
    tmp = tmp - LU[55]*b[7];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[46]*b[6];
    tmp = tmp - LU[47]*b[7];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[37]*b[5];
    tmp = tmp - LU[38]*b[6];
    tmp = tmp - LU[39]*b[7];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[28]*b[4];
    tmp = tmp - LU[29]*b[5];
    tmp = tmp - LU[30]*b[6];
    tmp = tmp - LU[31]*b[7];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[19]*b[3];
    tmp = tmp - LU[20]*b[4];
    tmp = tmp - LU[21]*b[5];
    tmp = tmp - LU[22]*b[6];
    tmp = tmp - LU[23]*b[7];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[10]*b[2];
    tmp = tmp - LU[11]*b[3];
    tmp = tmp - LU[12]*b[4];
    tmp = tmp - LU[13]*b[5];
    tmp = tmp - LU[14]*b[6];
    tmp = tmp - LU[15]*b[7];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    b[0] = tmp;
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_9 ( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[9]*b[0];
    b[1] = tmp / LU[10];
    tmp = b[2];
    tmp = tmp - LU[18]*b[0];
    tmp = tmp - LU[19]*b[1];
    b[2] = tmp / LU[20];
    tmp = b[3];
    tmp = tmp - LU[27]*b[0];
    tmp = tmp - LU[28]*b[1];
    tmp = tmp - LU[29]*b[2];
    b[3] = tmp / LU[30];
    tmp = b[4];
    tmp = tmp - LU[36]*b[0];
    tmp = tmp - LU[37]*b[1];
    tmp = tmp - LU[38]*b[2];
    tmp = tmp - LU[39]*b[3];
    b[4] = tmp / LU[40];
    tmp = b[5];
    tmp = tmp - LU[45]*b[0];
    tmp = tmp - LU[46]*b[1];
    tmp = tmp - LU[47]*b[2];
    tmp = tmp - LU[48]*b[3];
    tmp = tmp - LU[49]*b[4];
    b[5] = tmp / LU[50];
    tmp = b[6];
    tmp = tmp - LU[54]*b[0];
    tmp = tmp - LU[55]*b[1];
    tmp = tmp - LU[56]*b[2];
    tmp = tmp - LU[57]*b[3];
    tmp = tmp - LU[58]*b[4];
    tmp = tmp - LU[59]*b[5];
    b[6] = tmp / LU[60];
    tmp = b[7];
    tmp = tmp - LU[63]*b[0];
    tmp = tmp - LU[64]*b[1];
    tmp = tmp - LU[65]*b[2];
    tmp = tmp - LU[66]*b[3];
    tmp = tmp - LU[67]*b[4];
    tmp = tmp - LU[68]*b[5];
    tmp = tmp - LU[69]*b[6];
    b[7] = tmp / LU[70];
    tmp = b[8];
    tmp = tmp - LU[72]*b[0];
    tmp = tmp - LU[73]*b[1];
    tmp = tmp - LU[74]*b[2];
    tmp = tmp - LU[75]*b[3];
    tmp = tmp - LU[76]*b[4];
    tmp = tmp - LU[77]*b[5];
    tmp = tmp - LU[78]*b[6];
    tmp = tmp - LU[79]*b[7];
    b[8] = tmp / LU[80];
    tmp = b[7];
    tmp = tmp - LU[71]*b[8];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[61]*b[7];
    tmp = tmp - LU[62]*b[8];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[51]*b[6];
    tmp = tmp - LU[52]*b[7];
    tmp = tmp - LU[53]*b[8];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[41]*b[5];
    tmp = tmp - LU[42]*b[6];
    tmp = tmp - LU[43]*b[7];
    tmp = tmp - LU[44]*b[8];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[31]*b[4];
    tmp = tmp - LU[32]*b[5];
    tmp = tmp - LU[33]*b[6];
    tmp = tmp - LU[34]*b[7];
    tmp = tmp - LU[35]*b[8];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[21]*b[3];
    tmp = tmp - LU[22]*b[4];
    tmp = tmp - LU[23]*b[5];
    tmp = tmp - LU[24]*b[6];
    tmp = tmp - LU[25]*b[7];
    tmp = tmp - LU[26]*b[8];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[11]*b[2];
    tmp = tmp - LU[12]*b[3];
    tmp = tmp - LU[13]*b[4];
    tmp = tmp - LU[14]*b[5];
    tmp = tmp - LU[15]*b[6];
    tmp = tmp - LU[16]*b[7];
    tmp = tmp - LU[17]*b[8];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    b[0] = tmp;
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_10( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[10]*b[0];
    b[1] = tmp / LU[11];
    tmp = b[2];
    tmp = tmp - LU[20]*b[0];
    tmp = tmp - LU[21]*b[1];
    b[2] = tmp / LU[22];
    tmp = b[3];
    tmp = tmp - LU[30]*b[0];
    tmp = tmp - LU[31]*b[1];
    tmp = tmp - LU[32]*b[2];
    b[3] = tmp / LU[33];
    tmp = b[4];
    tmp = tmp - LU[40]*b[0];
    tmp = tmp - LU[41]*b[1];
    tmp = tmp - LU[42]*b[2];
    tmp = tmp - LU[43]*b[3];
    b[4] = tmp / LU[44];
    tmp = b[5];
    tmp = tmp - LU[50]*b[0];
    tmp = tmp - LU[51]*b[1];
    tmp = tmp - LU[52]*b[2];
    tmp = tmp - LU[53]*b[3];
    tmp = tmp - LU[54]*b[4];
    b[5] = tmp / LU[55];
    tmp = b[6];
    tmp = tmp - LU[60]*b[0];
    tmp = tmp - LU[61]*b[1];
    tmp = tmp - LU[62]*b[2];
    tmp = tmp - LU[63]*b[3];
    tmp = tmp - LU[64]*b[4];
    tmp = tmp - LU[65]*b[5];
    b[6] = tmp / LU[66];
    tmp = b[7];
    tmp = tmp - LU[70]*b[0];
    tmp = tmp - LU[71]*b[1];
    tmp = tmp - LU[72]*b[2];
    tmp = tmp - LU[73]*b[3];
    tmp = tmp - LU[74]*b[4];
    tmp = tmp - LU[75]*b[5];
    tmp = tmp - LU[76]*b[6];
    b[7] = tmp / LU[77];
    tmp = b[8];
    tmp = tmp - LU[80]*b[0];
    tmp = tmp - LU[81]*b[1];
    tmp = tmp - LU[82]*b[2];
    tmp = tmp - LU[83]*b[3];
    tmp = tmp - LU[84]*b[4];
    tmp = tmp - LU[85]*b[5];
    tmp = tmp - LU[86]*b[6];
    tmp = tmp - LU[87]*b[7];
    b[8] = tmp / LU[88];
    tmp = b[9];
    tmp = tmp - LU[90]*b[0];
    tmp = tmp - LU[91]*b[1];
    tmp = tmp - LU[92]*b[2];
    tmp = tmp - LU[93]*b[3];
    tmp = tmp - LU[94]*b[4];
    tmp = tmp - LU[95]*b[5];
    tmp = tmp - LU[96]*b[6];
    tmp = tmp - LU[97]*b[7];
    tmp = tmp - LU[98]*b[8];
    b[9] = tmp / LU[99];
    tmp = b[8];
    tmp = tmp - LU[89]*b[9];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[78]*b[8];
    tmp = tmp - LU[79]*b[9];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[67]*b[7];
    tmp = tmp - LU[68]*b[8];
    tmp = tmp - LU[69]*b[9];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[56]*b[6];
    tmp = tmp - LU[57]*b[7];
    tmp = tmp - LU[58]*b[8];
    tmp = tmp - LU[59]*b[9];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[45]*b[5];
    tmp = tmp - LU[46]*b[6];
    tmp = tmp - LU[47]*b[7];
    tmp = tmp - LU[48]*b[8];
    tmp = tmp - LU[49]*b[9];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[34]*b[4];
    tmp = tmp - LU[35]*b[5];
    tmp = tmp - LU[36]*b[6];
    tmp = tmp - LU[37]*b[7];
    tmp = tmp - LU[38]*b[8];
    tmp = tmp - LU[39]*b[9];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[23]*b[3];
    tmp = tmp - LU[24]*b[4];
    tmp = tmp - LU[25]*b[5];
    tmp = tmp - LU[26]*b[6];
    tmp = tmp - LU[27]*b[7];
    tmp = tmp - LU[28]*b[8];
    tmp = tmp - LU[29]*b[9];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[12]*b[2];
    tmp = tmp - LU[13]*b[3];
    tmp = tmp - LU[14]*b[4];
    tmp = tmp - LU[15]*b[5];
    tmp = tmp - LU[16]*b[6];
    tmp = tmp - LU[17]*b[7];
    tmp = tmp - LU[18]*b[8];
    tmp = tmp - LU[19]*b[9];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    b[0] = tmp;
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_11( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[11]*b[0];
    b[1] = tmp / LU[12];
    tmp = b[2];
    tmp = tmp - LU[22]*b[0];
    tmp = tmp - LU[23]*b[1];
    b[2] = tmp / LU[24];
    tmp = b[3];
    tmp = tmp - LU[33]*b[0];
    tmp = tmp - LU[34]*b[1];
    tmp = tmp - LU[35]*b[2];
    b[3] = tmp / LU[36];
    tmp = b[4];
    tmp = tmp - LU[44]*b[0];
    tmp = tmp - LU[45]*b[1];
    tmp = tmp - LU[46]*b[2];
    tmp = tmp - LU[47]*b[3];
    b[4] = tmp / LU[48];
    tmp = b[5];
    tmp = tmp - LU[55]*b[0];
    tmp = tmp - LU[56]*b[1];
    tmp = tmp - LU[57]*b[2];
    tmp = tmp - LU[58]*b[3];
    tmp = tmp - LU[59]*b[4];
    b[5] = tmp / LU[60];
    tmp = b[6];
    tmp = tmp - LU[66]*b[0];
    tmp = tmp - LU[67]*b[1];
    tmp = tmp - LU[68]*b[2];
    tmp = tmp - LU[69]*b[3];
    tmp = tmp - LU[70]*b[4];
    tmp = tmp - LU[71]*b[5];
    b[6] = tmp / LU[72];
    tmp = b[7];
    tmp = tmp - LU[77]*b[0];
    tmp = tmp - LU[78]*b[1];
    tmp = tmp - LU[79]*b[2];
    tmp = tmp - LU[80]*b[3];
    tmp = tmp - LU[81]*b[4];
    tmp = tmp - LU[82]*b[5];
    tmp = tmp - LU[83]*b[6];
    b[7] = tmp / LU[84];
    tmp = b[8];
    tmp = tmp - LU[88]*b[0];
    tmp = tmp - LU[89]*b[1];
    tmp = tmp - LU[90]*b[2];
    tmp = tmp - LU[91]*b[3];
    tmp = tmp - LU[92]*b[4];
    tmp = tmp - LU[93]*b[5];
    tmp = tmp - LU[94]*b[6];
    tmp = tmp - LU[95]*b[7];
    b[8] = tmp / LU[96];
    tmp = b[9];
    tmp = tmp - LU[99]*b[0];
    tmp = tmp - LU[100]*b[1];
    tmp = tmp - LU[101]*b[2];
    tmp = tmp - LU[102]*b[3];
    tmp = tmp - LU[103]*b[4];
    tmp = tmp - LU[104]*b[5];
    tmp = tmp - LU[105]*b[6];
    tmp = tmp - LU[106]*b[7];
    tmp = tmp - LU[107]*b[8];
    b[9] = tmp / LU[108];
    tmp = b[10];
    tmp = tmp - LU[110]*b[0];
    tmp = tmp - LU[111]*b[1];
    tmp = tmp - LU[112]*b[2];
    tmp = tmp - LU[113]*b[3];
    tmp = tmp - LU[114]*b[4];
    tmp = tmp - LU[115]*b[5];
    tmp = tmp - LU[116]*b[6];
    tmp = tmp - LU[117]*b[7];
    tmp = tmp - LU[118]*b[8];
    tmp = tmp - LU[119]*b[9];
    b[10] = tmp / LU[120];
    tmp = b[9];
    tmp = tmp - LU[109]*b[10];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[97]*b[9];
    tmp = tmp - LU[98]*b[10];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[85]*b[8];
    tmp = tmp - LU[86]*b[9];
    tmp = tmp - LU[87]*b[10];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[73]*b[7];
    tmp = tmp - LU[74]*b[8];
    tmp = tmp - LU[75]*b[9];
    tmp = tmp - LU[76]*b[10];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[61]*b[6];
    tmp = tmp - LU[62]*b[7];
    tmp = tmp - LU[63]*b[8];
    tmp = tmp - LU[64]*b[9];
    tmp = tmp - LU[65]*b[10];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[49]*b[5];
    tmp = tmp - LU[50]*b[6];
    tmp = tmp - LU[51]*b[7];
    tmp = tmp - LU[52]*b[8];
    tmp = tmp - LU[53]*b[9];
    tmp = tmp - LU[54]*b[10];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[37]*b[4];
    tmp = tmp - LU[38]*b[5];
    tmp = tmp - LU[39]*b[6];
    tmp = tmp - LU[40]*b[7];
    tmp = tmp - LU[41]*b[8];
    tmp = tmp - LU[42]*b[9];
    tmp = tmp - LU[43]*b[10];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[25]*b[3];
    tmp = tmp - LU[26]*b[4];
    tmp = tmp - LU[27]*b[5];
    tmp = tmp - LU[28]*b[6];
    tmp = tmp - LU[29]*b[7];
    tmp = tmp - LU[30]*b[8];
    tmp = tmp - LU[31]*b[9];
    tmp = tmp - LU[32]*b[10];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[13]*b[2];
    tmp = tmp - LU[14]*b[3];
    tmp = tmp - LU[15]*b[4];
    tmp = tmp - LU[16]*b[5];
    tmp = tmp - LU[17]*b[6];
    tmp = tmp - LU[18]*b[7];
    tmp = tmp - LU[19]*b[8];
    tmp = tmp - LU[20]*b[9];
    tmp = tmp - LU[21]*b[10];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    b[0] = tmp;
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_12( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[12]*b[0];
    b[1] = tmp / LU[13];
    tmp = b[2];
    tmp = tmp - LU[24]*b[0];
    tmp = tmp - LU[25]*b[1];
    b[2] = tmp / LU[26];
    tmp = b[3];
    tmp = tmp - LU[36]*b[0];
    tmp = tmp - LU[37]*b[1];
    tmp = tmp - LU[38]*b[2];
    b[3] = tmp / LU[39];
    tmp = b[4];
    tmp = tmp - LU[48]*b[0];
    tmp = tmp - LU[49]*b[1];
    tmp = tmp - LU[50]*b[2];
    tmp = tmp - LU[51]*b[3];
    b[4] = tmp / LU[52];
    tmp = b[5];
    tmp = tmp - LU[60]*b[0];
    tmp = tmp - LU[61]*b[1];
    tmp = tmp - LU[62]*b[2];
    tmp = tmp - LU[63]*b[3];
    tmp = tmp - LU[64]*b[4];
    b[5] = tmp / LU[65];
    tmp = b[6];
    tmp = tmp - LU[72]*b[0];
    tmp = tmp - LU[73]*b[1];
    tmp = tmp - LU[74]*b[2];
    tmp = tmp - LU[75]*b[3];
    tmp = tmp - LU[76]*b[4];
    tmp = tmp - LU[77]*b[5];
    b[6] = tmp / LU[78];
    tmp = b[7];
    tmp = tmp - LU[84]*b[0];
    tmp = tmp - LU[85]*b[1];
    tmp = tmp - LU[86]*b[2];
    tmp = tmp - LU[87]*b[3];
    tmp = tmp - LU[88]*b[4];
    tmp = tmp - LU[89]*b[5];
    tmp = tmp - LU[90]*b[6];
    b[7] = tmp / LU[91];
    tmp = b[8];
    tmp = tmp - LU[96]*b[0];
    tmp = tmp - LU[97]*b[1];
    tmp = tmp - LU[98]*b[2];
    tmp = tmp - LU[99]*b[3];
    tmp = tmp - LU[100]*b[4];
    tmp = tmp - LU[101]*b[5];
    tmp = tmp - LU[102]*b[6];
    tmp = tmp - LU[103]*b[7];
    b[8] = tmp / LU[104];
    tmp = b[9];
    tmp = tmp - LU[108]*b[0];
    tmp = tmp - LU[109]*b[1];
    tmp = tmp - LU[110]*b[2];
    tmp = tmp - LU[111]*b[3];
    tmp = tmp - LU[112]*b[4];
    tmp = tmp - LU[113]*b[5];
    tmp = tmp - LU[114]*b[6];
    tmp = tmp - LU[115]*b[7];
    tmp = tmp - LU[116]*b[8];
    b[9] = tmp / LU[117];
    tmp = b[10];
    tmp = tmp - LU[120]*b[0];
    tmp = tmp - LU[121]*b[1];
    tmp = tmp - LU[122]*b[2];
    tmp = tmp - LU[123]*b[3];
    tmp = tmp - LU[124]*b[4];
    tmp = tmp - LU[125]*b[5];
    tmp = tmp - LU[126]*b[6];
    tmp = tmp - LU[127]*b[7];
    tmp = tmp - LU[128]*b[8];
    tmp = tmp - LU[129]*b[9];
    b[10] = tmp / LU[130];
    tmp = b[11];
    tmp = tmp - LU[132]*b[0];
    tmp = tmp - LU[133]*b[1];
    tmp = tmp - LU[134]*b[2];
    tmp = tmp - LU[135]*b[3];
    tmp = tmp - LU[136]*b[4];
    tmp = tmp - LU[137]*b[5];
    tmp = tmp - LU[138]*b[6];
    tmp = tmp - LU[139]*b[7];
    tmp = tmp - LU[140]*b[8];
    tmp = tmp - LU[141]*b[9];
    tmp = tmp - LU[142]*b[10];
    b[11] = tmp / LU[143];
    tmp = b[10];
    tmp = tmp - LU[131]*b[11];
    b[10] = tmp;
    tmp = b[9];
    tmp = tmp - LU[118]*b[10];
    tmp = tmp - LU[119]*b[11];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[105]*b[9];
    tmp = tmp - LU[106]*b[10];
    tmp = tmp - LU[107]*b[11];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[92]*b[8];
    tmp = tmp - LU[93]*b[9];
    tmp = tmp - LU[94]*b[10];
    tmp = tmp - LU[95]*b[11];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[79]*b[7];
    tmp = tmp - LU[80]*b[8];
    tmp = tmp - LU[81]*b[9];
    tmp = tmp - LU[82]*b[10];
    tmp = tmp - LU[83]*b[11];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[66]*b[6];
    tmp = tmp - LU[67]*b[7];
    tmp = tmp - LU[68]*b[8];
    tmp = tmp - LU[69]*b[9];
    tmp = tmp - LU[70]*b[10];
    tmp = tmp - LU[71]*b[11];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[53]*b[5];
    tmp = tmp - LU[54]*b[6];
    tmp = tmp - LU[55]*b[7];
    tmp = tmp - LU[56]*b[8];
    tmp = tmp - LU[57]*b[9];
    tmp = tmp - LU[58]*b[10];
    tmp = tmp - LU[59]*b[11];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[40]*b[4];
    tmp = tmp - LU[41]*b[5];
    tmp = tmp - LU[42]*b[6];
    tmp = tmp - LU[43]*b[7];
    tmp = tmp - LU[44]*b[8];
    tmp = tmp - LU[45]*b[9];
    tmp = tmp - LU[46]*b[10];
    tmp = tmp - LU[47]*b[11];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[27]*b[3];
    tmp = tmp - LU[28]*b[4];
    tmp = tmp - LU[29]*b[5];
    tmp = tmp - LU[30]*b[6];
    tmp = tmp - LU[31]*b[7];
    tmp = tmp - LU[32]*b[8];
    tmp = tmp - LU[33]*b[9];
    tmp = tmp - LU[34]*b[10];
    tmp = tmp - LU[35]*b[11];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[14]*b[2];
    tmp = tmp - LU[15]*b[3];
    tmp = tmp - LU[16]*b[4];
    tmp = tmp - LU[17]*b[5];
    tmp = tmp - LU[18]*b[6];
    tmp = tmp - LU[19]*b[7];
    tmp = tmp - LU[20]*b[8];
    tmp = tmp - LU[21]*b[9];
    tmp = tmp - LU[22]*b[10];
    tmp = tmp - LU[23]*b[11];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    tmp = tmp - LU[11]*b[11];
    b[0] = tmp;
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_13( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[13]*b[0];
    b[1] = tmp / LU[14];
    tmp = b[2];
    tmp = tmp - LU[26]*b[0];
    tmp = tmp - LU[27]*b[1];
    b[2] = tmp / LU[28];
    tmp = b[3];
    tmp = tmp - LU[39]*b[0];
    tmp = tmp - LU[40]*b[1];
    tmp = tmp - LU[41]*b[2];
    b[3] = tmp / LU[42];
    tmp = b[4];
    tmp = tmp - LU[52]*b[0];
    tmp = tmp - LU[53]*b[1];
    tmp = tmp - LU[54]*b[2];
    tmp = tmp - LU[55]*b[3];
    b[4] = tmp / LU[56];
    tmp = b[5];
    tmp = tmp - LU[65]*b[0];
    tmp = tmp - LU[66]*b[1];
    tmp = tmp - LU[67]*b[2];
    tmp = tmp - LU[68]*b[3];
    tmp = tmp - LU[69]*b[4];
    b[5] = tmp / LU[70];
    tmp = b[6];
    tmp = tmp - LU[78]*b[0];
    tmp = tmp - LU[79]*b[1];
    tmp = tmp - LU[80]*b[2];
    tmp = tmp - LU[81]*b[3];
    tmp = tmp - LU[82]*b[4];
    tmp = tmp - LU[83]*b[5];
    b[6] = tmp / LU[84];
    tmp = b[7];
    tmp = tmp - LU[91]*b[0];
    tmp = tmp - LU[92]*b[1];
    tmp = tmp - LU[93]*b[2];
    tmp = tmp - LU[94]*b[3];
    tmp = tmp - LU[95]*b[4];
    tmp = tmp - LU[96]*b[5];
    tmp = tmp - LU[97]*b[6];
    b[7] = tmp / LU[98];
    tmp = b[8];
    tmp = tmp - LU[104]*b[0];
    tmp = tmp - LU[105]*b[1];
    tmp = tmp - LU[106]*b[2];
    tmp = tmp - LU[107]*b[3];
    tmp = tmp - LU[108]*b[4];
    tmp = tmp - LU[109]*b[5];
    tmp = tmp - LU[110]*b[6];
    tmp = tmp - LU[111]*b[7];
    b[8] = tmp / LU[112];
    tmp = b[9];
    tmp = tmp - LU[117]*b[0];
    tmp = tmp - LU[118]*b[1];
    tmp = tmp - LU[119]*b[2];
    tmp = tmp - LU[120]*b[3];
    tmp = tmp - LU[121]*b[4];
    tmp = tmp - LU[122]*b[5];
    tmp = tmp - LU[123]*b[6];
    tmp = tmp - LU[124]*b[7];
    tmp = tmp - LU[125]*b[8];
    b[9] = tmp / LU[126];
    tmp = b[10];
    tmp = tmp - LU[130]*b[0];
    tmp = tmp - LU[131]*b[1];
    tmp = tmp - LU[132]*b[2];
    tmp = tmp - LU[133]*b[3];
    tmp = tmp - LU[134]*b[4];
    tmp = tmp - LU[135]*b[5];
    tmp = tmp - LU[136]*b[6];
    tmp = tmp - LU[137]*b[7];
    tmp = tmp - LU[138]*b[8];
    tmp = tmp - LU[139]*b[9];
    b[10] = tmp / LU[140];
    tmp = b[11];
    tmp = tmp - LU[143]*b[0];
    tmp = tmp - LU[144]*b[1];
    tmp = tmp - LU[145]*b[2];
    tmp = tmp - LU[146]*b[3];
    tmp = tmp - LU[147]*b[4];
    tmp = tmp - LU[148]*b[5];
    tmp = tmp - LU[149]*b[6];
    tmp = tmp - LU[150]*b[7];
    tmp = tmp - LU[151]*b[8];
    tmp = tmp - LU[152]*b[9];
    tmp = tmp - LU[153]*b[10];
    b[11] = tmp / LU[154];
    tmp = b[12];
    tmp = tmp - LU[156]*b[0];
    tmp = tmp - LU[157]*b[1];
    tmp = tmp - LU[158]*b[2];
    tmp = tmp - LU[159]*b[3];
    tmp = tmp - LU[160]*b[4];
    tmp = tmp - LU[161]*b[5];
    tmp = tmp - LU[162]*b[6];
    tmp = tmp - LU[163]*b[7];
    tmp = tmp - LU[164]*b[8];
    tmp = tmp - LU[165]*b[9];
    tmp = tmp - LU[166]*b[10];
    tmp = tmp - LU[167]*b[11];
    b[12] = tmp / LU[168];
    tmp = b[11];
    tmp = tmp - LU[155]*b[12];
    b[11] = tmp;
    tmp = b[10];
    tmp = tmp - LU[141]*b[11];
    tmp = tmp - LU[142]*b[12];
    b[10] = tmp;
    tmp = b[9];
    tmp = tmp - LU[127]*b[10];
    tmp = tmp - LU[128]*b[11];
    tmp = tmp - LU[129]*b[12];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[113]*b[9];
    tmp = tmp - LU[114]*b[10];
    tmp = tmp - LU[115]*b[11];
    tmp = tmp - LU[116]*b[12];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[99]*b[8];
    tmp = tmp - LU[100]*b[9];
    tmp = tmp - LU[101]*b[10];
    tmp = tmp - LU[102]*b[11];
    tmp = tmp - LU[103]*b[12];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[85]*b[7];
    tmp = tmp - LU[86]*b[8];
    tmp = tmp - LU[87]*b[9];
    tmp = tmp - LU[88]*b[10];
    tmp = tmp - LU[89]*b[11];
    tmp = tmp - LU[90]*b[12];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[71]*b[6];
    tmp = tmp - LU[72]*b[7];
    tmp = tmp - LU[73]*b[8];
    tmp = tmp - LU[74]*b[9];
    tmp = tmp - LU[75]*b[10];
    tmp = tmp - LU[76]*b[11];
    tmp = tmp - LU[77]*b[12];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[57]*b[5];
    tmp = tmp - LU[58]*b[6];
    tmp = tmp - LU[59]*b[7];
    tmp = tmp - LU[60]*b[8];
    tmp = tmp - LU[61]*b[9];
    tmp = tmp - LU[62]*b[10];
    tmp = tmp - LU[63]*b[11];
    tmp = tmp - LU[64]*b[12];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[43]*b[4];
    tmp = tmp - LU[44]*b[5];
    tmp = tmp - LU[45]*b[6];
    tmp = tmp - LU[46]*b[7];
    tmp = tmp - LU[47]*b[8];
    tmp = tmp - LU[48]*b[9];
    tmp = tmp - LU[49]*b[10];
    tmp = tmp - LU[50]*b[11];
    tmp = tmp - LU[51]*b[12];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[29]*b[3];
    tmp = tmp - LU[30]*b[4];
    tmp = tmp - LU[31]*b[5];
    tmp = tmp - LU[32]*b[6];
    tmp = tmp - LU[33]*b[7];
    tmp = tmp - LU[34]*b[8];
    tmp = tmp - LU[35]*b[9];
    tmp = tmp - LU[36]*b[10];
    tmp = tmp - LU[37]*b[11];
    tmp = tmp - LU[38]*b[12];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[15]*b[2];
    tmp = tmp - LU[16]*b[3];
    tmp = tmp - LU[17]*b[4];
    tmp = tmp - LU[18]*b[5];
    tmp = tmp - LU[19]*b[6];
    tmp = tmp - LU[20]*b[7];
    tmp = tmp - LU[21]*b[8];
    tmp = tmp - LU[22]*b[9];
    tmp = tmp - LU[23]*b[10];
    tmp = tmp - LU[24]*b[11];
    tmp = tmp - LU[25]*b[12];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    tmp = tmp - LU[11]*b[11];
    tmp = tmp - LU[12]*b[12];
    b[0] = tmp;
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_14( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[14]*b[0];
    b[1] = tmp / LU[15];
    tmp = b[2];
    tmp = tmp - LU[28]*b[0];
    tmp = tmp - LU[29]*b[1];
    b[2] = tmp / LU[30];
    tmp = b[3];
    tmp = tmp - LU[42]*b[0];
    tmp = tmp - LU[43]*b[1];
    tmp = tmp - LU[44]*b[2];
    b[3] = tmp / LU[45];
    tmp = b[4];
    tmp = tmp - LU[56]*b[0];
    tmp = tmp - LU[57]*b[1];
    tmp = tmp - LU[58]*b[2];
    tmp = tmp - LU[59]*b[3];
    b[4] = tmp / LU[60];
    tmp = b[5];
    tmp = tmp - LU[70]*b[0];
    tmp = tmp - LU[71]*b[1];
    tmp = tmp - LU[72]*b[2];
    tmp = tmp - LU[73]*b[3];
    tmp = tmp - LU[74]*b[4];
    b[5] = tmp / LU[75];
    tmp = b[6];
    tmp = tmp - LU[84]*b[0];
    tmp = tmp - LU[85]*b[1];
    tmp = tmp - LU[86]*b[2];
    tmp = tmp - LU[87]*b[3];
    tmp = tmp - LU[88]*b[4];
    tmp = tmp - LU[89]*b[5];
    b[6] = tmp / LU[90];
    tmp = b[7];
    tmp = tmp - LU[98]*b[0];
    tmp = tmp - LU[99]*b[1];
    tmp = tmp - LU[100]*b[2];
    tmp = tmp - LU[101]*b[3];
    tmp = tmp - LU[102]*b[4];
    tmp = tmp - LU[103]*b[5];
    tmp = tmp - LU[104]*b[6];
    b[7] = tmp / LU[105];
    tmp = b[8];
    tmp = tmp - LU[112]*b[0];
    tmp = tmp - LU[113]*b[1];
    tmp = tmp - LU[114]*b[2];
    tmp = tmp - LU[115]*b[3];
    tmp = tmp - LU[116]*b[4];
    tmp = tmp - LU[117]*b[5];
    tmp = tmp - LU[118]*b[6];
    tmp = tmp - LU[119]*b[7];
    b[8] = tmp / LU[120];
    tmp = b[9];
    tmp = tmp - LU[126]*b[0];
    tmp = tmp - LU[127]*b[1];
    tmp = tmp - LU[128]*b[2];
    tmp = tmp - LU[129]*b[3];
    tmp = tmp - LU[130]*b[4];
    tmp = tmp - LU[131]*b[5];
    tmp = tmp - LU[132]*b[6];
    tmp = tmp - LU[133]*b[7];
    tmp = tmp - LU[134]*b[8];
    b[9] = tmp / LU[135];
    tmp = b[10];
    tmp = tmp - LU[140]*b[0];
    tmp = tmp - LU[141]*b[1];
    tmp = tmp - LU[142]*b[2];
    tmp = tmp - LU[143]*b[3];
    tmp = tmp - LU[144]*b[4];
    tmp = tmp - LU[145]*b[5];
    tmp = tmp - LU[146]*b[6];
    tmp = tmp - LU[147]*b[7];
    tmp = tmp - LU[148]*b[8];
    tmp = tmp - LU[149]*b[9];
    b[10] = tmp / LU[150];
    tmp = b[11];
    tmp = tmp - LU[154]*b[0];
    tmp = tmp - LU[155]*b[1];
    tmp = tmp - LU[156]*b[2];
    tmp = tmp - LU[157]*b[3];
    tmp = tmp - LU[158]*b[4];
    tmp = tmp - LU[159]*b[5];
    tmp = tmp - LU[160]*b[6];
    tmp = tmp - LU[161]*b[7];
    tmp = tmp - LU[162]*b[8];
    tmp = tmp - LU[163]*b[9];
    tmp = tmp - LU[164]*b[10];
    b[11] = tmp / LU[165];
    tmp = b[12];
    tmp = tmp - LU[168]*b[0];
    tmp = tmp - LU[169]*b[1];
    tmp = tmp - LU[170]*b[2];
    tmp = tmp - LU[171]*b[3];
    tmp = tmp - LU[172]*b[4];
    tmp = tmp - LU[173]*b[5];
    tmp = tmp - LU[174]*b[6];
    tmp = tmp - LU[175]*b[7];
    tmp = tmp - LU[176]*b[8];
    tmp = tmp - LU[177]*b[9];
    tmp = tmp - LU[178]*b[10];
    tmp = tmp - LU[179]*b[11];
    b[12] = tmp / LU[180];
    tmp = b[13];
    tmp = tmp - LU[182]*b[0];
    tmp = tmp - LU[183]*b[1];
    tmp = tmp - LU[184]*b[2];
    tmp = tmp - LU[185]*b[3];
    tmp = tmp - LU[186]*b[4];
    tmp = tmp - LU[187]*b[5];
    tmp = tmp - LU[188]*b[6];
    tmp = tmp - LU[189]*b[7];
    tmp = tmp - LU[190]*b[8];
    tmp = tmp - LU[191]*b[9];
    tmp = tmp - LU[192]*b[10];
    tmp = tmp - LU[193]*b[11];
    tmp = tmp - LU[194]*b[12];
    b[13] = tmp / LU[195];
    tmp = b[12];
    tmp = tmp - LU[181]*b[13];
    b[12] = tmp;
    tmp = b[11];
    tmp = tmp - LU[166]*b[12];
    tmp = tmp - LU[167]*b[13];
    b[11] = tmp;
    tmp = b[10];
    tmp = tmp - LU[151]*b[11];
    tmp = tmp - LU[152]*b[12];
    tmp = tmp - LU[153]*b[13];
    b[10] = tmp;
    tmp = b[9];
    tmp = tmp - LU[136]*b[10];
    tmp = tmp - LU[137]*b[11];
    tmp = tmp - LU[138]*b[12];
    tmp = tmp - LU[139]*b[13];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[121]*b[9];
    tmp = tmp - LU[122]*b[10];
    tmp = tmp - LU[123]*b[11];
    tmp = tmp - LU[124]*b[12];
    tmp = tmp - LU[125]*b[13];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[106]*b[8];
    tmp = tmp - LU[107]*b[9];
    tmp = tmp - LU[108]*b[10];
    tmp = tmp - LU[109]*b[11];
    tmp = tmp - LU[110]*b[12];
    tmp = tmp - LU[111]*b[13];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[91]*b[7];
    tmp = tmp - LU[92]*b[8];
    tmp = tmp - LU[93]*b[9];
    tmp = tmp - LU[94]*b[10];
    tmp = tmp - LU[95]*b[11];
    tmp = tmp - LU[96]*b[12];
    tmp = tmp - LU[97]*b[13];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[76]*b[6];
    tmp = tmp - LU[77]*b[7];
    tmp = tmp - LU[78]*b[8];
    tmp = tmp - LU[79]*b[9];
    tmp = tmp - LU[80]*b[10];
    tmp = tmp - LU[81]*b[11];
    tmp = tmp - LU[82]*b[12];
    tmp = tmp - LU[83]*b[13];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[61]*b[5];
    tmp = tmp - LU[62]*b[6];
    tmp = tmp - LU[63]*b[7];
    tmp = tmp - LU[64]*b[8];
    tmp = tmp - LU[65]*b[9];
    tmp = tmp - LU[66]*b[10];
    tmp = tmp - LU[67]*b[11];
    tmp = tmp - LU[68]*b[12];
    tmp = tmp - LU[69]*b[13];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[46]*b[4];
    tmp = tmp - LU[47]*b[5];
    tmp = tmp - LU[48]*b[6];
    tmp = tmp - LU[49]*b[7];
    tmp = tmp - LU[50]*b[8];
    tmp = tmp - LU[51]*b[9];
    tmp = tmp - LU[52]*b[10];
    tmp = tmp - LU[53]*b[11];
    tmp = tmp - LU[54]*b[12];
    tmp = tmp - LU[55]*b[13];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[31]*b[3];
    tmp = tmp - LU[32]*b[4];
    tmp = tmp - LU[33]*b[5];
    tmp = tmp - LU[34]*b[6];
    tmp = tmp - LU[35]*b[7];
    tmp = tmp - LU[36]*b[8];
    tmp = tmp - LU[37]*b[9];
    tmp = tmp - LU[38]*b[10];
    tmp = tmp - LU[39]*b[11];
    tmp = tmp - LU[40]*b[12];
    tmp = tmp - LU[41]*b[13];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[16]*b[2];
    tmp = tmp - LU[17]*b[3];
    tmp = tmp - LU[18]*b[4];
    tmp = tmp - LU[19]*b[5];
    tmp = tmp - LU[20]*b[6];
    tmp = tmp - LU[21]*b[7];
    tmp = tmp - LU[22]*b[8];
    tmp = tmp - LU[23]*b[9];
    tmp = tmp - LU[24]*b[10];
    tmp = tmp - LU[25]*b[11];
    tmp = tmp - LU[26]*b[12];
    tmp = tmp - LU[27]*b[13];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    tmp = tmp - LU[11]*b[11];
    tmp = tmp - LU[12]*b[12];
    tmp = tmp - LU[13]*b[13];
    b[0] = tmp;
    std::swap( b[13], b[P[13]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_15( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[15]*b[0];
    b[1] = tmp / LU[16];
    tmp = b[2];
    tmp = tmp - LU[30]*b[0];
    tmp = tmp - LU[31]*b[1];
    b[2] = tmp / LU[32];
    tmp = b[3];
    tmp = tmp - LU[45]*b[0];
    tmp = tmp - LU[46]*b[1];
    tmp = tmp - LU[47]*b[2];
    b[3] = tmp / LU[48];
    tmp = b[4];
    tmp = tmp - LU[60]*b[0];
    tmp = tmp - LU[61]*b[1];
    tmp = tmp - LU[62]*b[2];
    tmp = tmp - LU[63]*b[3];
    b[4] = tmp / LU[64];
    tmp = b[5];
    tmp = tmp - LU[75]*b[0];
    tmp = tmp - LU[76]*b[1];
    tmp = tmp - LU[77]*b[2];
    tmp = tmp - LU[78]*b[3];
    tmp = tmp - LU[79]*b[4];
    b[5] = tmp / LU[80];
    tmp = b[6];
    tmp = tmp - LU[90]*b[0];
    tmp = tmp - LU[91]*b[1];
    tmp = tmp - LU[92]*b[2];
    tmp = tmp - LU[93]*b[3];
    tmp = tmp - LU[94]*b[4];
    tmp = tmp - LU[95]*b[5];
    b[6] = tmp / LU[96];
    tmp = b[7];
    tmp = tmp - LU[105]*b[0];
    tmp = tmp - LU[106]*b[1];
    tmp = tmp - LU[107]*b[2];
    tmp = tmp - LU[108]*b[3];
    tmp = tmp - LU[109]*b[4];
    tmp = tmp - LU[110]*b[5];
    tmp = tmp - LU[111]*b[6];
    b[7] = tmp / LU[112];
    tmp = b[8];
    tmp = tmp - LU[120]*b[0];
    tmp = tmp - LU[121]*b[1];
    tmp = tmp - LU[122]*b[2];
    tmp = tmp - LU[123]*b[3];
    tmp = tmp - LU[124]*b[4];
    tmp = tmp - LU[125]*b[5];
    tmp = tmp - LU[126]*b[6];
    tmp = tmp - LU[127]*b[7];
    b[8] = tmp / LU[128];
    tmp = b[9];
    tmp = tmp - LU[135]*b[0];
    tmp = tmp - LU[136]*b[1];
    tmp = tmp - LU[137]*b[2];
    tmp = tmp - LU[138]*b[3];
    tmp = tmp - LU[139]*b[4];
    tmp = tmp - LU[140]*b[5];
    tmp = tmp - LU[141]*b[6];
    tmp = tmp - LU[142]*b[7];
    tmp = tmp - LU[143]*b[8];
    b[9] = tmp / LU[144];
    tmp = b[10];
    tmp = tmp - LU[150]*b[0];
    tmp = tmp - LU[151]*b[1];
    tmp = tmp - LU[152]*b[2];
    tmp = tmp - LU[153]*b[3];
    tmp = tmp - LU[154]*b[4];
    tmp = tmp - LU[155]*b[5];
    tmp = tmp - LU[156]*b[6];
    tmp = tmp - LU[157]*b[7];
    tmp = tmp - LU[158]*b[8];
    tmp = tmp - LU[159]*b[9];
    b[10] = tmp / LU[160];
    tmp = b[11];
    tmp = tmp - LU[165]*b[0];
    tmp = tmp - LU[166]*b[1];
    tmp = tmp - LU[167]*b[2];
    tmp = tmp - LU[168]*b[3];
    tmp = tmp - LU[169]*b[4];
    tmp = tmp - LU[170]*b[5];
    tmp = tmp - LU[171]*b[6];
    tmp = tmp - LU[172]*b[7];
    tmp = tmp - LU[173]*b[8];
    tmp = tmp - LU[174]*b[9];
    tmp = tmp - LU[175]*b[10];
    b[11] = tmp / LU[176];
    tmp = b[12];
    tmp = tmp - LU[180]*b[0];
    tmp = tmp - LU[181]*b[1];
    tmp = tmp - LU[182]*b[2];
    tmp = tmp - LU[183]*b[3];
    tmp = tmp - LU[184]*b[4];
    tmp = tmp - LU[185]*b[5];
    tmp = tmp - LU[186]*b[6];
    tmp = tmp - LU[187]*b[7];
    tmp = tmp - LU[188]*b[8];
    tmp = tmp - LU[189]*b[9];
    tmp = tmp - LU[190]*b[10];
    tmp = tmp - LU[191]*b[11];
    b[12] = tmp / LU[192];
    tmp = b[13];
    tmp = tmp - LU[195]*b[0];
    tmp = tmp - LU[196]*b[1];
    tmp = tmp - LU[197]*b[2];
    tmp = tmp - LU[198]*b[3];
    tmp = tmp - LU[199]*b[4];
    tmp = tmp - LU[200]*b[5];
    tmp = tmp - LU[201]*b[6];
    tmp = tmp - LU[202]*b[7];
    tmp = tmp - LU[203]*b[8];
    tmp = tmp - LU[204]*b[9];
    tmp = tmp - LU[205]*b[10];
    tmp = tmp - LU[206]*b[11];
    tmp = tmp - LU[207]*b[12];
    b[13] = tmp / LU[208];
    tmp = b[14];
    tmp = tmp - LU[210]*b[0];
    tmp = tmp - LU[211]*b[1];
    tmp = tmp - LU[212]*b[2];
    tmp = tmp - LU[213]*b[3];
    tmp = tmp - LU[214]*b[4];
    tmp = tmp - LU[215]*b[5];
    tmp = tmp - LU[216]*b[6];
    tmp = tmp - LU[217]*b[7];
    tmp = tmp - LU[218]*b[8];
    tmp = tmp - LU[219]*b[9];
    tmp = tmp - LU[220]*b[10];
    tmp = tmp - LU[221]*b[11];
    tmp = tmp - LU[222]*b[12];
    tmp = tmp - LU[223]*b[13];
    b[14] = tmp / LU[224];
    tmp = b[13];
    tmp = tmp - LU[209]*b[14];
    b[13] = tmp;
    tmp = b[12];
    tmp = tmp - LU[193]*b[13];
    tmp = tmp - LU[194]*b[14];
    b[12] = tmp;
    tmp = b[11];
    tmp = tmp - LU[177]*b[12];
    tmp = tmp - LU[178]*b[13];
    tmp = tmp - LU[179]*b[14];
    b[11] = tmp;
    tmp = b[10];
    tmp = tmp - LU[161]*b[11];
    tmp = tmp - LU[162]*b[12];
    tmp = tmp - LU[163]*b[13];
    tmp = tmp - LU[164]*b[14];
    b[10] = tmp;
    tmp = b[9];
    tmp = tmp - LU[145]*b[10];
    tmp = tmp - LU[146]*b[11];
    tmp = tmp - LU[147]*b[12];
    tmp = tmp - LU[148]*b[13];
    tmp = tmp - LU[149]*b[14];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[129]*b[9];
    tmp = tmp - LU[130]*b[10];
    tmp = tmp - LU[131]*b[11];
    tmp = tmp - LU[132]*b[12];
    tmp = tmp - LU[133]*b[13];
    tmp = tmp - LU[134]*b[14];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[113]*b[8];
    tmp = tmp - LU[114]*b[9];
    tmp = tmp - LU[115]*b[10];
    tmp = tmp - LU[116]*b[11];
    tmp = tmp - LU[117]*b[12];
    tmp = tmp - LU[118]*b[13];
    tmp = tmp - LU[119]*b[14];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[97]*b[7];
    tmp = tmp - LU[98]*b[8];
    tmp = tmp - LU[99]*b[9];
    tmp = tmp - LU[100]*b[10];
    tmp = tmp - LU[101]*b[11];
    tmp = tmp - LU[102]*b[12];
    tmp = tmp - LU[103]*b[13];
    tmp = tmp - LU[104]*b[14];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[81]*b[6];
    tmp = tmp - LU[82]*b[7];
    tmp = tmp - LU[83]*b[8];
    tmp = tmp - LU[84]*b[9];
    tmp = tmp - LU[85]*b[10];
    tmp = tmp - LU[86]*b[11];
    tmp = tmp - LU[87]*b[12];
    tmp = tmp - LU[88]*b[13];
    tmp = tmp - LU[89]*b[14];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[65]*b[5];
    tmp = tmp - LU[66]*b[6];
    tmp = tmp - LU[67]*b[7];
    tmp = tmp - LU[68]*b[8];
    tmp = tmp - LU[69]*b[9];
    tmp = tmp - LU[70]*b[10];
    tmp = tmp - LU[71]*b[11];
    tmp = tmp - LU[72]*b[12];
    tmp = tmp - LU[73]*b[13];
    tmp = tmp - LU[74]*b[14];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[49]*b[4];
    tmp = tmp - LU[50]*b[5];
    tmp = tmp - LU[51]*b[6];
    tmp = tmp - LU[52]*b[7];
    tmp = tmp - LU[53]*b[8];
    tmp = tmp - LU[54]*b[9];
    tmp = tmp - LU[55]*b[10];
    tmp = tmp - LU[56]*b[11];
    tmp = tmp - LU[57]*b[12];
    tmp = tmp - LU[58]*b[13];
    tmp = tmp - LU[59]*b[14];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[33]*b[3];
    tmp = tmp - LU[34]*b[4];
    tmp = tmp - LU[35]*b[5];
    tmp = tmp - LU[36]*b[6];
    tmp = tmp - LU[37]*b[7];
    tmp = tmp - LU[38]*b[8];
    tmp = tmp - LU[39]*b[9];
    tmp = tmp - LU[40]*b[10];
    tmp = tmp - LU[41]*b[11];
    tmp = tmp - LU[42]*b[12];
    tmp = tmp - LU[43]*b[13];
    tmp = tmp - LU[44]*b[14];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[17]*b[2];
    tmp = tmp - LU[18]*b[3];
    tmp = tmp - LU[19]*b[4];
    tmp = tmp - LU[20]*b[5];
    tmp = tmp - LU[21]*b[6];
    tmp = tmp - LU[22]*b[7];
    tmp = tmp - LU[23]*b[8];
    tmp = tmp - LU[24]*b[9];
    tmp = tmp - LU[25]*b[10];
    tmp = tmp - LU[26]*b[11];
    tmp = tmp - LU[27]*b[12];
    tmp = tmp - LU[28]*b[13];
    tmp = tmp - LU[29]*b[14];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    tmp = tmp - LU[11]*b[11];
    tmp = tmp - LU[12]*b[12];
    tmp = tmp - LU[13]*b[13];
    tmp = tmp - LU[14]*b[14];
    b[0] = tmp;
    std::swap( b[14], b[P[14]-1] );
    std::swap( b[13], b[P[13]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

void lu_solve_t_16( const double *__restrict__ LU, const lapack_int *P, double *__restrict__ b )
{
    double tmp;
    b[0] = b[0] / LU[0];
    tmp = b[1];
    tmp = tmp - LU[16]*b[0];
    b[1] = tmp / LU[17];
    tmp = b[2];
    tmp = tmp - LU[32]*b[0];
    tmp = tmp - LU[33]*b[1];
    b[2] = tmp / LU[34];
    tmp = b[3];
    tmp = tmp - LU[48]*b[0];
    tmp = tmp - LU[49]*b[1];
    tmp = tmp - LU[50]*b[2];
    b[3] = tmp / LU[51];
    tmp = b[4];
    tmp = tmp - LU[64]*b[0];
    tmp = tmp - LU[65]*b[1];
    tmp = tmp - LU[66]*b[2];
    tmp = tmp - LU[67]*b[3];
    b[4] = tmp / LU[68];
    tmp = b[5];
    tmp = tmp - LU[80]*b[0];
    tmp = tmp - LU[81]*b[1];
    tmp = tmp - LU[82]*b[2];
    tmp = tmp - LU[83]*b[3];
    tmp = tmp - LU[84]*b[4];
    b[5] = tmp / LU[85];
    tmp = b[6];
    tmp = tmp - LU[96]*b[0];
    tmp = tmp - LU[97]*b[1];
    tmp = tmp - LU[98]*b[2];
    tmp = tmp - LU[99]*b[3];
    tmp = tmp - LU[100]*b[4];
    tmp = tmp - LU[101]*b[5];
    b[6] = tmp / LU[102];
    tmp = b[7];
    tmp = tmp - LU[112]*b[0];
    tmp = tmp - LU[113]*b[1];
    tmp = tmp - LU[114]*b[2];
    tmp = tmp - LU[115]*b[3];
    tmp = tmp - LU[116]*b[4];
    tmp = tmp - LU[117]*b[5];
    tmp = tmp - LU[118]*b[6];
    b[7] = tmp / LU[119];
    tmp = b[8];
    tmp = tmp - LU[128]*b[0];
    tmp = tmp - LU[129]*b[1];
    tmp = tmp - LU[130]*b[2];
    tmp = tmp - LU[131]*b[3];
    tmp = tmp - LU[132]*b[4];
    tmp = tmp - LU[133]*b[5];
    tmp = tmp - LU[134]*b[6];
    tmp = tmp - LU[135]*b[7];
    b[8] = tmp / LU[136];
    tmp = b[9];
    tmp = tmp - LU[144]*b[0];
    tmp = tmp - LU[145]*b[1];
    tmp = tmp - LU[146]*b[2];
    tmp = tmp - LU[147]*b[3];
    tmp = tmp - LU[148]*b[4];
    tmp = tmp - LU[149]*b[5];
    tmp = tmp - LU[150]*b[6];
    tmp = tmp - LU[151]*b[7];
    tmp = tmp - LU[152]*b[8];
    b[9] = tmp / LU[153];
    tmp = b[10];
    tmp = tmp - LU[160]*b[0];
    tmp = tmp - LU[161]*b[1];
    tmp = tmp - LU[162]*b[2];
    tmp = tmp - LU[163]*b[3];
    tmp = tmp - LU[164]*b[4];
    tmp = tmp - LU[165]*b[5];
    tmp = tmp - LU[166]*b[6];
    tmp = tmp - LU[167]*b[7];
    tmp = tmp - LU[168]*b[8];
    tmp = tmp - LU[169]*b[9];
    b[10] = tmp / LU[170];
    tmp = b[11];
    tmp = tmp - LU[176]*b[0];
    tmp = tmp - LU[177]*b[1];
    tmp = tmp - LU[178]*b[2];
    tmp = tmp - LU[179]*b[3];
    tmp = tmp - LU[180]*b[4];
    tmp = tmp - LU[181]*b[5];
    tmp = tmp - LU[182]*b[6];
    tmp = tmp - LU[183]*b[7];
    tmp = tmp - LU[184]*b[8];
    tmp = tmp - LU[185]*b[9];
    tmp = tmp - LU[186]*b[10];
    b[11] = tmp / LU[187];
    tmp = b[12];
    tmp = tmp - LU[192]*b[0];
    tmp = tmp - LU[193]*b[1];
    tmp = tmp - LU[194]*b[2];
    tmp = tmp - LU[195]*b[3];
    tmp = tmp - LU[196]*b[4];
    tmp = tmp - LU[197]*b[5];
    tmp = tmp - LU[198]*b[6];
    tmp = tmp - LU[199]*b[7];
    tmp = tmp - LU[200]*b[8];
    tmp = tmp - LU[201]*b[9];
    tmp = tmp - LU[202]*b[10];
    tmp = tmp - LU[203]*b[11];
    b[12] = tmp / LU[204];
    tmp = b[13];
    tmp = tmp - LU[208]*b[0];
    tmp = tmp - LU[209]*b[1];
    tmp = tmp - LU[210]*b[2];
    tmp = tmp - LU[211]*b[3];
    tmp = tmp - LU[212]*b[4];
    tmp = tmp - LU[213]*b[5];
    tmp = tmp - LU[214]*b[6];
    tmp = tmp - LU[215]*b[7];
    tmp = tmp - LU[216]*b[8];
    tmp = tmp - LU[217]*b[9];
    tmp = tmp - LU[218]*b[10];
    tmp = tmp - LU[219]*b[11];
    tmp = tmp - LU[220]*b[12];
    b[13] = tmp / LU[221];
    tmp = b[14];
    tmp = tmp - LU[224]*b[0];
    tmp = tmp - LU[225]*b[1];
    tmp = tmp - LU[226]*b[2];
    tmp = tmp - LU[227]*b[3];
    tmp = tmp - LU[228]*b[4];
    tmp = tmp - LU[229]*b[5];
    tmp = tmp - LU[230]*b[6];
    tmp = tmp - LU[231]*b[7];
    tmp = tmp - LU[232]*b[8];
    tmp = tmp - LU[233]*b[9];
    tmp = tmp - LU[234]*b[10];
    tmp = tmp - LU[235]*b[11];
    tmp = tmp - LU[236]*b[12];
    tmp = tmp - LU[237]*b[13];
    b[14] = tmp / LU[238];
    tmp = b[15];
    tmp = tmp - LU[240]*b[0];
    tmp = tmp - LU[241]*b[1];
    tmp = tmp - LU[242]*b[2];
    tmp = tmp - LU[243]*b[3];
    tmp = tmp - LU[244]*b[4];
    tmp = tmp - LU[245]*b[5];
    tmp = tmp - LU[246]*b[6];
    tmp = tmp - LU[247]*b[7];
    tmp = tmp - LU[248]*b[8];
    tmp = tmp - LU[249]*b[9];
    tmp = tmp - LU[250]*b[10];
    tmp = tmp - LU[251]*b[11];
    tmp = tmp - LU[252]*b[12];
    tmp = tmp - LU[253]*b[13];
    tmp = tmp - LU[254]*b[14];
    b[15] = tmp / LU[255];
    tmp = b[14];
    tmp = tmp - LU[239]*b[15];
    b[14] = tmp;
    tmp = b[13];
    tmp = tmp - LU[222]*b[14];
    tmp = tmp - LU[223]*b[15];
    b[13] = tmp;
    tmp = b[12];
    tmp = tmp - LU[205]*b[13];
    tmp = tmp - LU[206]*b[14];
    tmp = tmp - LU[207]*b[15];
    b[12] = tmp;
    tmp = b[11];
    tmp = tmp - LU[188]*b[12];
    tmp = tmp - LU[189]*b[13];
    tmp = tmp - LU[190]*b[14];
    tmp = tmp - LU[191]*b[15];
    b[11] = tmp;
    tmp = b[10];
    tmp = tmp - LU[171]*b[11];
    tmp = tmp - LU[172]*b[12];
    tmp = tmp - LU[173]*b[13];
    tmp = tmp - LU[174]*b[14];
    tmp = tmp - LU[175]*b[15];
    b[10] = tmp;
    tmp = b[9];
    tmp = tmp - LU[154]*b[10];
    tmp = tmp - LU[155]*b[11];
    tmp = tmp - LU[156]*b[12];
    tmp = tmp - LU[157]*b[13];
    tmp = tmp - LU[158]*b[14];
    tmp = tmp - LU[159]*b[15];
    b[9] = tmp;
    tmp = b[8];
    tmp = tmp - LU[137]*b[9];
    tmp = tmp - LU[138]*b[10];
    tmp = tmp - LU[139]*b[11];
    tmp = tmp - LU[140]*b[12];
    tmp = tmp - LU[141]*b[13];
    tmp = tmp - LU[142]*b[14];
    tmp = tmp - LU[143]*b[15];
    b[8] = tmp;
    tmp = b[7];
    tmp = tmp - LU[120]*b[8];
    tmp = tmp - LU[121]*b[9];
    tmp = tmp - LU[122]*b[10];
    tmp = tmp - LU[123]*b[11];
    tmp = tmp - LU[124]*b[12];
    tmp = tmp - LU[125]*b[13];
    tmp = tmp - LU[126]*b[14];
    tmp = tmp - LU[127]*b[15];
    b[7] = tmp;
    tmp = b[6];
    tmp = tmp - LU[103]*b[7];
    tmp = tmp - LU[104]*b[8];
    tmp = tmp - LU[105]*b[9];
    tmp = tmp - LU[106]*b[10];
    tmp = tmp - LU[107]*b[11];
    tmp = tmp - LU[108]*b[12];
    tmp = tmp - LU[109]*b[13];
    tmp = tmp - LU[110]*b[14];
    tmp = tmp - LU[111]*b[15];
    b[6] = tmp;
    tmp = b[5];
    tmp = tmp - LU[86]*b[6];
    tmp = tmp - LU[87]*b[7];
    tmp = tmp - LU[88]*b[8];
    tmp = tmp - LU[89]*b[9];
    tmp = tmp - LU[90]*b[10];
    tmp = tmp - LU[91]*b[11];
    tmp = tmp - LU[92]*b[12];
    tmp = tmp - LU[93]*b[13];
    tmp = tmp - LU[94]*b[14];
    tmp = tmp - LU[95]*b[15];
    b[5] = tmp;
    tmp = b[4];
    tmp = tmp - LU[69]*b[5];
    tmp = tmp - LU[70]*b[6];
    tmp = tmp - LU[71]*b[7];
    tmp = tmp - LU[72]*b[8];
    tmp = tmp - LU[73]*b[9];
    tmp = tmp - LU[74]*b[10];
    tmp = tmp - LU[75]*b[11];
    tmp = tmp - LU[76]*b[12];
    tmp = tmp - LU[77]*b[13];
    tmp = tmp - LU[78]*b[14];
    tmp = tmp - LU[79]*b[15];
    b[4] = tmp;
    tmp = b[3];
    tmp = tmp - LU[52]*b[4];
    tmp = tmp - LU[53]*b[5];
    tmp = tmp - LU[54]*b[6];
    tmp = tmp - LU[55]*b[7];
    tmp = tmp - LU[56]*b[8];
    tmp = tmp - LU[57]*b[9];
    tmp = tmp - LU[58]*b[10];
    tmp = tmp - LU[59]*b[11];
    tmp = tmp - LU[60]*b[12];
    tmp = tmp - LU[61]*b[13];
    tmp = tmp - LU[62]*b[14];
    tmp = tmp - LU[63]*b[15];
    b[3] = tmp;
    tmp = b[2];
    tmp = tmp - LU[35]*b[3];
    tmp = tmp - LU[36]*b[4];
    tmp = tmp - LU[37]*b[5];
    tmp = tmp - LU[38]*b[6];
    tmp = tmp - LU[39]*b[7];
    tmp = tmp - LU[40]*b[8];
    tmp = tmp - LU[41]*b[9];
    tmp = tmp - LU[42]*b[10];
    tmp = tmp - LU[43]*b[11];
    tmp = tmp - LU[44]*b[12];
    tmp = tmp - LU[45]*b[13];
    tmp = tmp - LU[46]*b[14];
    tmp = tmp - LU[47]*b[15];
    b[2] = tmp;
    tmp = b[1];
    tmp = tmp - LU[18]*b[2];
    tmp = tmp - LU[19]*b[3];
    tmp = tmp - LU[20]*b[4];
    tmp = tmp - LU[21]*b[5];
    tmp = tmp - LU[22]*b[6];
    tmp = tmp - LU[23]*b[7];
    tmp = tmp - LU[24]*b[8];
    tmp = tmp - LU[25]*b[9];
    tmp = tmp - LU[26]*b[10];
    tmp = tmp - LU[27]*b[11];
    tmp = tmp - LU[28]*b[12];
    tmp = tmp - LU[29]*b[13];
    tmp = tmp - LU[30]*b[14];
    tmp = tmp - LU[31]*b[15];
    b[1] = tmp;
    tmp = b[0];
    tmp = tmp - LU[1]*b[1];
    tmp = tmp - LU[2]*b[2];
    tmp = tmp - LU[3]*b[3];
    tmp = tmp - LU[4]*b[4];
    tmp = tmp - LU[5]*b[5];
    tmp = tmp - LU[6]*b[6];
    tmp = tmp - LU[7]*b[7];
    tmp = tmp - LU[8]*b[8];
    tmp = tmp - LU[9]*b[9];
    tmp = tmp - LU[10]*b[10];
    tmp = tmp - LU[11]*b[11];
    tmp = tmp - LU[12]*b[12];
    tmp = tmp - LU[13]*b[13];
    tmp = tmp - LU[14]*b[14];
    tmp = tmp - LU[15]*b[15];
    b[0] = tmp;
    std::swap( b[15], b[P[15]-1] );
    std::swap( b[14], b[P[14]-1] );
    std::swap( b[13], b[P[13]-1] );
    std::swap( b[12], b[P[12]-1] );
    std::swap( b[11], b[P[11]-1] );
    std::swap( b[10], b[P[10]-1] );
    std::swap( b[9], b[P[9]-1] );
    std::swap( b[8], b[P[8]-1] );
    std::swap( b[7], b[P[7]-1] );
    std::swap( b[6], b[P[6]-1] );
    std::swap( b[5], b[P[5]-1] );
    std::swap( b[4], b[P[4]-1] );
    std::swap( b[3], b[P[3]-1] );
    std::swap( b[2], b[P[2]-1] );
    std::swap( b[1], b[P[1]-1] );
    std::swap( b[0], b[P[0]-1] );
}

}

